class CanConverter {

public final int VCU_TO_OBC_AUTH_REQ_VCU_TO_OBC_SEED_MASK0=24;
public final int VCU_TO_OBC_AUTH_REQ_VCU_TO_OBC_SEED_MASK1=16;
public final int VCU_TO_OBC_AUTH_REQ_VCU_TO_OBC_SEED_MASK2=8;


public final int OBC_TO_VCU_AUTH_RESP_OBC_KEY_MASK0=24;
public final int OBC_TO_VCU_AUTH_RESP_OBC_KEY_MASK1=16;
public final int OBC_TO_VCU_AUTH_RESP_OBC_KEY_MASK2=8;

public final int VCU_TO_MCU_AUTH_REQ_VCU_TO_MCU_SEED_MASK0=24;
public final int VCU_TO_MCU_AUTH_REQ_VCU_TO_MCU_SEED_MASK1=16;
public final int VCU_TO_MCU_AUTH_REQ_VCU_TO_MCU_SEED_MASK2=8;

public final int MCU_TO_VCU_AUTH_RESP_MCU_KEY_MASK0=24;
public final int MCU_TO_VCU_AUTH_RESP_MCU_KEY_MASK1=16;
public final int MCU_TO_VCU_AUTH_RESP_MCU_KEY_MASK2=8;


public final int MCU_DATA2_REGEN_STATUS_MASK0=2;
public final int MCU_DATA2_MCU_RIDING_MODE_MASK0=1;
public final int MCU_DATA2_HILL_HOLD_STATUS_MASK0=5;
public final int MCU_DATA2_MCU_DC_VOLTAGE_MASK0=8;

public final int REGEN_SET_PERCENTAGE_FORCED_REGEN_PERCENTAGE_MASK0=8;
public final int REGEN_SET_PERCENTAGE_COAST_REGEN_PERCENTAGE_MASK0=8;
public final int REGEN_SET_PERCENTAGE_BRAKE_REGEN_PENCENTAGE_MASK0=8;
public final int REGEN_SET_PERCENTAGE_REGEN_MAX_CURRENT_MASK0=8;

public final int BMS_PARAMETER_1_BATTERY_PACK_BUS_VOLT_MASK0=8;
public final int BMS_PARAMETER_1_BMS_BOARD_TEMP_MASK0=8;
public final int BMS_PARAMETER_1_BATTERY_CHARGE_INHIBIT_MASK0=1;
public final int BMS_PARAMETER_1_BATTERY_DISCHARGE_INHIBIT_MASK0=2;
public final int BMS_PARAMETER_1_BATTERY_DERATE_DRIVE_CURR_FLAG_MASK0=3;
public final int BMS_PARAMETER_1_BATTERY_DERATE_CHARGE_CURR_FLAG_MASK0=4;
public final int BMS_PARAMETER_1_BATTERY_INHIBIT_REGEN_FAULT_MASK0=5;
public final int BMS_PARAMETER_1_BATTERY_PERMANANT_FAULT_MASK0=6;
public final int BMS_PARAMETER_1_BMS_SHORT_CIR_DETECTION_ERROR_MASK0=7;

public final int BATTERY_LIMITS_CHARGE_CURRENT_LIMIT_MASK0=8;
public final int BATTERY_LIMITS_DISCHARGE_CURRENT_LIMIT_MASK0=8;

public final int BMS_PARAMETER_LIMIT_2_REGEN_CURRENT_LIMIT_MASK0=8;
public final int BMS_PARAMETER_LIMIT_2_RESERVED_MASK0=8;
public final int BMS_PARAMETER_LIMIT_2_CELL_AGGREGATE_VOLTAGE_MASK0=8;

public final int VEHICLE_MODE_RESERVED2_MASK0=4;

public final int TRACTION_CONTROL_LEAN_ANGLE_RIGHT_MASK0=7;
public final int TRACTION_CONTROL_LEAN_ANGLE_RIGHT_MASK1=1;
public final int TRACTION_CONTROL_LEAN_ANGLE_LEFT_MASK0=7;
public final int TRACTION_CONTROL_LEAN_ANGLE_LEFT_MASK1=1;
public final int TRACTION_CONTROL_THROTTE_1_VALUE_MASK0=15;
public final int TRACTION_CONTROL_THROTTE_1_VALUE_MASK1=7;
public final int TRACTION_CONTROL_THROTTE_1_VALUE_MASK2=1;
public final int TRACTION_CONTROL_THROTTLE_2_VALUE_MASK0=15;
public final int TRACTION_CONTROL_THROTTLE_2_VALUE_MASK1=7;
public final int TRACTION_CONTROL_THROTTLE_2_VALUE_MASK2=1;
public final int TRACTION_CONTROL_THROTTLE_PERCENTAGE_MASK0=7;
public final int TRACTION_CONTROL_THROTTLE_PERCENTAGE_MASK1=1;
public final int TRACTION_CONTROL_MOTOR_CUT_MASK0=2;

public final int SOM_PARAMETERS_1_SOM_STATUS_MASK0=1;

public final int ABS_PARAMETERS_ABS_REARBRAKE_STATUS_MASK0=1;
public final int ABS_PARAMETERS_ABS_STATE_MASK0=2;
public final int ABS_PARAMETERS_ABS_FAULTY_MASK0=6;


public final int VEHICLE_FUNC_REAR_BRAKE_STATUS_MASK0=1;
public final int VEHICLE_FUNC_CRUISE_CONTROL_REQ_MASK0=2;
public final int VEHICLE_FUNC_HILL_HOLD_COMMAND_MASK0=6;
public final int VEHICLE_FUNC_REGENERATION_COMMAND_MASK0=1;
public final int VEHICLE_FUNC_REGENERATION_COMMAND_MASK1=7;
public final int VEHICLE_FUNC_CRUISE_SET_SPEED_MASK0=6;
public final int VEHICLE_FUNC_CRUISE_SET_SPEED_MASK1=2;

public final int BMS_PARAMETER_3_EFFECTIVE_BATTERY_TEMPERATURE_MASK0=7;
public final int BMS_PARAMETER_3_EFFECTIVE_BATTERY_TEMPERATURE_MASK1=1;
public final int BMS_PARAMETER_3_DELTA_TEMP_MASK0=7;
public final int BMS_PARAMETER_3_DELTA_TEMP_MASK1=1;
public final int BMS_PARAMETER_3_DELTA_VOLTAGE_MASK0=15;
public final int BMS_PARAMETER_3_DELTA_VOLTAGE_MASK1=7;
public final int BMS_PARAMETER_3_DELTA_VOLTAGE_MASK2=1;
public final int BMS_PARAMETER_3_HVIL_OBC_REQ_MASK0=2;
public final int BMS_PARAMETER_3_HVIL_MCU_REQ_MASK0=3;
public final int BMS_PARAMETER_3_HVIL_OBC_STATUS_MASK0=4;
public final int BMS_PARAMETER_3_HVIL_MCU_STATUS_MASK0=5;
public final int BMS_PARAMETER_3_ISOLATION_RESISTANCE_MASK0=10;
public final int BMS_PARAMETER_3_ISOLATION_RESISTANCE_MASK1=2;
public final int BMS_PARAMETER_3_ISOLATION_RESISTANCE_MASK2=6;

public final int BMS_PARAMETER_4_PACK_INTERNAL_RESISTANCE_MASK0=8;
public final int BMS_PARAMETER_4_TOTAL_CHARGE_CYCLES_MASK0=8;

public final int BATTERY_ENERGY_CYCLES_CYCLE_ENERGY_IN_MASK0=8;
public final int BATTERY_ENERGY_CYCLES_CYCLE_ENEGY_OUT_MASK0=8;
public final int BATTERY_ENERGY_CYCLES_TOTAL_ENERGY_IN_MASK0=8;
public final int BATTERY_ENERGY_CYCLES_TOTAL_ENERGY_OUT_MASK0=8;



public final int CUSTOM_MODE_POWER_MASK0=7;
public final int CUSTOM_MODE_POWER_MASK1=1;
public final int CUSTOM_MODE_THROTTLE_PERFORMANCE_MASK0=7;
public final int CUSTOM_MODE_THROTTLE_PERFORMANCE_MASK1=1;
public final int CUSTOM_MODE_REGEN_MASK0=7;
public final int CUSTOM_MODE_REGEN_MASK1=1;

public final int VCU_DATA_MCU_POWER_SUPPLY_MASK0=1;
public final int VCU_DATA_HU_POWER_SUPPLY_MASK0=2;
public final int VCU_DATA_LEFT_INDICATOR_POWER_SUPPLY_MASK0=3;
public final int VCU_DATA_RIGHT_INDICATOR_POWER_SUPPLY_MASK0=4;
public final int VCU_DATA_HIGH_BEAM_POWER_SUPPLY_MASK0=5;
public final int VCU_DATA_LOW_BEAM_POWER_SUPPLY_MASK0=6;
public final int VCU_DATA_DRL_POWER_SUPPLY_MASK0=7;
public final int VCU_DATA_RIGHT_SWITCH_CUBE_POWER_SUPPLY_MASK0=1;
public final int VCU_DATA_HORN_POWER_SUPPLY_MASK0=2;
public final int VCU_DATA_SPEAKER_POWER_SUPPLY_MASK0=3;
public final int VCU_DATA_SOM_POWER_SUPPLY_MASK0=4;
public final int VCU_DATA_ESCL_POWER_SUPPLY_MASK0=5;
public final int VCU_DATA_ESCL_COMMANDS_MASK0=2;
public final int VCU_DATA_ESCL_COMMANDS_MASK1=6;

public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_2_MASK0=1;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_3_MASK0=2;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_4_MASK0=3;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_5_MASK0=4;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_6_MASK0=5;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_7_MASK0=6;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_8_MASK0=7;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_10_MASK0=1;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_11_MASK0=2;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_12_MASK0=3;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_13_MASK0=4;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_14_MASK0=5;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_15_MASK0=6;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_16_MASK0=7;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_18_MASK0=1;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_20_MASK0=3;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_21_MASK0=4;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_22_MASK0=5;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_23_MASK0=6;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_24_MASK0=7;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_26_MASK0=1;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_27_MASK0=2;
public final int BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_28_MASK0=3;
public final int BMS_CELL_STATUS_BMS_CELL_MIN_VOLTAGE_MASK0=8;
public final int BMS_CELL_STATUS_BMS_CELL_MAX_VOLTAGE_MASK0=8;

public final int CHARGER_PARAMETER_1_CHARGER_IP_AC_VOLT_MASK0=8;
public final int CHARGER_PARAMETER_1_CHARGER_IP_AC_CURRENT_MASK0=8;
public final int CHARGER_PARAMETER_1_CHARGER_OP_DC_VOLT_MASK0=8;
public final int CHARGER_PARAMETER_1_CHARGER_OP_DC_CURRENT_MASK0=8;

public final int OBC_HP_DCDC_PARAMETER_2_OBC_TEMP_MASK0=8;
public final int OBC_HP_DCDC_PARAMETER_2_HP_DCDC_TEMP_MASK0=8;
public final int OBC_HP_DCDC_PARAMETER_2_OBC_COOLANT_FAN_STATUS_MASK0=1;
public final int OBC_HP_DCDC_PARAMETER_2_CONTROL_PROXIMITY_STATUS_MASK0=2;
public final int OBC_HP_DCDC_PARAMETER_2_DCDC_CONV_OP_ENABLE_MASK0=3;

public final int BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_1_MASK0=8;
public final int BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_2_MASK0=8;
public final int BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_3_MASK0=8;
public final int BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_4_MASK0=8;

public final int BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_5_MASK0=8;
public final int BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_6_MASK0=8;
public final int BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_7_MASK0=8;
public final int BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_8_MASK0=8;

public final int BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_9_MASK0=8;
public final int BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_10_MASK0=8;
public final int BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_11_MASK0=8;
public final int BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_12_MASK0=8;

public final int BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_13_MASK0=8;
public final int BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_14_MASK0=8;
public final int BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_15_MASK0=8;
public final int BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_16_MASK0=8;

public final int BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_17_MASK0=8;
public final int BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_18_MASK0=8;
public final int BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_19_MASK0=8;
public final int BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_20_MASK0=8;

public final int BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_21_MASK0=8;
public final int BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_22_MASK0=8;
public final int BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_23_MASK0=8;
public final int BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_24_MASK0=8;

public final int BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_25_MASK0=8;
public final int BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_26_MASK0=8;
public final int BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_27_MASK0=8;
public final int BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_28_MASK0=8;

public final int CHARGER_STATUS_INFO_CHARGER_MODE_MASK0=1;

public final int MCU_DATA3_MCU_DC_CURRENT_MASK0=8;
public final int MCU_DATA3_MOTOR_TORQUE_MASK0=8;

public final int MCU_DATA4_MOTOR_BEMF_FREQUENCY_MASK0=8;
public final int MCU_DATA4_POSITION_COUNTER_MASK0=6;
public final int MCU_DATA4_POSITION_COUNTER_MASK1=2;
public final int MCU_DATA4_ROTOR_ANGLE_MASK0=3;
public final int MCU_DATA4_ROTOR_ANGLE_MASK1=5;
public final int MCU_DATA4_VEHICLE_DIR_FLAG_MASK0=1;

public final int MCU_DATA5_LIVE_POSITION_COUNTER_MASK0=8;
public final int MCU_DATA5_LIVE_PWM_ROTOR_ANGLE_MASK0=4;
public final int MCU_DATA5_LIVE_PWM_ROTOR_ANGLE_MASK1=4;
public final int MCU_DATA5_LIVE_Z_PULSE_COUNTER_MASK0=19;
public final int MCU_DATA5_LIVE_Z_PULSE_COUNTER_MASK1=11;
public final int MCU_DATA5_LIVE_Z_PULSE_COUNTER_MASK2=3;
public final int MCU_DATA5_LIVE_Z_PULSE_COUNTER_MASK3=5;
public final int MCU_DATA5_REGEN_TORQUE_MASK0=15;
public final int MCU_DATA5_REGEN_TORQUE_MASK1=7;
public final int MCU_DATA5_REGEN_TORQUE_MASK2=1;

public final int MCU_DATA6_R_PHASE_CURRENT_MCU_MASK0=8;
public final int MCU_DATA6_Y_PHASE_CURRENT_MCU_MASK0=8;
public final int MCU_DATA6_B_PHASE_CURRENT_MCU_MASK0=8;

public final int MCU_DATA1_VEHICLE_SPEED_KMPH_MASK0=8;
public final int MCU_DATA1_MCU_TEMP_MASK0=8;
public final int MCU_DATA1_MOTOR_TEMP_MASK0=8;
public final int MCU_DATA1_MOTOR_RPM_MASK0=8;


public final int MCU_FAULT_DATA_MOTOROC_PROTECT_V_PH_MASK0=1;
public final int MCU_FAULT_DATA_MOTOROC_PROTECT_W_PH_MASK0=2;
public final int MCU_FAULT_DATA_MOTOROV_PROTECT_U_PH_MASK0=3;
public final int MCU_FAULT_DATA_MOTOROV_PROTECT_V_PH_MASK0=4;
public final int MCU_FAULT_DATA_MOTOROV_PROTECT_W_PH_MASK0=5;
public final int MCU_FAULT_DATA_ENCODER_DISCONNECTION_MASK0=6;
public final int MCU_FAULT_DATA_ENCODER_FAILURE_MASK0=7;
public final int MCU_FAULT_DATA_DCBUS_OVERVOLTAGE_MASK0=1;
public final int MCU_FAULT_DATA_DCBUS_OVERCURRENT_MASK0=2;
public final int MCU_FAULT_DATA_DCBUS_SHORTCIRCUIT_MASK0=3;
public final int MCU_FAULT_DATA_DCBUS_REVERSEPOLARITY_MASK0=4;
public final int MCU_FAULT_DATA_DCBUS_HVIL_FAIL_MASK0=5;
public final int MCU_FAULT_DATA_PRECHRGE_FAIL_MASK0=6;
public final int MCU_FAULT_DATA_MOTOR_REGEN_BREAK_FAULT_MASK0=1;
public final int MCU_FAULT_DATA_RESERVED_MASK0=3;
public final int MCU_FAULT_DATA_DC_BUS_CAPACITOR_OVERTEMP_MASK0=4;
public final int MCU_FAULT_DATA_LV_SUPPLYOVERVOLTAGE_MASK0=5;
public final int MCU_FAULT_DATA_LV_SUPPLYUNDERVOLTAGE_MASK0=6;
public final int MCU_FAULT_DATA_LV_SUPPLYOVERCURRENT_MASK0=7;
public final int MCU_FAULT_DATA_MOTORPHASEDISCONNECT_UPHASE_MASK0=1;
public final int MCU_FAULT_DATA_MOTORPHASEDISCONNECT_VPHASE_MASK0=2;
public final int MCU_FAULT_DATA_MOTORPHASEDISCONNECT_WPHASE_MASK0=3;
public final int MCU_FAULT_DATA_MOTORWINDING_TEMP_SENSOR_FAIL_MASK0=4;
public final int MCU_FAULT_DATA_MCU_MOSFET_TEMP_SENSOR_FAIL_MASK0=5;
public final int MCU_FAULT_DATA_MCUDC_BUS_C_TEMP_SENS_FAIL_MASK0=6;
public final int MCU_FAULT_DATA_MCU_CALIBRATION_FAIL_MASK0=7;
public final int MCU_FAULT_DATA_MCU_FAULT_KL30_FAULT_MASK0=3;
public final int MCU_FAULT_DATA_MCU_FAULT_MACHINE_TEMP_LOW_MASK0=4;
public final int MCU_FAULT_DATA_MCU_FAULT_BOARD_TEMP_LOW_MASK0=5;
public final int MCU_FAULT_DATA_MCU_FAULT_ROTOR_STALL_MASK0=6;

public final int MCU_FAULT_DATA2_MOTOR_OVER_TEMP_WARNING_MASK0=1;
public final int MCU_FAULT_DATA2_MCU_OVERSPEED_FAULT_MASK0=3;
public final int MCU_FAULT_DATA2_REGEN_FAILURE_MASK0=4;
public final int MCU_FAULT_DATA2_MCU_FLT_DC_BUS_V_SENSOR_STG_MASK0=2;
public final int MCU_FAULT_DATA2_MCU_FLT_DC_BUS_V_SENSOR_STB_MASK0=3;
public final int MCU_FAULT_DATA2_MCU_FLT_KL30_SENSOR_STG_MASK0=4;
public final int MCU_FAULT_DATA2_MCU_FLT_KL30_SENSOR_STB_MASK0=5;
public final int MCU_FAULT_DATA2_MCU_FLT_BOARDTEMP_SENSOR_STG_MASK0=6;
public final int MCU_FAULT_DATA2_MCU_FLT_BOARDTEMP_SENSOR_STB_MASK0=7;
public final int MCU_FAULT_DATA2_MCU_FLT_RPASE_STB_MASK0=1;
public final int MCU_FAULT_DATA2_MCU_FLT_YPHASE_STG_MASK0=2;
public final int MCU_FAULT_DATA2_MCU_FLT_YPHASE_STB_MASK0=3;
public final int MCU_FAULT_DATA2_MCU_FLT_BPHASE_STG_MASK0=4;
public final int MCU_FAULT_DATA2_MCU_FLT_BPHASE_STB_MASK0=5;
public final int MCU_FAULT_DATA2_MCU_FLT_DC_CURRENT_SENSOR_STG_MASK0=6;
public final int MCU_FAULT_DATA2_MCU_FLT_DC_CURRENT_SENSOR_STB_MASK0=7;
public final int MCU_FAULT_DATA2_MCU_FLT_BUCKCONV_12V_STG_MASK0=1;
public final int MCU_FAULT_DATA2_MCU_BUCKCONV_5V_OVERV_CUTOFF_MASK0=2;
public final int MCU_FAULT_DATA2_MCU_BUCKCONV_5V_UNDERV_CUTOFF_MASK0=3;
public final int MCU_FAULT_DATA2_MCU_FLT_MOSFET_TEMP_HIGH_MASK0=4;
public final int MCU_FAULT_DATA2_MCU_FLT_MOSFET_STG_MASK0=5;
public final int MCU_FAULT_DATA2_MCU_FLT_MOSFET_STB_MASK0=6;
public final int MCU_FAULT_DATA2_MCU_FLT_KL30_HIGH_MASK0=7;

public final int DISPLAY_INFO_DISPLAY_SOC_MASK0=5;
public final int DISPLAY_INFO_DISPLAY_SOC_MASK1=3;
public final int DISPLAY_INFO_VEHICLE_RANGE_MASK0=5;
public final int DISPLAY_INFO_VEHICLE_RANGE_MASK1=3;
public final int DISPLAY_INFO_INDICATORS_TTL_MASK0=3;
public final int DISPLAY_INFO_FRONTLIGHT_TTL_MASK0=1;
public final int DISPLAY_INFO_FRONTLIGHT_TTL_MASK1=7;
public final int DISPLAY_INFO_CHARGE_TTL_MASK0=3;
public final int DISPLAY_INFO_DRL_LAMP_TTL_MASK0=6;
public final int DISPLAY_INFO_LOW_BATTERY_ALERT_TTL_MASK0=7;
public final int DISPLAY_INFO_DISPLAY_SPEED_MASK0=8;

public final int ENVIRONMENT_DATA_AMBIENT_LIGHT_SENSOR_VALUE_MASK0=8;
public final int ENVIRONMENT_DATA_AMBIENT_TEMP_SENSOR_VALUE_MASK0=8;

public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL2_MASK0=1;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL3_MASK0=2;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL4_MASK0=3;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL5_MASK0=4;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL6_MASK0=5;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL7_MASK0=6;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL8_MASK0=7;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL10_MASK0=1;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL11_MASK0=2;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL12_MASK0=3;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL13_MASK0=4;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL14_MASK0=5;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL15_MASK0=6;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL16_MASK0=7;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL18_MASK0=1;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL19_MASK0=2;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL20_MASK0=3;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL21_MASK0=4;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL22_MASK0=5;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL23_MASK0=6;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL24_MASK0=7;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL26_MASK0=1;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL27_MASK0=2;
public final int BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL28_MASK0=3;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL1_MASK0=4;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL2_MASK0=5;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL3_MASK0=6;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL4_MASK0=7;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL6_MASK0=1;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL7_MASK0=2;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL8_MASK0=3;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL9_MASK0=4;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL10_MASK0=5;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL11_MASK0=6;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL12_MASK0=7;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL14_MASK0=1;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL15_MASK0=2;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL16_MASK0=3;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL17_MASK0=4;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL18_MASK0=5;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL19_MASK0=6;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL20_MASK0=7;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL22_MASK0=1;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL23_MASK0=2;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL24_MASK0=3;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL25_MASK0=4;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL26_MASK0=5;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL27_MASK0=6;
public final int BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL28_MASK0=7;
public final int BMS_FAULT_1_BMS_BATTERYPACKTEMP_2_SENSFAIL_MASK0=1;
public final int BMS_FAULT_1_BMS_BATTERYPACKTEMP_3_SENSFAIL_MASK0=2;
public final int BMS_FAULT_1_BMS_BATTERYPACKTEMP_4_SENSFAIL_MASK0=3;
public final int BMS_FAULT_1_BMS_BATTERYPACKTEMP_5_SENSFAIL_MASK0=4;
public final int BMS_FAULT_1_BMS_BATTERYPACKTEMP_6_SENSFAIL_MASK0=5;

public final int BMS_FAULT_2_BMS_LOWTEMPDRIVE_WARNING_MASK0=1;
public final int BMS_FAULT_2_BMS_LOWTEMPDRIVE_ERROR_MASK0=2;
public final int BMS_FAULT_2_OVERTIMETOFASTCHARGE_ERROR_MASK0=3;
public final int BMS_FAULT_2_BATTERY_DISCHARGE_INHIBIT_MASK0=4;
public final int BMS_FAULT_2_BATTERY_DERATE_DRIVE_CUR_FLAG_MASK0=5;
public final int BMS_FAULT_2_BATTERY_DERATE_CHARGE_CUR_FLAG_MASK0=6;
public final int BMS_FAULT_2_BATTERY_INHIBIT_REGEN_FAULT_MASK0=7;
public final int BMS_FAULT_2_BMS_BATT_PACKTEMP_1_OUTOFRANGE_MASK0=1;
public final int BMS_FAULT_2_BMS_BATT_PACKTEMP_2_OUTOFRANGE_MASK0=2;
public final int BMS_FAULT_2_BMS_BATT_PACKTEMP_3_OUTOFRANGE_MASK0=3;
public final int BMS_FAULT_2_BMS_BATT_PACKTEMP_4_OUTOFRANGE_MASK0=4;
public final int BMS_FAULT_2_BMS_BATT_PACKTEMP_5_OUTOFRANGE_MASK0=5;
public final int BMS_FAULT_2_BMS_BATT_PACKTEMP_6_OUTOFRANGE_MASK0=6;
public final int BMS_FAULT_2_BMS_CURR_SENS_FAILURE_OPENCIR_MASK0=7;
public final int BMS_FAULT_2_BMS_OVERCURRCHARGE_WARN_MASK0=1;
public final int BMS_FAULT_2_BMS_OVERCURRCHARGE_ERROR_MASK0=2;
public final int BMS_FAULT_2_BMS_PRECHARGETOOFAST_INFO_MASK0=3;
public final int BMS_FAULT_2_BMS_PRECHARGETOOSLOW_INFO_MASK0=4;
public final int BMS_FAULT_2_BMS_PRECHARGEFAILURE_MASK0=5;
public final int BMS_FAULT_2_BMS_MOSFETSCONNFAILED_MASK0=6;
public final int BMS_FAULT_2_BMS_MOSFETSDISCONNFAILED_MASK0=7;
public final int BMS_FAULT_2_BMS_PDU_TEMP_ERROR_MASK0=1;
public final int BMS_FAULT_2_BMS_OVERVCHARGEWARNINFO_MASK0=2;
public final int BMS_FAULT_2_BMS_OVERVCHARGEERROR_MASK0=3;
public final int BMS_FAULT_2_BMS_OVERVCHAR_PERM_FAULT_MASK0=4;
public final int BMS_FAULT_2_BMS_OVERV_REGEN_WARN_INFO_MASK0=5;
public final int BMS_FAULT_2_BMS_OVERV_REGEN_ERROR_MASK0=6;
public final int BMS_FAULT_2_BMS_UNDV_WARN_INFO_MASK0=7;
public final int BMS_FAULT_2_BMS_UNDV_PERM_FAULT_MASK0=1;
public final int BMS_FAULT_2_BMS_OVERTEMPCHARWARNINFO_MASK0=2;
public final int BMS_FAULT_2_BMS_OVERTEMPCHARERROR_MASK0=3;
public final int BMS_FAULT_2_BMS_OVERTEMPDRIVEWARNINFO_MASK0=4;
public final int BMS_FAULT_2_BMS_OVERTEMPDRIVEERROR_MASK0=5;
public final int BMS_FAULT_2_BMS_OVTEMP_CELLVENTERROR_MASK0=6;
public final int BMS_FAULT_2_BMS_OVTEMP_CELLVENTFAILURE_MASK0=7;
public final int BMS_FAULT_2_BMS_SHORTCIR_DETECT_PERMFAULT_MASK0=1;
public final int BMS_FAULT_2_BMS_CELL_FAILURE_PERMFAULT_MASK0=2;
public final int BMS_FAULT_2_BMS_PARACELL_DISCONFAULT_MASK0=3;
public final int BMS_FAULT_2_BMS_LOWTEMP_CHARWARNINFO_MASK0=4;

public final int ESCL_DATA_ESCL_SUPPLY_VOLTAGE_MASK0=8;
public final int ESCL_DATA_MOTOR_STALL_CURRENT_MASK0=8;
public final int ESCL_DATA_ESCL_HALL1_STATUS_MASK0=3;
public final int ESCL_DATA_ESCL_HALL2_STATUS_MASK0=4;
public final int ESCL_DATA_ESCL_POWER_STATUS_MASK0=5;
public final int ESCL_DATA_ESCL_PLUNGER_STATUS_MASK0=6;
public final int ESCL_DATA_ESCL_MOTOR_TEMP_FAULT_MASK0=7;
public final int ESCL_DATA_ESCL_MOTOR_SHORT_FAULT_MASK0=1;
public final int ESCL_DATA_ESCL_LOCK_UNLOCK_ERROR_MASK0=2;
public final int ESCL_DATA_ESCL_SLEEP_ACK_MASK0=3;

public final int CHARGER_FAULT_INFO_OBC_IP_AC_UNDERV_MASK0=1;
public final int CHARGER_FAULT_INFO_OBC_IP_OVERCURRENT_MASK0=2;
public final int CHARGER_FAULT_INFO_OBC_OP_OVERCURRENT_MASK0=3;
public final int CHARGER_FAULT_INFO_OBC_HIGH_TEMP_MASK0=4;
public final int CHARGER_FAULT_INFO_OBC_LOW_TEMP_MASK0=5;
public final int CHARGER_FAULT_INFO_OBC_TEMP_SENSOR_FAIL_MASK0=6;
public final int CHARGER_FAULT_INFO_OBC_CURRENT_SENSOR_FAIL_MASK0=7;
public final int CHARGER_FAULT_INFO_OBC_OP_OPEN_CIRCUIT_MASK0=1;
public final int CHARGER_FAULT_INFO_OBC_OP_SHORT_CIRCUIT_MASK0=2;
public final int CHARGER_FAULT_INFO_OBC_OP_OVER_VOL_FLT_MASK0=3;
public final int CHARGER_FAULT_INFO_OBC_OP_UNDER_VOL_FLT_MASK0=4;
public final int CHARGER_FAULT_INFO_DCDC_OP_OVER_VOL_FLT_MASK0=5;
public final int CHARGER_FAULT_INFO_DCDC_IP_OVER_VOLTAGE_MASK0=6;
public final int CHARGER_FAULT_INFO_DCDC_IP_UNDER_VOLTAGE_MASK0=7;
public final int CHARGER_FAULT_INFO_DCDC_OP_OVER_CURRENT_MASK0=1;
public final int CHARGER_FAULT_INFO_DCDC_HIGH_TEMP_MASK0=2;
public final int CHARGER_FAULT_INFO_DCDC_LOW_TEMP_MASK0=3;
public final int CHARGER_FAULT_INFO_DCDC_TEMPSENSOR_FAILURE_MASK0=4;
public final int CHARGER_FAULT_INFO_DCDC_CURRENT_SENSOR_FAILURE_MASK0=5;
public final int CHARGER_FAULT_INFO_DCDC_CONTACTOR_OR_RELAY_FAILURE_MASK0=6;
public final int CHARGER_FAULT_INFO_DCDC_OP_OPEN_CIRCUIT_MASK0=7;
public final int CHARGER_FAULT_INFO_DCDC_OP_UNDER_VOL_FLT_MASK0=1;

public final int HP_DCDC_PARAMETER1_HP_DCDC_IP_DC_CURRENT_MASK0=8;
public final int HP_DCDC_PARAMETER1_HP_DCDC_IP_DC_VOLTAGE_MASK0=8;
public final int HP_DCDC_PARAMETER1_HP_DCDC_OP_DC_CURRENT_MASK0=8;
public final int HP_DCDC_PARAMETER1_HP_DCDC_OP_DC_VOLTAGE_MASK0=8;

public final int IMU_DATA_X_ACCELEROMETER_XAXIS_MASK0=24;
public final int IMU_DATA_X_ACCELEROMETER_XAXIS_MASK1=16;
public final int IMU_DATA_X_ACCELEROMETER_XAXIS_MASK2=8;
public final int IMU_DATA_X_GYROSCOPE_XAXIS_MASK0=24;
public final int IMU_DATA_X_GYROSCOPE_XAXIS_MASK1=16;
public final int IMU_DATA_X_GYROSCOPE_XAXIS_MASK2=8;

public final int MCU_SW_VERSION_MCU_BOOTLOADER_VERSION_MASK0=24;
public final int MCU_SW_VERSION_MCU_BOOTLOADER_VERSION_MASK1=16;
public final int MCU_SW_VERSION_MCU_BOOTLOADER_VERSION_MASK2=8;
public final int MCU_SW_VERSION_MCU_FIRMWARE_VERSION_MASK0=24;
public final int MCU_SW_VERSION_MCU_FIRMWARE_VERSION_MASK1=16;
public final int MCU_SW_VERSION_MCU_FIRMWARE_VERSION_MASK2=8;

public final int MCU_HW_VERSION_MCU_HARDWARE_VERSION_MASK0=24;
public final int MCU_HW_VERSION_MCU_HARDWARE_VERSION_MASK1=16;
public final int MCU_HW_VERSION_MCU_HARDWARE_VERSION_MASK2=8;

public final int ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK0=56;
public final int ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK1=48;
public final int ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK2=40;
public final int ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK3=32;
public final int ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK4=24;
public final int ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK5=16;
public final int ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK6=8;

public final int ICM_SW_VERSION_ICM_FIRMWARE_VERSION_MASK0=24;
public final int ICM_SW_VERSION_ICM_FIRMWARE_VERSION_MASK1=16;
public final int ICM_SW_VERSION_ICM_FIRMWARE_VERSION_MASK2=8;
public final int ICM_SW_VERSION_ICM_BOOTLOADER_VERSION_MASK0=24;
public final int ICM_SW_VERSION_ICM_BOOTLOADER_VERSION_MASK1=16;
public final int ICM_SW_VERSION_ICM_BOOTLOADER_VERSION_MASK2=8;

public final int ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK0=56;
public final int ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK1=48;
public final int ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK2=40;
public final int ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK3=32;
public final int ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK4=24;
public final int ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK5=16;
public final int ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK6=8;

public final int OBC_SW_VERSION_OBC_FIRMWARE_VERSION_MASK0=24;
public final int OBC_SW_VERSION_OBC_FIRMWARE_VERSION_MASK1=16;
public final int OBC_SW_VERSION_OBC_FIRMWARE_VERSION_MASK2=8;
public final int OBC_SW_VERSION_OBC_BOOTLOADER_VERSION_MASK0=24;
public final int OBC_SW_VERSION_OBC_BOOTLOADER_VERSION_MASK1=16;
public final int OBC_SW_VERSION_OBC_BOOTLOADER_VERSION_MASK2=8;

public final int OBC_HW_VERSION_OBC_HARDWARE_VERSION_MASK0=24;
public final int OBC_HW_VERSION_OBC_HARDWARE_VERSION_MASK1=16;
public final int OBC_HW_VERSION_OBC_HARDWARE_VERSION_MASK2=8;

public final int ESCL_SW_VERSION_INFO_ESCL_FIRMWARE_VERSION_MASK0=24;
public final int ESCL_SW_VERSION_INFO_ESCL_FIRMWARE_VERSION_MASK1=16;
public final int ESCL_SW_VERSION_INFO_ESCL_FIRMWARE_VERSION_MASK2=8;
public final int ESCL_SW_VERSION_INFO_ESCL_BOOTLOADER_VERSION_MASK0=24;
public final int ESCL_SW_VERSION_INFO_ESCL_BOOTLOADER_VERSION_MASK1=16;
public final int ESCL_SW_VERSION_INFO_ESCL_BOOTLOADER_VERSION_MASK2=8;

public final int RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK0=56;
public final int RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK1=48;
public final int RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK2=40;
public final int RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK3=32;
public final int RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK4=24;
public final int RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK5=16;
public final int RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK6=8;

public final int RSC_SW_VERSION_RSC_FIRMWARE_VERSION_MASK0=24;
public final int RSC_SW_VERSION_RSC_FIRMWARE_VERSION_MASK1=16;
public final int RSC_SW_VERSION_RSC_FIRMWARE_VERSION_MASK2=8;
public final int RSC_SW_VERSION_RSC_BOOTLOADER_VERSION_MASK0=24;
public final int RSC_SW_VERSION_RSC_BOOTLOADER_VERSION_MASK1=16;
public final int RSC_SW_VERSION_RSC_BOOTLOADER_VERSION_MASK2=8;

public final int LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK0=56;
public final int LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK1=48;
public final int LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK2=40;
public final int LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK3=32;
public final int LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK4=24;
public final int LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK5=16;
public final int LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK6=8;

public final int LSC_SW_VERSION_LSC_FIRMWARE_VERSION_MASK0=24;
public final int LSC_SW_VERSION_LSC_FIRMWARE_VERSION_MASK1=16;
public final int LSC_SW_VERSION_LSC_FIRMWARE_VERSION_MASK2=8;
public final int LSC_SW_VERSION_LSC_BOOTLOADER_VERSION_MASK0=24;
public final int LSC_SW_VERSION_LSC_BOOTLOADER_VERSION_MASK1=16;
public final int LSC_SW_VERSION_LSC_BOOTLOADER_VERSION_MASK2=8;

public final int IMU_DATA_Y_ACCELEROMETER_YAXIS_MASK0=24;
public final int IMU_DATA_Y_ACCELEROMETER_YAXIS_MASK1=16;
public final int IMU_DATA_Y_ACCELEROMETER_YAXIS_MASK2=8;
public final int IMU_DATA_Y_GYROSCOPE_YAXIS_MASK0=24;
public final int IMU_DATA_Y_GYROSCOPE_YAXIS_MASK1=16;
public final int IMU_DATA_Y_GYROSCOPE_YAXIS_MASK2=8;

public final int IC_PARAMTER_1_LED_TEMP_MASK0=8;
public final int IC_PARAMTER_1_TEMP_SENSOR_INPUT_CONTROLLER_MASK0=8;
public final int IC_PARAMTER_1_MAIN_INPUT_SUPPLY_MASK0=8;
public final int IC_PARAMTER_1_TEMP_SENSOR_INPUT_AMBIENT_MASK0=8;

public final int ICM_DIGITAL_INPUT_AMBIENT_LIGHT_SENSOR_INTERRUPT_MASK0=1;
public final int ICM_DIGITAL_INPUT_AMBIENT_TEMP_SENSOR_INTERRUPT_MASK0=2;
public final int ICM_DIGITAL_INPUT_WARNING_STATUS_MASK0=3;
public final int ICM_DIGITAL_INPUT_ERROR_STATUS_MASK0=4;

public final int IMU_DATA_Z_ACCELEROMETER_ZAXIS_MASK0=24;
public final int IMU_DATA_Z_ACCELEROMETER_ZAXIS_MASK1=16;
public final int IMU_DATA_Z_ACCELEROMETER_ZAXIS_MASK2=8;
public final int IMU_DATA_Z_GYROSCOPE_ZAXIS_MASK0=24;
public final int IMU_DATA_Z_GYROSCOPE_ZAXIS_MASK1=16;
public final int IMU_DATA_Z_GYROSCOPE_ZAXIS_MASK2=8;

public final int BMS_SOFTWARE_VERSIONS_BMS_FIRMWARE_VERSION_MASK0=24;
public final int BMS_SOFTWARE_VERSIONS_BMS_FIRMWARE_VERSION_MASK1=16;
public final int BMS_SOFTWARE_VERSIONS_BMS_FIRMWARE_VERSION_MASK2=8;
public final int BMS_SOFTWARE_VERSIONS_BMS_BOOTLOADER_VERSION_MASK0=24;
public final int BMS_SOFTWARE_VERSIONS_BMS_BOOTLOADER_VERSION_MASK1=16;
public final int BMS_SOFTWARE_VERSIONS_BMS_BOOTLOADER_VERSION_MASK2=8;

public final int ABS_SOFTWARE_VERSION_ABS_FIRMWARE_VERSION_MASK0=24;
public final int ABS_SOFTWARE_VERSION_ABS_FIRMWARE_VERSION_MASK1=16;
public final int ABS_SOFTWARE_VERSION_ABS_FIRMWARE_VERSION_MASK2=8;
public final int ABS_SOFTWARE_VERSION_ABS_BOOTLOADER_VERSION_MASK0=24;
public final int ABS_SOFTWARE_VERSION_ABS_BOOTLOADER_VERSION_MASK1=16;
public final int ABS_SOFTWARE_VERSION_ABS_BOOTLOADER_VERSION_MASK2=8;

public final int BMS_HARDWARE_VERSION_BMS_HARDWARE_VERSION_MASK0=24;
public final int BMS_HARDWARE_VERSION_BMS_HARDWARE_VERSION_MASK1=16;
public final int BMS_HARDWARE_VERSION_BMS_HARDWARE_VERSION_MASK2=8;

public final int ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK0=56;
public final int ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK1=48;
public final int ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK2=40;
public final int ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK3=32;
public final int ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK4=24;
public final int ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK5=16;
public final int ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK6=8;

public final int BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK0=56;
public final int BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK1=48;
public final int BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK2=40;
public final int BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK3=32;
public final int BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK4=24;
public final int BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK5=16;
public final int BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK6=8;

public final int BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK0=56;
public final int BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK1=48;
public final int BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK2=40;
public final int BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK3=32;
public final int BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK4=24;
public final int BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK5=16;
public final int BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK6=8;


public final int VEHICLE_LEFT_SW_CUBE_LOW_BEAM_MASK0=1;
public final int VEHICLE_LEFT_SW_CUBE_PASS_BEAM_MASK0=2;
public final int VEHICLE_LEFT_SW_CUBE_LEFT_INDICATOR_MASK0=3;
public final int VEHICLE_LEFT_SW_CUBE_CRUISE_CONTROL_MASK0=4;
public final int VEHICLE_LEFT_SW_CUBE_RIGHT_INDICATOR_MASK0=5;
public final int VEHICLE_LEFT_SW_CUBE_HORN_MASK0=6;
public final int VEHICLE_LEFT_SW_CUBE_ECO_MODE_MASK0=7;
public final int VEHICLE_LEFT_SW_CUBE_SPORTS_MODE_MASK0=1;
public final int VEHICLE_LEFT_SW_CUBE_TURBO_MODE_MASK0=2;
public final int VEHICLE_LEFT_SW_CUBE_NEUTRAL_MASK0=3;
public final int VEHICLE_LEFT_SW_CUBE_PARK_ASSIST_MASK0=4;
public final int VEHICLE_LEFT_SW_CUBE_HOME_MASK0=7;
public final int VEHICLE_LEFT_SW_CUBE_JOYSTICK_DOWN_MASK0=1;
public final int VEHICLE_LEFT_SW_CUBE_JOYSTICK_LEFT_MASK0=2;
public final int VEHICLE_LEFT_SW_CUBE_JOYSTICK_RIGHT_MASK0=3;
public final int VEHICLE_LEFT_SW_CUBE_JOYSTICK_SET_RST_MASK0=4;
public final int VEHICLE_LEFT_SW_CUBE_LSC_POWER_STATUS_MASK0=5;
public final int VEHICLE_LEFT_SW_CUBE_JOYSTICK_FAULT_MASK0=6;
public final int VEHICLE_LEFT_SW_CUBE_MODE_SELECTOR_ROLLER_FAULT_MASK0=7;
public final int VEHICLE_LEFT_SW_CUBE_CRUISE_CONTROL_BUTTON_FAULT_MASK0=1;
public final int VEHICLE_LEFT_SW_CUBE_HORN_BUTTON_FAULT_MASK0=2;
public final int VEHICLE_LEFT_SW_CUBE_HOME_BUTTON_FAULT_MASK0=3;
public final int VEHICLE_LEFT_SW_CUBE_LSC_SYSTEM_FAULT_MASK0=4;

public final int VEHICLE_RIGHT_SW_CUBE_REGEN_MASK0=1;
public final int VEHICLE_RIGHT_SW_CUBE_KEY_IGNITION_MASK0=2;

public final int ICM_ERROR_INPUT_UNCERVOLTAGE_MASK0=1;
public final int ICM_ERROR_INPUT_OVERCURRENT_MASK0=2;
public final int ICM_ERROR_OUTPUT_OVERCURRENT_MASK0=3;
public final int ICM_ERROR_HIGH_TEMP_MASK0=4;
public final int ICM_ERROR_LOW_TEMP_MASK0=5;
public final int ICM_ERROR_TEMP_SENSOR_FAILURE_MASK0=6;
public final int ICM_ERROR_OUTPUT_SHORT_CIRCUIT_FAILURE_MASK0=7;

public final int TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK0=56;
public final int TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK1=48;
public final int TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK2=40;
public final int TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK3=32;
public final int TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK4=24;
public final int TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK5=16;
public final int TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK6=8;

public final int RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK0=56;
public final int RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK1=48;
public final int RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK2=40;
public final int RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK3=32;
public final int RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK4=24;
public final int RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK5=16;
public final int RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK6=8;

public final int RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK0=56;
public final int RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK1=48;
public final int RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK2=40;
public final int RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK3=32;
public final int RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK4=24;
public final int RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK5=16;
public final int RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK6=8;

public final int LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK0=56;
public final int LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK1=48;
public final int LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK2=40;
public final int LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK3=32;
public final int LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK4=24;
public final int LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK5=16;
public final int LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK6=8;

public final int LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK0=56;
public final int LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK1=48;
public final int LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK2=40;
public final int LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK3=32;
public final int LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK4=24;
public final int LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK5=16;
public final int LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK6=8;

public final int MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK0=56;
public final int MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK1=48;
public final int MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK2=40;
public final int MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK3=32;
public final int MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK4=24;
public final int MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK5=16;
public final int MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK6=8;

public final int MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK0=56;
public final int MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK1=48;
public final int MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK2=40;
public final int MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK3=32;
public final int MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK4=24;
public final int MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK5=16;
public final int MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK6=8;

public final int OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK0=56;
public final int OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK1=48;
public final int OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK2=40;
public final int OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK3=32;
public final int OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK4=24;
public final int OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK5=16;
public final int OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK6=8;

public final int ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK0=56;
public final int ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK1=48;
public final int ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK2=40;
public final int ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK3=32;
public final int ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK4=24;
public final int ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK5=16;
public final int ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK6=8;

public final int ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK0=56;
public final int ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK1=48;
public final int ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK2=40;
public final int ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK3=32;
public final int ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK4=24;
public final int ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK5=16;
public final int ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK6=8;

public final int OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK0=56;
public final int OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK1=48;
public final int OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK2=40;
public final int OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK3=32;
public final int OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK4=24;
public final int OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK5=16;
public final int OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK6=8;

public final int HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK0=56;
public final int HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK1=48;
public final int HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK2=40;
public final int HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK3=32;
public final int HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK4=24;
public final int HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK5=16;
public final int HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK6=8;

public final int HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK0=56;
public final int HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK1=48;
public final int HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK2=40;
public final int HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK3=32;
public final int HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK4=24;
public final int HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK5=16;
public final int HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK6=8;

public final int ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK0=56;
public final int ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK1=48;
public final int ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK2=40;
public final int ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK3=32;
public final int ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK4=24;
public final int ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK5=16;
public final int ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK6=8;

public final int ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK0=56;
public final int ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK1=48;
public final int ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK2=40;
public final int ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK3=32;
public final int ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK4=24;
public final int ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK5=16;
public final int ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK6=8;

public final int BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK0=56;
public final int BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK1=48;
public final int BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK2=40;
public final int BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK3=32;
public final int BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK4=24;
public final int BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK5=16;
public final int BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK6=8;

public final int BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK0=56;
public final int BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK1=48;
public final int BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK2=40;
public final int BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK3=32;
public final int BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK4=24;
public final int BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK5=16;
public final int BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK6=8;

public final int FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK0=56;
public final int FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK1=48;
public final int FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK2=40;
public final int FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK3=32;
public final int FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK4=24;
public final int FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK5=16;
public final int FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK6=8;

public final int BATTERY_STATUS_INFO_BATTERY_CURRENT_MASK0=8;
public final int BATTERY_STATUS_INFO_BATTERY_PACK_SOC_MASK0=8;
public final int BATTERY_STATUS_INFO_CHARGE_VOLTAGE_LIMIT_MASK0=8;

public final int SIGNLE_READ_Mask0 = 0;
public final int SIGNLE_READ_Mask1 = 0x01;
public final int SIGNLE_READ_Mask2 = 0x03;
public final int SIGNLE_READ_Mask3 = 0x07;
public final int SIGNLE_READ_Mask4 = 0x0F;
public final int SIGNLE_READ_Mask5 = 0x1F;
public final int SIGNLE_READ_Mask6 = 0x3F;
public final int SIGNLE_READ_Mask7 = 0x7F;
public final int SIGNLE_READ_Mask8 = 0xFF;

public final int SIGNLE_WRITE_Mask0 = 0x80;
public final int SIGNLE_WRITE_Mask1 = 0xC0;
public final int SIGNLE_WRITE_Mask2 = 0xE0;
public final int SIGNLE_WRITE_Mask3 = 0xF0;
public final int SIGNLE_WRITE_Mask4 = 0xF8;
public final int SIGNLE_WRITE_Mask5 = 0xFC;
public final int SIGNLE_WRITE_Mask6 = 0xFE;
public final int SIGNLE_WRITE_Mask7 = 0xFF;

/* public final int @VCU_TO_OBC_AUTH_REQ CAN MESSAGE = 142*/
public final int VCU_TO_OBC_AUTH_REQ_ID = 142;
public final int VCU_TO_OBC_AUTH_REQ_IDE = 0;
public final int VCU_TO_OBC_AUTH_REQ_DLC = 8;
public final double VCU_TO_OBC_AUTH_REQ_VCU_TO_OBC_SEED_FACTOR = 1.0;
public final int VCU_TO_OBC_AUTH_REQ_CANID_VCU_TO_OBC_SEED_STARTBIT = 0;
public final double VCU_TO_OBC_AUTH_REQ_CANID_VCU_TO_OBC_SEED_OFFSET = 0.0;
public final double VCU_TO_OBC_AUTH_REQ_CANID_VCU_TO_OBC_SEED_MIN = 0.0;
public final double VCU_TO_OBC_AUTH_REQ_CANID_VCU_TO_OBC_SEED_MAX = 4.294967295E9;

public static class VCU_to_OBC_Auth_Req_t { 

  public intVCU_to_OBC_Seed;
}
/* public final int @VCU_TO_OBC_AUTH_STAT CAN MESSAGE = 143*/
public final int VCU_TO_OBC_AUTH_STAT_ID = 143;
public final int VCU_TO_OBC_AUTH_STAT_IDE = 0;
public final int VCU_TO_OBC_AUTH_STAT_DLC = 8;
public final double VCU_TO_OBC_AUTH_STAT_VCU_AUTH_RES_TO_OBC_FACTOR = 1.0;
public final int VCU_TO_OBC_AUTH_STAT_CANID_VCU_AUTH_RES_TO_OBC_STARTBIT = 0;
public final double VCU_TO_OBC_AUTH_STAT_CANID_VCU_AUTH_RES_TO_OBC_OFFSET = 0.0;
public final double VCU_TO_OBC_AUTH_STAT_CANID_VCU_AUTH_RES_TO_OBC_MIN = 0.0;
public final double VCU_TO_OBC_AUTH_STAT_CANID_VCU_AUTH_RES_TO_OBC_MAX = 1.0;

public static class VCU_to_OBC_Auth_Stat_t { 

  public intVCU_Auth_Res_to_OBC;
}
/* public final int @OBC_TO_VCU_AUTH_RESP CAN MESSAGE = 145*/
public final int OBC_TO_VCU_AUTH_RESP_ID = 145;
public final int OBC_TO_VCU_AUTH_RESP_IDE = 0;
public final int OBC_TO_VCU_AUTH_RESP_DLC = 8;
public final double OBC_TO_VCU_AUTH_RESP_OBC_KEY_FACTOR = 1.0;
public final int OBC_TO_VCU_AUTH_RESP_CANID_OBC_KEY_STARTBIT = 0;
public final double OBC_TO_VCU_AUTH_RESP_CANID_OBC_KEY_OFFSET = 0.0;
public final double OBC_TO_VCU_AUTH_RESP_CANID_OBC_KEY_MIN = 0.0;
public final double OBC_TO_VCU_AUTH_RESP_CANID_OBC_KEY_MAX = 4.294967295E9;

public static class OBC_to_VCU_Auth_Resp_t { 

  public intOBC_Key;
}
/* public final int @VCU_TO_MCU_AUTH_REQ CAN MESSAGE = 161*/
public final int VCU_TO_MCU_AUTH_REQ_ID = 161;
public final int VCU_TO_MCU_AUTH_REQ_IDE = 0;
public final int VCU_TO_MCU_AUTH_REQ_DLC = 8;
public final double VCU_TO_MCU_AUTH_REQ_VCU_TO_MCU_SEED_FACTOR = 1.0;
public final int VCU_TO_MCU_AUTH_REQ_CANID_VCU_TO_MCU_SEED_STARTBIT = 0;
public final double VCU_TO_MCU_AUTH_REQ_CANID_VCU_TO_MCU_SEED_OFFSET = 0.0;
public final double VCU_TO_MCU_AUTH_REQ_CANID_VCU_TO_MCU_SEED_MIN = 0.0;
public final double VCU_TO_MCU_AUTH_REQ_CANID_VCU_TO_MCU_SEED_MAX = 4.294967295E9;

public static class VCU_to_MCU_Auth_Req_t { 

  public intVCU_to_MCU_Seed;
}
/* public final int @MCU_TO_VCU_AUTH_RESP CAN MESSAGE = 169*/
public final int MCU_TO_VCU_AUTH_RESP_ID = 169;
public final int MCU_TO_VCU_AUTH_RESP_IDE = 0;
public final int MCU_TO_VCU_AUTH_RESP_DLC = 8;
public final double MCU_TO_VCU_AUTH_RESP_MCU_KEY_FACTOR = 1.0;
public final int MCU_TO_VCU_AUTH_RESP_CANID_MCU_KEY_STARTBIT = 0;
public final double MCU_TO_VCU_AUTH_RESP_CANID_MCU_KEY_OFFSET = 0.0;
public final double MCU_TO_VCU_AUTH_RESP_CANID_MCU_KEY_MIN = 0.0;
public final double MCU_TO_VCU_AUTH_RESP_CANID_MCU_KEY_MAX = 4.294967295E9;

public static class MCU_to_VCU_Auth_Resp_t { 

  public intMCU_Key;
}
/* public final int @VCU_TO_MCU_AUTH_STAT CAN MESSAGE = 177*/
public final int VCU_TO_MCU_AUTH_STAT_ID = 177;
public final int VCU_TO_MCU_AUTH_STAT_IDE = 0;
public final int VCU_TO_MCU_AUTH_STAT_DLC = 8;
public final double VCU_TO_MCU_AUTH_STAT_VCU_AUTH_RESP_TO_MCU_FACTOR = 1.0;
public final int VCU_TO_MCU_AUTH_STAT_CANID_VCU_AUTH_RESP_TO_MCU_STARTBIT = 0;
public final double VCU_TO_MCU_AUTH_STAT_CANID_VCU_AUTH_RESP_TO_MCU_OFFSET = 0.0;
public final double VCU_TO_MCU_AUTH_STAT_CANID_VCU_AUTH_RESP_TO_MCU_MIN = 0.0;
public final double VCU_TO_MCU_AUTH_STAT_CANID_VCU_AUTH_RESP_TO_MCU_MAX = 1.0;

public static class VCU_to_MCU_Auth_Stat_t { 

  public intVCU_Auth_Resp_to_MCU;
}
/* public final int @MCU_DATA2 CAN MESSAGE = 289*/
public final int MCU_DATA2_ID = 289;
public final int MCU_DATA2_IDE = 0;
public final int MCU_DATA2_DLC = 8;
public final double MCU_DATA2_MCU_POWER_STATUS_FACTOR = 1.0;
public final int MCU_DATA2_CANID_MCU_POWER_STATUS_STARTBIT = 0;
public final double MCU_DATA2_CANID_MCU_POWER_STATUS_OFFSET = 0.0;
public final double MCU_DATA2_CANID_MCU_POWER_STATUS_MIN = 0.0;
public final double MCU_DATA2_CANID_MCU_POWER_STATUS_MAX = 3.0;
public final double MCU_DATA2_REGEN_STATUS_FACTOR = 1.0;
public final int MCU_DATA2_CANID_REGEN_STATUS_STARTBIT = 2;
public final double MCU_DATA2_CANID_REGEN_STATUS_OFFSET = 0.0;
public final double MCU_DATA2_CANID_REGEN_STATUS_MIN = 0.0;
public final double MCU_DATA2_CANID_REGEN_STATUS_MAX = 4.0;
public final double MCU_DATA2_CRUISE_CONTROL_STATUS_FACTOR = 1.0;
public final int MCU_DATA2_CANID_CRUISE_CONTROL_STATUS_STARTBIT = 40;
public final double MCU_DATA2_CANID_CRUISE_CONTROL_STATUS_OFFSET = 0.0;
public final double MCU_DATA2_CANID_CRUISE_CONTROL_STATUS_MIN = 0.0;
public final double MCU_DATA2_CANID_CRUISE_CONTROL_STATUS_MAX = 1.0;
public final double MCU_DATA2_MCU_RIDING_MODE_FACTOR = 1.0;
public final int MCU_DATA2_CANID_MCU_RIDING_MODE_STARTBIT = 41;
public final double MCU_DATA2_CANID_MCU_RIDING_MODE_OFFSET = 0.0;
public final double MCU_DATA2_CANID_MCU_RIDING_MODE_MIN = 0.0;
public final double MCU_DATA2_CANID_MCU_RIDING_MODE_MAX = 15.0;
public final double MCU_DATA2_HILL_HOLD_STATUS_FACTOR = 1.0;
public final int MCU_DATA2_CANID_HILL_HOLD_STATUS_STARTBIT = 45;
public final double MCU_DATA2_CANID_HILL_HOLD_STATUS_OFFSET = 0.0;
public final double MCU_DATA2_CANID_HILL_HOLD_STATUS_MIN = 0.0;
public final double MCU_DATA2_CANID_HILL_HOLD_STATUS_MAX = 1.0;
public final double MCU_DATA2_MCU_DC_VOLTAGE_FACTOR = 0.01;
public final int MCU_DATA2_CANID_MCU_DC_VOLTAGE_STARTBIT = 48;
public final double MCU_DATA2_CANID_MCU_DC_VOLTAGE_OFFSET = 0.0;
public final double MCU_DATA2_CANID_MCU_DC_VOLTAGE_MIN = 0.0;
public final double MCU_DATA2_CANID_MCU_DC_VOLTAGE_MAX = 120.0;

public static class MCU_Data2_t { 

  public intMCU_Power_Status;
  public longRegen_status;
  public longCruise_Control_Status;
  public longMCU_Riding_Mode;
  public longHill_Hold_Status;
  public longMCU_DC_voltage;
}
/* public final int @REGEN_SET_PERCENTAGE CAN MESSAGE = 291*/
public final int REGEN_SET_PERCENTAGE_ID = 291;
public final int REGEN_SET_PERCENTAGE_IDE = 0;
public final int REGEN_SET_PERCENTAGE_DLC = 8;
public final double REGEN_SET_PERCENTAGE_FORCED_REGEN_PERCENTAGE_FACTOR = 0.1;
public final int REGEN_SET_PERCENTAGE_CANID_FORCED_REGEN_PERCENTAGE_STARTBIT = 0;
public final double REGEN_SET_PERCENTAGE_CANID_FORCED_REGEN_PERCENTAGE_OFFSET = 0.0;
public final double REGEN_SET_PERCENTAGE_CANID_FORCED_REGEN_PERCENTAGE_MIN = 0.0;
public final double REGEN_SET_PERCENTAGE_CANID_FORCED_REGEN_PERCENTAGE_MAX = 100.0;
public final double REGEN_SET_PERCENTAGE_COAST_REGEN_PERCENTAGE_FACTOR = 0.1;
public final int REGEN_SET_PERCENTAGE_CANID_COAST_REGEN_PERCENTAGE_STARTBIT = 16;
public final double REGEN_SET_PERCENTAGE_CANID_COAST_REGEN_PERCENTAGE_OFFSET = 0.0;
public final double REGEN_SET_PERCENTAGE_CANID_COAST_REGEN_PERCENTAGE_MIN = 0.0;
public final double REGEN_SET_PERCENTAGE_CANID_COAST_REGEN_PERCENTAGE_MAX = 100.0;
public final double REGEN_SET_PERCENTAGE_BRAKE_REGEN_PENCENTAGE_FACTOR = 0.1;
public final int REGEN_SET_PERCENTAGE_CANID_BRAKE_REGEN_PENCENTAGE_STARTBIT = 32;
public final double REGEN_SET_PERCENTAGE_CANID_BRAKE_REGEN_PENCENTAGE_OFFSET = 0.0;
public final double REGEN_SET_PERCENTAGE_CANID_BRAKE_REGEN_PENCENTAGE_MIN = 0.0;
public final double REGEN_SET_PERCENTAGE_CANID_BRAKE_REGEN_PENCENTAGE_MAX = 100.0;
public final double REGEN_SET_PERCENTAGE_REGEN_MAX_CURRENT_FACTOR = 1.0;
public final int REGEN_SET_PERCENTAGE_CANID_REGEN_MAX_CURRENT_STARTBIT = 48;
public final double REGEN_SET_PERCENTAGE_CANID_REGEN_MAX_CURRENT_OFFSET = 0.0;
public final double REGEN_SET_PERCENTAGE_CANID_REGEN_MAX_CURRENT_MIN = 0.0;
public final double REGEN_SET_PERCENTAGE_CANID_REGEN_MAX_CURRENT_MAX = 100.0;

public static class Regen_Set_Percentage_t { 

  public intForced_Regen_Percentage;
  public longCoast_Regen_Percentage;
  public longBrake_Regen_Pencentage;
  public longRegen_Max_Current;
}
/* public final int @BMS_PARAMETER_1 CAN MESSAGE = 298*/
public final int BMS_PARAMETER_1_ID = 298;
public final int BMS_PARAMETER_1_IDE = 0;
public final int BMS_PARAMETER_1_DLC = 8;
public final double BMS_PARAMETER_1_CONTACTOR_STATE_FACTOR = 1.0;
public final int BMS_PARAMETER_1_CANID_CONTACTOR_STATE_STARTBIT = 0;
public final double BMS_PARAMETER_1_CANID_CONTACTOR_STATE_OFFSET = 0.0;
public final double BMS_PARAMETER_1_CANID_CONTACTOR_STATE_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_CONTACTOR_STATE_MAX = 15.0;
public final double BMS_PARAMETER_1_BATTERY_PACK_BUS_VOLT_FACTOR = 0.01;
public final int BMS_PARAMETER_1_CANID_BATTERY_PACK_BUS_VOLT_STARTBIT = 8;
public final double BMS_PARAMETER_1_CANID_BATTERY_PACK_BUS_VOLT_OFFSET = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_PACK_BUS_VOLT_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_PACK_BUS_VOLT_MAX = 150.0;
public final double BMS_PARAMETER_1_BMS_BOARD_TEMP_FACTOR = 0.01;
public final int BMS_PARAMETER_1_CANID_BMS_BOARD_TEMP_STARTBIT = 24;
public final double BMS_PARAMETER_1_CANID_BMS_BOARD_TEMP_OFFSET = -50.0;
public final double BMS_PARAMETER_1_CANID_BMS_BOARD_TEMP_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_BMS_BOARD_TEMP_MAX = 600.0;
public final double BMS_PARAMETER_1_BMS_MODE_FACTOR = 1.0;
public final int BMS_PARAMETER_1_CANID_BMS_MODE_STARTBIT = 40;
public final double BMS_PARAMETER_1_CANID_BMS_MODE_OFFSET = 0.0;
public final double BMS_PARAMETER_1_CANID_BMS_MODE_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_BMS_MODE_MAX = 15.0;
public final double BMS_PARAMETER_1_BATTERY_PRECHARGE_FAILURE_STATUS_FACTOR = 1.0;
public final int BMS_PARAMETER_1_CANID_BATTERY_PRECHARGE_FAILURE_STATUS_STARTBIT = 48;
public final double BMS_PARAMETER_1_CANID_BATTERY_PRECHARGE_FAILURE_STATUS_OFFSET = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_PRECHARGE_FAILURE_STATUS_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_PRECHARGE_FAILURE_STATUS_MAX = 1.0;
public final double BMS_PARAMETER_1_BATTERY_CHARGE_INHIBIT_FACTOR = 1.0;
public final int BMS_PARAMETER_1_CANID_BATTERY_CHARGE_INHIBIT_STARTBIT = 49;
public final double BMS_PARAMETER_1_CANID_BATTERY_CHARGE_INHIBIT_OFFSET = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_CHARGE_INHIBIT_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_CHARGE_INHIBIT_MAX = 1.0;
public final double BMS_PARAMETER_1_BATTERY_DISCHARGE_INHIBIT_FACTOR = 1.0;
public final int BMS_PARAMETER_1_CANID_BATTERY_DISCHARGE_INHIBIT_STARTBIT = 50;
public final double BMS_PARAMETER_1_CANID_BATTERY_DISCHARGE_INHIBIT_OFFSET = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_DISCHARGE_INHIBIT_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_DISCHARGE_INHIBIT_MAX = 0.0;
public final double BMS_PARAMETER_1_BATTERY_DERATE_DRIVE_CURR_FLAG_FACTOR = 1.0;
public final int BMS_PARAMETER_1_CANID_BATTERY_DERATE_DRIVE_CURR_FLAG_STARTBIT = 51;
public final double BMS_PARAMETER_1_CANID_BATTERY_DERATE_DRIVE_CURR_FLAG_OFFSET = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_DERATE_DRIVE_CURR_FLAG_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_DERATE_DRIVE_CURR_FLAG_MAX = 1.0;
public final double BMS_PARAMETER_1_BATTERY_DERATE_CHARGE_CURR_FLAG_FACTOR = 1.0;
public final int BMS_PARAMETER_1_CANID_BATTERY_DERATE_CHARGE_CURR_FLAG_STARTBIT = 52;
public final double BMS_PARAMETER_1_CANID_BATTERY_DERATE_CHARGE_CURR_FLAG_OFFSET = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_DERATE_CHARGE_CURR_FLAG_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_DERATE_CHARGE_CURR_FLAG_MAX = 1.0;
public final double BMS_PARAMETER_1_BATTERY_INHIBIT_REGEN_FAULT_FACTOR = 1.0;
public final int BMS_PARAMETER_1_CANID_BATTERY_INHIBIT_REGEN_FAULT_STARTBIT = 53;
public final double BMS_PARAMETER_1_CANID_BATTERY_INHIBIT_REGEN_FAULT_OFFSET = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_INHIBIT_REGEN_FAULT_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_INHIBIT_REGEN_FAULT_MAX = 1.0;
public final double BMS_PARAMETER_1_BATTERY_PERMANANT_FAULT_FACTOR = 1.0;
public final int BMS_PARAMETER_1_CANID_BATTERY_PERMANANT_FAULT_STARTBIT = 54;
public final double BMS_PARAMETER_1_CANID_BATTERY_PERMANANT_FAULT_OFFSET = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_PERMANANT_FAULT_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_BATTERY_PERMANANT_FAULT_MAX = 1.0;
public final double BMS_PARAMETER_1_BMS_SHORT_CIR_DETECTION_ERROR_FACTOR = 1.0;
public final int BMS_PARAMETER_1_CANID_BMS_SHORT_CIR_DETECTION_ERROR_STARTBIT = 55;
public final double BMS_PARAMETER_1_CANID_BMS_SHORT_CIR_DETECTION_ERROR_OFFSET = 0.0;
public final double BMS_PARAMETER_1_CANID_BMS_SHORT_CIR_DETECTION_ERROR_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_BMS_SHORT_CIR_DETECTION_ERROR_MAX = 1.0;
public final double BMS_PARAMETER_1_RESERVED_FACTOR = 1.0;
public final int BMS_PARAMETER_1_CANID_RESERVED_STARTBIT = 56;
public final double BMS_PARAMETER_1_CANID_RESERVED_OFFSET = 0.0;
public final double BMS_PARAMETER_1_CANID_RESERVED_MIN = 0.0;
public final double BMS_PARAMETER_1_CANID_RESERVED_MAX = 1.0;

public static class BMS_PARAMETER_1_t { 

  public intContactor_State;
  public longBattery_Pack_Bus_Volt;
  public longBMS_Board_Temp;
  public longBMS_Mode;
  public longBattery_Precharge_Failure_Status;
  public longBattery_Charge_Inhibit;
  public longBattery_Discharge_Inhibit;
  public longBattery_Derate_Drive_Curr_Flag;
  public longBattery_Derate_Charge_Curr_Flag;
  public longBattery_Inhibit_Regen_Fault;
  public longBattery_Permanant_Fault;
  public longBMS_Short_Cir_Detection_Error;
  public longReserved;
}
/* public final int @BATTERY_LIMITS CAN MESSAGE = 303*/
public final int BATTERY_LIMITS_ID = 303;
public final int BATTERY_LIMITS_IDE = 0;
public final int BATTERY_LIMITS_DLC = 8;
public final double BATTERY_LIMITS_CHARGE_CURRENT_LIMIT_FACTOR = 0.01;
public final int BATTERY_LIMITS_CANID_CHARGE_CURRENT_LIMIT_STARTBIT = 0;
public final double BATTERY_LIMITS_CANID_CHARGE_CURRENT_LIMIT_OFFSET = 0.0;
public final double BATTERY_LIMITS_CANID_CHARGE_CURRENT_LIMIT_MIN = 0.0;
public final double BATTERY_LIMITS_CANID_CHARGE_CURRENT_LIMIT_MAX = 600.0;
public final double BATTERY_LIMITS_DISCHARGE_CURRENT_LIMIT_FACTOR = 0.01;
public final int BATTERY_LIMITS_CANID_DISCHARGE_CURRENT_LIMIT_STARTBIT = 16;
public final double BATTERY_LIMITS_CANID_DISCHARGE_CURRENT_LIMIT_OFFSET = -400.0;
public final double BATTERY_LIMITS_CANID_DISCHARGE_CURRENT_LIMIT_MIN = -400.0;
public final double BATTERY_LIMITS_CANID_DISCHARGE_CURRENT_LIMIT_MAX = 0.0;

public static class BATTERY_LIMITS_t { 

  public intCharge_Current_Limit;
  public longDischarge_Current_Limit;
}
/* public final int @BMS_PARAMETER_LIMIT_2 CAN MESSAGE = 334*/
public final int BMS_PARAMETER_LIMIT_2_ID = 334;
public final int BMS_PARAMETER_LIMIT_2_IDE = 0;
public final int BMS_PARAMETER_LIMIT_2_DLC = 8;
public final double BMS_PARAMETER_LIMIT_2_REGEN_CURRENT_LIMIT_FACTOR = 0.01;
public final int BMS_PARAMETER_LIMIT_2_CANID_REGEN_CURRENT_LIMIT_STARTBIT = 0;
public final double BMS_PARAMETER_LIMIT_2_CANID_REGEN_CURRENT_LIMIT_OFFSET = 0.0;
public final double BMS_PARAMETER_LIMIT_2_CANID_REGEN_CURRENT_LIMIT_MIN = 0.0;
public final double BMS_PARAMETER_LIMIT_2_CANID_REGEN_CURRENT_LIMIT_MAX = 100.0;
public final double BMS_PARAMETER_LIMIT_2_RESERVED_FACTOR = 0.01;
public final int BMS_PARAMETER_LIMIT_2_CANID_RESERVED_STARTBIT = 32;
public final double BMS_PARAMETER_LIMIT_2_CANID_RESERVED_OFFSET = -300.0;
public final double BMS_PARAMETER_LIMIT_2_CANID_RESERVED_MIN = -300.0;
public final double BMS_PARAMETER_LIMIT_2_CANID_RESERVED_MAX = 300.0;
public final double BMS_PARAMETER_LIMIT_2_CELL_AGGREGATE_VOLTAGE_FACTOR = 0.01;
public final int BMS_PARAMETER_LIMIT_2_CANID_CELL_AGGREGATE_VOLTAGE_STARTBIT = 48;
public final double BMS_PARAMETER_LIMIT_2_CANID_CELL_AGGREGATE_VOLTAGE_OFFSET = 0.0;
public final double BMS_PARAMETER_LIMIT_2_CANID_CELL_AGGREGATE_VOLTAGE_MIN = 0.0;
public final double BMS_PARAMETER_LIMIT_2_CANID_CELL_AGGREGATE_VOLTAGE_MAX = 150.0;

public static class BMS_PARAMETER_LIMIT_2_t { 

  public intRegen_Current_Limit;
  public longReserved;
  public longCell_Aggregate_Voltage;
}
/* public final int @VEHICLE_MODE CAN MESSAGE = 337*/
public final int VEHICLE_MODE_ID = 337;
public final int VEHICLE_MODE_IDE = 0;
public final int VEHICLE_MODE_DLC = 8;
public final double VEHICLE_MODE_VEHICLE_MODE_LVL_1_FACTOR = 1.0;
public final int VEHICLE_MODE_CANID_VEHICLE_MODE_LVL_1_STARTBIT = 0;
public final double VEHICLE_MODE_CANID_VEHICLE_MODE_LVL_1_OFFSET = 0.0;
public final double VEHICLE_MODE_CANID_VEHICLE_MODE_LVL_1_MIN = 0.0;
public final double VEHICLE_MODE_CANID_VEHICLE_MODE_LVL_1_MAX = 15.0;
public final double VEHICLE_MODE_VEHCILE_MODE_LVL_2_FACTOR = 1.0;
public final int VEHICLE_MODE_CANID_VEHCILE_MODE_LVL_2_STARTBIT = 8;
public final double VEHICLE_MODE_CANID_VEHCILE_MODE_LVL_2_OFFSET = 0.0;
public final double VEHICLE_MODE_CANID_VEHCILE_MODE_LVL_2_MIN = 0.0;
public final double VEHICLE_MODE_CANID_VEHCILE_MODE_LVL_2_MAX = 15.0;
public final double VEHICLE_MODE_VEHICLE_MODE_LVL_3_FACTOR = 1.0;
public final int VEHICLE_MODE_CANID_VEHICLE_MODE_LVL_3_STARTBIT = 16;
public final double VEHICLE_MODE_CANID_VEHICLE_MODE_LVL_3_OFFSET = 0.0;
public final double VEHICLE_MODE_CANID_VEHICLE_MODE_LVL_3_MIN = 0.0;
public final double VEHICLE_MODE_CANID_VEHICLE_MODE_LVL_3_MAX = 15.0;
public final double VEHICLE_MODE_RESERVED_FACTOR = 1.0;
public final int VEHICLE_MODE_CANID_RESERVED_STARTBIT = 24;
public final double VEHICLE_MODE_CANID_RESERVED_OFFSET = 0.0;
public final double VEHICLE_MODE_CANID_RESERVED_MIN = 0.0;
public final double VEHICLE_MODE_CANID_RESERVED_MAX = 7.0;
public final double VEHICLE_MODE_RESERVED2_FACTOR = 1.0;
public final int VEHICLE_MODE_CANID_RESERVED2_STARTBIT = 28;
public final double VEHICLE_MODE_CANID_RESERVED2_OFFSET = 0.0;
public final double VEHICLE_MODE_CANID_RESERVED2_MIN = 0.0;
public final double VEHICLE_MODE_CANID_RESERVED2_MAX = 3.0;
public final double VEHICLE_MODE_ODOMETER_FACTOR = 1.0;
public final int VEHICLE_MODE_CANID_ODOMETER_STARTBIT = 32;
public final double VEHICLE_MODE_CANID_ODOMETER_OFFSET = 0.0;
public final double VEHICLE_MODE_CANID_ODOMETER_MIN = 0.0;
public final double VEHICLE_MODE_CANID_ODOMETER_MAX = 255.0;
public final double VEHICLE_MODE_HMI_STATUSBAR_STT_FACTOR = 1.0;
public final int VEHICLE_MODE_CANID_HMI_STATUSBAR_STT_STARTBIT = 40;
public final double VEHICLE_MODE_CANID_HMI_STATUSBAR_STT_OFFSET = 0.0;
public final double VEHICLE_MODE_CANID_HMI_STATUSBAR_STT_MIN = 0.0;
public final double VEHICLE_MODE_CANID_HMI_STATUSBAR_STT_MAX = 15.0;

public static class Vehicle_Mode_t { 

  public intVehicle_Mode_Lvl_1;
  public longVehcile_Mode_Lvl_2;
  public longVehicle_Mode_Lvl_3;
  public longReserved;
  public longReserved2;
  public longOdometer;
  public longHMI_StatusBar_Stt;
}
/* public final int @TRACTION_CONTROL CAN MESSAGE = 338*/
public final int TRACTION_CONTROL_ID = 338;
public final int TRACTION_CONTROL_IDE = 0;
public final int TRACTION_CONTROL_DLC = 8;
public final double TRACTION_CONTROL_TRACTION_STATUS_FACTOR = 1.0;
public final int TRACTION_CONTROL_CANID_TRACTION_STATUS_STARTBIT = 0;
public final double TRACTION_CONTROL_CANID_TRACTION_STATUS_OFFSET = 0.0;
public final double TRACTION_CONTROL_CANID_TRACTION_STATUS_MIN = 0.0;
public final double TRACTION_CONTROL_CANID_TRACTION_STATUS_MAX = 1.0;
public final double TRACTION_CONTROL_LEAN_ANGLE_RIGHT_FACTOR = 1.0;
public final int TRACTION_CONTROL_CANID_LEAN_ANGLE_RIGHT_STARTBIT = 1;
public final double TRACTION_CONTROL_CANID_LEAN_ANGLE_RIGHT_OFFSET = 0.0;
public final double TRACTION_CONTROL_CANID_LEAN_ANGLE_RIGHT_MIN = 0.0;
public final double TRACTION_CONTROL_CANID_LEAN_ANGLE_RIGHT_MAX = 90.0;
public final double TRACTION_CONTROL_LEAN_ANGLE_LEFT_FACTOR = 1.0;
public final int TRACTION_CONTROL_CANID_LEAN_ANGLE_LEFT_STARTBIT = 9;
public final double TRACTION_CONTROL_CANID_LEAN_ANGLE_LEFT_OFFSET = 0.0;
public final double TRACTION_CONTROL_CANID_LEAN_ANGLE_LEFT_MIN = 0.0;
public final double TRACTION_CONTROL_CANID_LEAN_ANGLE_LEFT_MAX = 90.0;
public final double TRACTION_CONTROL_THROTTE_1_VALUE_FACTOR = 1.0;
public final int TRACTION_CONTROL_CANID_THROTTE_1_VALUE_STARTBIT = 17;
public final double TRACTION_CONTROL_CANID_THROTTE_1_VALUE_OFFSET = 0.0;
public final double TRACTION_CONTROL_CANID_THROTTE_1_VALUE_MIN = 0.0;
public final double TRACTION_CONTROL_CANID_THROTTE_1_VALUE_MAX = 10000.0;
public final double TRACTION_CONTROL_THROTTLE_2_VALUE_FACTOR = 1.0;
public final int TRACTION_CONTROL_CANID_THROTTLE_2_VALUE_STARTBIT = 33;
public final double TRACTION_CONTROL_CANID_THROTTLE_2_VALUE_OFFSET = 0.0;
public final double TRACTION_CONTROL_CANID_THROTTLE_2_VALUE_MIN = 0.0;
public final double TRACTION_CONTROL_CANID_THROTTLE_2_VALUE_MAX = 10000.0;
public final double TRACTION_CONTROL_THROTTLE_PERCENTAGE_FACTOR = 1.0;
public final int TRACTION_CONTROL_CANID_THROTTLE_PERCENTAGE_STARTBIT = 49;
public final double TRACTION_CONTROL_CANID_THROTTLE_PERCENTAGE_OFFSET = 0.0;
public final double TRACTION_CONTROL_CANID_THROTTLE_PERCENTAGE_MIN = 0.0;
public final double TRACTION_CONTROL_CANID_THROTTLE_PERCENTAGE_MAX = 100.0;
public final double TRACTION_CONTROL_MOTOR_CUT_FACTOR = 1.0;
public final int TRACTION_CONTROL_CANID_MOTOR_CUT_STARTBIT = 58;
public final double TRACTION_CONTROL_CANID_MOTOR_CUT_OFFSET = 0.0;
public final double TRACTION_CONTROL_CANID_MOTOR_CUT_MIN = 0.0;
public final double TRACTION_CONTROL_CANID_MOTOR_CUT_MAX = 1.0;

public static class Traction_Control_t { 

  public intTraction_Status;
  public longLean_angle_right;
  public longLean_angle_left;
  public longThrotte_1_Value;
  public longThrottle_2_Value;
  public longThrottle_Percentage;
  public longMotor_Cut;
}
/* public final int @SOM_PARAMETERS_1 CAN MESSAGE = 339*/
public final int SOM_PARAMETERS_1_ID = 339;
public final int SOM_PARAMETERS_1_IDE = 0;
public final int SOM_PARAMETERS_1_DLC = 8;
public final double SOM_PARAMETERS_1_SOM_HEARTBEAT_FAILURE_FACTOR = 1.0;
public final int SOM_PARAMETERS_1_CANID_SOM_HEARTBEAT_FAILURE_STARTBIT = 0;
public final double SOM_PARAMETERS_1_CANID_SOM_HEARTBEAT_FAILURE_OFFSET = 0.0;
public final double SOM_PARAMETERS_1_CANID_SOM_HEARTBEAT_FAILURE_MIN = 0.0;
public final double SOM_PARAMETERS_1_CANID_SOM_HEARTBEAT_FAILURE_MAX = 1.0;
public final double SOM_PARAMETERS_1_SOM_STATUS_FACTOR = 1.0;
public final int SOM_PARAMETERS_1_CANID_SOM_STATUS_STARTBIT = 1;
public final double SOM_PARAMETERS_1_CANID_SOM_STATUS_OFFSET = 0.0;
public final double SOM_PARAMETERS_1_CANID_SOM_STATUS_MIN = 0.0;
public final double SOM_PARAMETERS_1_CANID_SOM_STATUS_MAX = 15.0;

public static class SOM_Parameters_1_t { 

  public intSOM_HeartBeat_Failure;
  public longSOM_Status;
}
/* public final int @ABS_PARAMETERS CAN MESSAGE = 340*/
public final int ABS_PARAMETERS_ID = 340;
public final int ABS_PARAMETERS_IDE = 0;
public final int ABS_PARAMETERS_DLC = 8;
public final double ABS_PARAMETERS_ABS_FRONTBRAKE_STATUS_FACTOR = 1.0;
public final int ABS_PARAMETERS_CANID_ABS_FRONTBRAKE_STATUS_STARTBIT = 0;
public final double ABS_PARAMETERS_CANID_ABS_FRONTBRAKE_STATUS_OFFSET = 0.0;
public final double ABS_PARAMETERS_CANID_ABS_FRONTBRAKE_STATUS_MIN = 0.0;
public final double ABS_PARAMETERS_CANID_ABS_FRONTBRAKE_STATUS_MAX = 1.0;
public final double ABS_PARAMETERS_ABS_REARBRAKE_STATUS_FACTOR = 1.0;
public final int ABS_PARAMETERS_CANID_ABS_REARBRAKE_STATUS_STARTBIT = 1;
public final double ABS_PARAMETERS_CANID_ABS_REARBRAKE_STATUS_OFFSET = 0.0;
public final double ABS_PARAMETERS_CANID_ABS_REARBRAKE_STATUS_MIN = 0.0;
public final double ABS_PARAMETERS_CANID_ABS_REARBRAKE_STATUS_MAX = 1.0;
public final double ABS_PARAMETERS_ABS_STATE_FACTOR = 1.0;
public final int ABS_PARAMETERS_CANID_ABS_STATE_STARTBIT = 2;
public final double ABS_PARAMETERS_CANID_ABS_STATE_OFFSET = 0.0;
public final double ABS_PARAMETERS_CANID_ABS_STATE_MIN = 0.0;
public final double ABS_PARAMETERS_CANID_ABS_STATE_MAX = 4.0;
public final double ABS_PARAMETERS_ABS_FAULTY_FACTOR = 1.0;
public final int ABS_PARAMETERS_CANID_ABS_FAULTY_STARTBIT = 6;
public final double ABS_PARAMETERS_CANID_ABS_FAULTY_OFFSET = 0.0;
public final double ABS_PARAMETERS_CANID_ABS_FAULTY_MIN = 0.0;
public final double ABS_PARAMETERS_CANID_ABS_FAULTY_MAX = 0.0;

public static class ABS_Parameters_t { 

  public intABS_FrontBrake_Status;
  public longABS_RearBrake_Status;
  public longABS_State;
  public longABS_Faulty;
}
/* public final int @TRACTION_CONTROL2 CAN MESSAGE = 341*/
public final int TRACTION_CONTROL2_ID = 341;
public final int TRACTION_CONTROL2_IDE = 0;
public final int TRACTION_CONTROL2_DLC = 2;
public final double TRACTION_CONTROL2_THROTTLE_1_PER_FACTOR = 1.0;
public final int TRACTION_CONTROL2_CANID_THROTTLE_1_PER_STARTBIT = 0;
public final double TRACTION_CONTROL2_CANID_THROTTLE_1_PER_OFFSET = 0.0;
public final double TRACTION_CONTROL2_CANID_THROTTLE_1_PER_MIN = 0.0;
public final double TRACTION_CONTROL2_CANID_THROTTLE_1_PER_MAX = 100.0;
public final double TRACTION_CONTROL2_THROTTLE_2_PER_FACTOR = 1.0;
public final int TRACTION_CONTROL2_CANID_THROTTLE_2_PER_STARTBIT = 8;
public final double TRACTION_CONTROL2_CANID_THROTTLE_2_PER_OFFSET = 0.0;
public final double TRACTION_CONTROL2_CANID_THROTTLE_2_PER_MIN = 0.0;
public final double TRACTION_CONTROL2_CANID_THROTTLE_2_PER_MAX = 100.0;

public static class Traction_Control2_t { 

  public intThrottle_1_per;
  public longThrottle_2_per;
}
/* public final int @VEHICLE_FUNC CAN MESSAGE = 361*/
public final int VEHICLE_FUNC_ID = 361;
public final int VEHICLE_FUNC_IDE = 0;
public final int VEHICLE_FUNC_DLC = 8;
public final double VEHICLE_FUNC_FRONT_BRAKE_STATUS_FACTOR = 1.0;
public final int VEHICLE_FUNC_CANID_FRONT_BRAKE_STATUS_STARTBIT = 0;
public final double VEHICLE_FUNC_CANID_FRONT_BRAKE_STATUS_OFFSET = 0.0;
public final double VEHICLE_FUNC_CANID_FRONT_BRAKE_STATUS_MIN = 0.0;
public final double VEHICLE_FUNC_CANID_FRONT_BRAKE_STATUS_MAX = 0.0;
public final double VEHICLE_FUNC_REAR_BRAKE_STATUS_FACTOR = 1.0;
public final int VEHICLE_FUNC_CANID_REAR_BRAKE_STATUS_STARTBIT = 1;
public final double VEHICLE_FUNC_CANID_REAR_BRAKE_STATUS_OFFSET = 0.0;
public final double VEHICLE_FUNC_CANID_REAR_BRAKE_STATUS_MIN = 0.0;
public final double VEHICLE_FUNC_CANID_REAR_BRAKE_STATUS_MAX = 0.0;
public final double VEHICLE_FUNC_CRUISE_CONTROL_REQ_FACTOR = 1.0;
public final int VEHICLE_FUNC_CANID_CRUISE_CONTROL_REQ_STARTBIT = 2;
public final double VEHICLE_FUNC_CANID_CRUISE_CONTROL_REQ_OFFSET = 0.0;
public final double VEHICLE_FUNC_CANID_CRUISE_CONTROL_REQ_MIN = 0.0;
public final double VEHICLE_FUNC_CANID_CRUISE_CONTROL_REQ_MAX = 3.0;
public final double VEHICLE_FUNC_HILL_HOLD_COMMAND_FACTOR = 1.0;
public final int VEHICLE_FUNC_CANID_HILL_HOLD_COMMAND_STARTBIT = 6;
public final double VEHICLE_FUNC_CANID_HILL_HOLD_COMMAND_OFFSET = 0.0;
public final double VEHICLE_FUNC_CANID_HILL_HOLD_COMMAND_MIN = 0.0;
public final double VEHICLE_FUNC_CANID_HILL_HOLD_COMMAND_MAX = 0.0;
public final double VEHICLE_FUNC_REGENERATION_COMMAND_FACTOR = 1.0;
public final int VEHICLE_FUNC_CANID_REGENERATION_COMMAND_STARTBIT = 7;
public final double VEHICLE_FUNC_CANID_REGENERATION_COMMAND_OFFSET = 0.0;
public final double VEHICLE_FUNC_CANID_REGENERATION_COMMAND_MIN = 0.0;
public final double VEHICLE_FUNC_CANID_REGENERATION_COMMAND_MAX = 0.0;
public final double VEHICLE_FUNC_CRUISE_SET_SPEED_FACTOR = 0.1;
public final int VEHICLE_FUNC_CANID_CRUISE_SET_SPEED_STARTBIT = 10;
public final double VEHICLE_FUNC_CANID_CRUISE_SET_SPEED_OFFSET = 0.0;
public final double VEHICLE_FUNC_CANID_CRUISE_SET_SPEED_MIN = 0.0;
public final double VEHICLE_FUNC_CANID_CRUISE_SET_SPEED_MAX = 1.0;

public static class Vehicle_Func_t { 

  public intFront_Brake_Status;
  public longRear_Brake_Status;
  public longCruise_Control_Req;
  public longHill_Hold_Command;
  public longRegeneration_Command;
  public longCruise_Set_Speed;
}
/* public final int @BMS_PARAMETER_3 CAN MESSAGE = 366*/
public final int BMS_PARAMETER_3_ID = 366;
public final int BMS_PARAMETER_3_IDE = 0;
public final int BMS_PARAMETER_3_DLC = 8;
public final double BMS_PARAMETER_3_BALANCING_STATUS_FACTOR = 1.0;
public final int BMS_PARAMETER_3_CANID_BALANCING_STATUS_STARTBIT = 0;
public final double BMS_PARAMETER_3_CANID_BALANCING_STATUS_OFFSET = 0.0;
public final double BMS_PARAMETER_3_CANID_BALANCING_STATUS_MIN = 0.0;
public final double BMS_PARAMETER_3_CANID_BALANCING_STATUS_MAX = 1.0;
public final double BMS_PARAMETER_3_EFFECTIVE_BATTERY_TEMPERATURE_FACTOR = 0.5;
public final int BMS_PARAMETER_3_CANID_EFFECTIVE_BATTERY_TEMPERATURE_STARTBIT = 1;
public final double BMS_PARAMETER_3_CANID_EFFECTIVE_BATTERY_TEMPERATURE_OFFSET = -50.0;
public final double BMS_PARAMETER_3_CANID_EFFECTIVE_BATTERY_TEMPERATURE_MIN = -50.0;
public final double BMS_PARAMETER_3_CANID_EFFECTIVE_BATTERY_TEMPERATURE_MAX = 77.5;
public final double BMS_PARAMETER_3_DELTA_TEMP_FACTOR = 0.5;
public final int BMS_PARAMETER_3_CANID_DELTA_TEMP_STARTBIT = 9;
public final double BMS_PARAMETER_3_CANID_DELTA_TEMP_OFFSET = -50.0;
public final double BMS_PARAMETER_3_CANID_DELTA_TEMP_MIN = -50.0;
public final double BMS_PARAMETER_3_CANID_DELTA_TEMP_MAX = 77.5;
public final double BMS_PARAMETER_3_DELTA_VOLTAGE_FACTOR = 1.0;
public final int BMS_PARAMETER_3_CANID_DELTA_VOLTAGE_STARTBIT = 17;
public final double BMS_PARAMETER_3_CANID_DELTA_VOLTAGE_OFFSET = 0.0;
public final double BMS_PARAMETER_3_CANID_DELTA_VOLTAGE_MIN = 0.0;
public final double BMS_PARAMETER_3_CANID_DELTA_VOLTAGE_MAX = 5000.0;
public final double BMS_PARAMETER_3_HVIL_OBC_REQ_FACTOR = 1.0;
public final int BMS_PARAMETER_3_CANID_HVIL_OBC_REQ_STARTBIT = 34;
public final double BMS_PARAMETER_3_CANID_HVIL_OBC_REQ_OFFSET = 0.0;
public final double BMS_PARAMETER_3_CANID_HVIL_OBC_REQ_MIN = 0.0;
public final double BMS_PARAMETER_3_CANID_HVIL_OBC_REQ_MAX = 1.0;
public final double BMS_PARAMETER_3_HVIL_MCU_REQ_FACTOR = 1.0;
public final int BMS_PARAMETER_3_CANID_HVIL_MCU_REQ_STARTBIT = 35;
public final double BMS_PARAMETER_3_CANID_HVIL_MCU_REQ_OFFSET = 0.0;
public final double BMS_PARAMETER_3_CANID_HVIL_MCU_REQ_MIN = 0.0;
public final double BMS_PARAMETER_3_CANID_HVIL_MCU_REQ_MAX = 1.0;
public final double BMS_PARAMETER_3_HVIL_OBC_STATUS_FACTOR = 1.0;
public final int BMS_PARAMETER_3_CANID_HVIL_OBC_STATUS_STARTBIT = 36;
public final double BMS_PARAMETER_3_CANID_HVIL_OBC_STATUS_OFFSET = 0.0;
public final double BMS_PARAMETER_3_CANID_HVIL_OBC_STATUS_MIN = 0.0;
public final double BMS_PARAMETER_3_CANID_HVIL_OBC_STATUS_MAX = 1.0;
public final double BMS_PARAMETER_3_HVIL_MCU_STATUS_FACTOR = 1.0;
public final int BMS_PARAMETER_3_CANID_HVIL_MCU_STATUS_STARTBIT = 37;
public final double BMS_PARAMETER_3_CANID_HVIL_MCU_STATUS_OFFSET = 0.0;
public final double BMS_PARAMETER_3_CANID_HVIL_MCU_STATUS_MIN = 0.0;
public final double BMS_PARAMETER_3_CANID_HVIL_MCU_STATUS_MAX = 1.0;
public final double BMS_PARAMETER_3_ISOLATION_RESISTANCE_FACTOR = 0.1;
public final int BMS_PARAMETER_3_CANID_ISOLATION_RESISTANCE_STARTBIT = 38;
public final double BMS_PARAMETER_3_CANID_ISOLATION_RESISTANCE_OFFSET = 0.0;
public final double BMS_PARAMETER_3_CANID_ISOLATION_RESISTANCE_MIN = 0.0;
public final double BMS_PARAMETER_3_CANID_ISOLATION_RESISTANCE_MAX = 6553.5;

public static class BMS_PARAMETER_3_t { 

  public intBalancing_Status;
  public longEffective_Battery_Temperature;
  public longDelta_Temp;
  public longDelta_Voltage;
  public longHVIL_OBC_Req;
  public longHVIL_MCU_Req;
  public longHVIL_OBC_Status;
  public longHVIL_MCU_Status;
  public longIsolation_Resistance;
}
/* public final int @BMS_PARAMETER_4 CAN MESSAGE = 367*/
public final int BMS_PARAMETER_4_ID = 367;
public final int BMS_PARAMETER_4_IDE = 0;
public final int BMS_PARAMETER_4_DLC = 8;
public final double BMS_PARAMETER_4_PACK_INTERNAL_RESISTANCE_FACTOR = 1.0;
public final int BMS_PARAMETER_4_CANID_PACK_INTERNAL_RESISTANCE_STARTBIT = 0;
public final double BMS_PARAMETER_4_CANID_PACK_INTERNAL_RESISTANCE_OFFSET = 0.0;
public final double BMS_PARAMETER_4_CANID_PACK_INTERNAL_RESISTANCE_MIN = 0.0;
public final double BMS_PARAMETER_4_CANID_PACK_INTERNAL_RESISTANCE_MAX = 0.0;
public final double BMS_PARAMETER_4_PACK_SOH_FACTOR = 0.5;
public final int BMS_PARAMETER_4_CANID_PACK_SOH_STARTBIT = 16;
public final double BMS_PARAMETER_4_CANID_PACK_SOH_OFFSET = 0.0;
public final double BMS_PARAMETER_4_CANID_PACK_SOH_MIN = 0.0;
public final double BMS_PARAMETER_4_CANID_PACK_SOH_MAX = 100.0;
public final double BMS_PARAMETER_4_PACK_SOP_FACTOR = 0.5;
public final int BMS_PARAMETER_4_CANID_PACK_SOP_STARTBIT = 24;
public final double BMS_PARAMETER_4_CANID_PACK_SOP_OFFSET = 0.0;
public final double BMS_PARAMETER_4_CANID_PACK_SOP_MIN = 0.0;
public final double BMS_PARAMETER_4_CANID_PACK_SOP_MAX = 100.0;
public final double BMS_PARAMETER_4_TOTAL_CHARGE_CYCLES_FACTOR = 1.0;
public final int BMS_PARAMETER_4_CANID_TOTAL_CHARGE_CYCLES_STARTBIT = 32;
public final double BMS_PARAMETER_4_CANID_TOTAL_CHARGE_CYCLES_OFFSET = 0.0;
public final double BMS_PARAMETER_4_CANID_TOTAL_CHARGE_CYCLES_MIN = 0.0;
public final double BMS_PARAMETER_4_CANID_TOTAL_CHARGE_CYCLES_MAX = 65535.0;
public final double BMS_PARAMETER_4_PACK_DOD_FACTOR = 0.5;
public final int BMS_PARAMETER_4_CANID_PACK_DOD_STARTBIT = 48;
public final double BMS_PARAMETER_4_CANID_PACK_DOD_OFFSET = 0.0;
public final double BMS_PARAMETER_4_CANID_PACK_DOD_MIN = 0.0;
public final double BMS_PARAMETER_4_CANID_PACK_DOD_MAX = 100.0;

public static class BMS_PARAMETER_4_t { 

  public intPack_Internal_Resistance;
  public longPack_SOH;
  public longPack_SOP;
  public longTotal_Charge_Cycles;
  public longPack_DOD;
}
/* public final int @BATTERY_ENERGY_CYCLES CAN MESSAGE = 368*/
public final int BATTERY_ENERGY_CYCLES_ID = 368;
public final int BATTERY_ENERGY_CYCLES_IDE = 0;
public final int BATTERY_ENERGY_CYCLES_DLC = 8;
public final double BATTERY_ENERGY_CYCLES_CYCLE_ENERGY_IN_FACTOR = 1.0;
public final int BATTERY_ENERGY_CYCLES_CANID_CYCLE_ENERGY_IN_STARTBIT = 0;
public final double BATTERY_ENERGY_CYCLES_CANID_CYCLE_ENERGY_IN_OFFSET = 0.0;
public final double BATTERY_ENERGY_CYCLES_CANID_CYCLE_ENERGY_IN_MIN = 0.0;
public final double BATTERY_ENERGY_CYCLES_CANID_CYCLE_ENERGY_IN_MAX = 65535.0;
public final double BATTERY_ENERGY_CYCLES_CYCLE_ENEGY_OUT_FACTOR = 1.0;
public final int BATTERY_ENERGY_CYCLES_CANID_CYCLE_ENEGY_OUT_STARTBIT = 16;
public final double BATTERY_ENERGY_CYCLES_CANID_CYCLE_ENEGY_OUT_OFFSET = 0.0;
public final double BATTERY_ENERGY_CYCLES_CANID_CYCLE_ENEGY_OUT_MIN = 0.0;
public final double BATTERY_ENERGY_CYCLES_CANID_CYCLE_ENEGY_OUT_MAX = 65535.0;
public final double BATTERY_ENERGY_CYCLES_TOTAL_ENERGY_IN_FACTOR = 0.1;
public final int BATTERY_ENERGY_CYCLES_CANID_TOTAL_ENERGY_IN_STARTBIT = 32;
public final double BATTERY_ENERGY_CYCLES_CANID_TOTAL_ENERGY_IN_OFFSET = 0.0;
public final double BATTERY_ENERGY_CYCLES_CANID_TOTAL_ENERGY_IN_MIN = 0.0;
public final double BATTERY_ENERGY_CYCLES_CANID_TOTAL_ENERGY_IN_MAX = 6553.5;
public final double BATTERY_ENERGY_CYCLES_TOTAL_ENERGY_OUT_FACTOR = 0.1;
public final int BATTERY_ENERGY_CYCLES_CANID_TOTAL_ENERGY_OUT_STARTBIT = 48;
public final double BATTERY_ENERGY_CYCLES_CANID_TOTAL_ENERGY_OUT_OFFSET = 0.0;
public final double BATTERY_ENERGY_CYCLES_CANID_TOTAL_ENERGY_OUT_MIN = 0.0;
public final double BATTERY_ENERGY_CYCLES_CANID_TOTAL_ENERGY_OUT_MAX = 6553.5;

public static class Battery_Energy_Cycles_t { 

  public intCycle_Energy_In;
  public longCycle_Enegy_Out;
  public longTotal_Energy_In;
  public longTotal_Energy_Out;
}
/* public final int @OBC_WAKEUP_INFO CAN MESSAGE = 369*/
public final int OBC_WAKEUP_INFO_ID = 369;
public final int OBC_WAKEUP_INFO_IDE = 0;
public final int OBC_WAKEUP_INFO_DLC = 8;
public final double OBC_WAKEUP_INFO_OBC_WAKEUP_FACTOR = 1.0;
public final int OBC_WAKEUP_INFO_CANID_OBC_WAKEUP_STARTBIT = 0;
public final double OBC_WAKEUP_INFO_CANID_OBC_WAKEUP_OFFSET = 0.0;
public final double OBC_WAKEUP_INFO_CANID_OBC_WAKEUP_MIN = 0.0;
public final double OBC_WAKEUP_INFO_CANID_OBC_WAKEUP_MAX = 1.0;

public static class OBC_Wakeup_Info_t { 

  public intOBC_Wakeup;
}
/* public final int @BATTERY_TEMPERATURE CAN MESSAGE = 370*/
public final int BATTERY_TEMPERATURE_ID = 370;
public final int BATTERY_TEMPERATURE_IDE = 0;
public final int BATTERY_TEMPERATURE_DLC = 8;
public final double BATTERY_TEMPERATURE_BATTERY_TEMPERATURE_1_FACTOR = 0.5;
public final int BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_1_STARTBIT = 0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_1_OFFSET = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_1_MIN = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_1_MAX = 77.5;
public final double BATTERY_TEMPERATURE_BATTERY_TEMPERATURE_2_FACTOR = 0.5;
public final int BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_2_STARTBIT = 8;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_2_OFFSET = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_2_MIN = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_2_MAX = 77.5;
public final double BATTERY_TEMPERATURE_BATTERY_TEMPERATURE_3_FACTOR = 0.5;
public final int BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_3_STARTBIT = 16;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_3_OFFSET = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_3_MIN = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_3_MAX = 77.5;
public final double BATTERY_TEMPERATURE_BATTERY_TEMPERATURE_4_FACTOR = 0.5;
public final int BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_4_STARTBIT = 24;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_4_OFFSET = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_4_MIN = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_4_MAX = 77.5;
public final double BATTERY_TEMPERATURE_BATTERY_TEMPERATURE_5_FACTOR = 0.5;
public final int BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_5_STARTBIT = 32;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_5_OFFSET = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_5_MIN = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_5_MAX = 77.5;
public final double BATTERY_TEMPERATURE_BATTERY_TEMPERATURE_6_FACTOR = 0.5;
public final int BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_6_STARTBIT = 40;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_6_OFFSET = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_6_MIN = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_6_MAX = 77.5;
public final double BATTERY_TEMPERATURE_BATTERY_TEMPERATURE_MIN_FACTOR = 0.5;
public final int BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_MIN_STARTBIT = 48;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_MIN_OFFSET = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_MIN_MIN = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_MIN_MAX = 77.5;
public final double BATTERY_TEMPERATURE_BATTERY_TEMPERATURE_MAX_FACTOR = 0.5;
public final int BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_MAX_STARTBIT = 56;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_MAX_OFFSET = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_MAX_MIN = -50.0;
public final double BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_MAX_MAX = 77.5;

public static class BATTERY_TEMPERATURE_t { 

  public intBattery_Temperature_1;
  public longBattery_Temperature_2;
  public longBattery_Temperature_3;
  public longBattery_Temperature_4;
  public longBattery_Temperature_5;
  public longBattery_Temperature_6;
  public longBattery_Temperature_Min;
  public longBattery_Temperature_Max;
}
/* public final int @CUSTOM_MODE CAN MESSAGE = 371*/
public final int CUSTOM_MODE_ID = 371;
public final int CUSTOM_MODE_IDE = 0;
public final int CUSTOM_MODE_DLC = 8;
public final double CUSTOM_MODE_CUSTOM_DRIVE_ENABLE_FACTOR = 1.0;
public final int CUSTOM_MODE_CANID_CUSTOM_DRIVE_ENABLE_STARTBIT = 0;
public final double CUSTOM_MODE_CANID_CUSTOM_DRIVE_ENABLE_OFFSET = 0.0;
public final double CUSTOM_MODE_CANID_CUSTOM_DRIVE_ENABLE_MIN = 0.0;
public final double CUSTOM_MODE_CANID_CUSTOM_DRIVE_ENABLE_MAX = 1.0;
public final double CUSTOM_MODE_POWER_FACTOR = 1.0;
public final int CUSTOM_MODE_CANID_POWER_STARTBIT = 1;
public final double CUSTOM_MODE_CANID_POWER_OFFSET = 0.0;
public final double CUSTOM_MODE_CANID_POWER_MIN = 0.0;
public final double CUSTOM_MODE_CANID_POWER_MAX = 100.0;
public final double CUSTOM_MODE_THROTTLE_PERFORMANCE_FACTOR = 1.0;
public final int CUSTOM_MODE_CANID_THROTTLE_PERFORMANCE_STARTBIT = 9;
public final double CUSTOM_MODE_CANID_THROTTLE_PERFORMANCE_OFFSET = 0.0;
public final double CUSTOM_MODE_CANID_THROTTLE_PERFORMANCE_MIN = 0.0;
public final double CUSTOM_MODE_CANID_THROTTLE_PERFORMANCE_MAX = 100.0;
public final double CUSTOM_MODE_REGEN_FACTOR = 1.0;
public final int CUSTOM_MODE_CANID_REGEN_STARTBIT = 17;
public final double CUSTOM_MODE_CANID_REGEN_OFFSET = 0.0;
public final double CUSTOM_MODE_CANID_REGEN_MIN = 0.0;
public final double CUSTOM_MODE_CANID_REGEN_MAX = 100.0;

public static class Custom_Mode_t { 

  public intCustom_Drive_Enable;
  public longPower;
  public longThrottle_performance;
  public longRegen;
}
/* public final int @VCU_DATA CAN MESSAGE = 372*/
public final int VCU_DATA_ID = 372;
public final int VCU_DATA_IDE = 0;
public final int VCU_DATA_DLC = 8;
public final double VCU_DATA_CHARGER_PLUGIN_FACTOR = 1.0;
public final int VCU_DATA_CANID_CHARGER_PLUGIN_STARTBIT = 0;
public final double VCU_DATA_CANID_CHARGER_PLUGIN_OFFSET = 0.0;
public final double VCU_DATA_CANID_CHARGER_PLUGIN_MIN = 0.0;
public final double VCU_DATA_CANID_CHARGER_PLUGIN_MAX = 1.0;
public final double VCU_DATA_MCU_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_MCU_POWER_SUPPLY_STARTBIT = 1;
public final double VCU_DATA_CANID_MCU_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_MCU_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_MCU_POWER_SUPPLY_MAX = 1.0;
public final double VCU_DATA_HU_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_HU_POWER_SUPPLY_STARTBIT = 2;
public final double VCU_DATA_CANID_HU_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_HU_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_HU_POWER_SUPPLY_MAX = 1.0;
public final double VCU_DATA_LEFT_INDICATOR_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_LEFT_INDICATOR_POWER_SUPPLY_STARTBIT = 3;
public final double VCU_DATA_CANID_LEFT_INDICATOR_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_LEFT_INDICATOR_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_LEFT_INDICATOR_POWER_SUPPLY_MAX = 1.0;
public final double VCU_DATA_RIGHT_INDICATOR_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_RIGHT_INDICATOR_POWER_SUPPLY_STARTBIT = 4;
public final double VCU_DATA_CANID_RIGHT_INDICATOR_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_RIGHT_INDICATOR_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_RIGHT_INDICATOR_POWER_SUPPLY_MAX = 1.0;
public final double VCU_DATA_HIGH_BEAM_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_HIGH_BEAM_POWER_SUPPLY_STARTBIT = 5;
public final double VCU_DATA_CANID_HIGH_BEAM_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_HIGH_BEAM_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_HIGH_BEAM_POWER_SUPPLY_MAX = 1.0;
public final double VCU_DATA_LOW_BEAM_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_LOW_BEAM_POWER_SUPPLY_STARTBIT = 6;
public final double VCU_DATA_CANID_LOW_BEAM_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_LOW_BEAM_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_LOW_BEAM_POWER_SUPPLY_MAX = 1.0;
public final double VCU_DATA_DRL_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_DRL_POWER_SUPPLY_STARTBIT = 7;
public final double VCU_DATA_CANID_DRL_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_DRL_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_DRL_POWER_SUPPLY_MAX = 1.0;
public final double VCU_DATA_LEFT_SWITCH_CUBE_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_LEFT_SWITCH_CUBE_POWER_SUPPLY_STARTBIT = 8;
public final double VCU_DATA_CANID_LEFT_SWITCH_CUBE_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_LEFT_SWITCH_CUBE_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_LEFT_SWITCH_CUBE_POWER_SUPPLY_MAX = 1.0;
public final double VCU_DATA_RIGHT_SWITCH_CUBE_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_RIGHT_SWITCH_CUBE_POWER_SUPPLY_STARTBIT = 9;
public final double VCU_DATA_CANID_RIGHT_SWITCH_CUBE_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_RIGHT_SWITCH_CUBE_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_RIGHT_SWITCH_CUBE_POWER_SUPPLY_MAX = 1.0;
public final double VCU_DATA_HORN_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_HORN_POWER_SUPPLY_STARTBIT = 10;
public final double VCU_DATA_CANID_HORN_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_HORN_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_HORN_POWER_SUPPLY_MAX = 1.0;
public final double VCU_DATA_SPEAKER_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_SPEAKER_POWER_SUPPLY_STARTBIT = 11;
public final double VCU_DATA_CANID_SPEAKER_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_SPEAKER_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_SPEAKER_POWER_SUPPLY_MAX = 1.0;
public final double VCU_DATA_SOM_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_SOM_POWER_SUPPLY_STARTBIT = 12;
public final double VCU_DATA_CANID_SOM_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_SOM_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_SOM_POWER_SUPPLY_MAX = 1.0;
public final double VCU_DATA_ESCL_POWER_SUPPLY_FACTOR = 1.0;
public final int VCU_DATA_CANID_ESCL_POWER_SUPPLY_STARTBIT = 13;
public final double VCU_DATA_CANID_ESCL_POWER_SUPPLY_OFFSET = 0.0;
public final double VCU_DATA_CANID_ESCL_POWER_SUPPLY_MIN = 0.0;
public final double VCU_DATA_CANID_ESCL_POWER_SUPPLY_MAX = 0.0;
public final double VCU_DATA_ESCL_COMMANDS_FACTOR = 1.0;
public final int VCU_DATA_CANID_ESCL_COMMANDS_STARTBIT = 14;
public final double VCU_DATA_CANID_ESCL_COMMANDS_OFFSET = 0.0;
public final double VCU_DATA_CANID_ESCL_COMMANDS_MIN = 0.0;
public final double VCU_DATA_CANID_ESCL_COMMANDS_MAX = 7.0;
public final double VCU_DATA_CHARGER_INFO_FACTOR = 1.0;
public final int VCU_DATA_CANID_CHARGER_INFO_STARTBIT = 24;
public final double VCU_DATA_CANID_CHARGER_INFO_OFFSET = 0.0;
public final double VCU_DATA_CANID_CHARGER_INFO_MIN = 0.0;
public final double VCU_DATA_CANID_CHARGER_INFO_MAX = 1.0;

public static class VCU_Data_t { 

  public intCharger_Plugin;
  public longMCU_Power_Supply;
  public longHU_Power_Supply;
  public longLeft_Indicator_Power_Supply;
  public longRight_Indicator_Power_Supply;
  public longHigh_Beam_Power_Supply;
  public longLow_Beam_Power_Supply;
  public longDRL_Power_Supply;
  public longLeft_Switch_Cube_Power_Supply;
  public longRight_Switch_Cube_Power_Supply;
  public longHorn_Power_Supply;
  public longSpeaker_Power_Supply;
  public longSOM_Power_Supply;
  public longESCL_Power_Supply;
  public longESCL_Commands;
  public longCharger_Info;
}
/* public final int @BMS_CELL_STATUS CAN MESSAGE = 382*/
public final int BMS_CELL_STATUS_ID = 382;
public final int BMS_CELL_STATUS_IDE = 0;
public final int BMS_CELL_STATUS_DLC = 8;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_1_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_1_STARTBIT = 0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_1_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_1_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_1_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_2_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_2_STARTBIT = 1;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_2_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_2_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_2_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_3_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_3_STARTBIT = 2;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_3_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_3_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_3_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_4_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_4_STARTBIT = 3;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_4_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_4_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_4_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_5_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_5_STARTBIT = 4;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_5_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_5_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_5_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_6_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_6_STARTBIT = 5;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_6_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_6_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_6_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_7_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_7_STARTBIT = 6;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_7_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_7_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_7_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_8_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_8_STARTBIT = 7;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_8_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_8_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_8_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_9_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_9_STARTBIT = 8;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_9_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_9_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_9_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_10_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_10_STARTBIT = 9;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_10_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_10_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_10_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_11_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_11_STARTBIT = 10;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_11_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_11_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_11_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_12_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_12_STARTBIT = 11;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_12_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_12_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_12_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_13_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_13_STARTBIT = 12;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_13_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_13_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_13_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_14_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_14_STARTBIT = 13;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_14_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_14_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_14_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_15_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_15_STARTBIT = 14;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_15_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_15_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_15_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_16_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_16_STARTBIT = 15;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_16_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_16_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_16_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_17_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_17_STARTBIT = 16;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_17_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_17_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_17_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_18_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_18_STARTBIT = 17;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_18_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_18_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_18_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_20_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_20_STARTBIT = 19;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_20_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_20_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_20_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_21_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_21_STARTBIT = 20;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_21_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_21_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_21_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_22_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_22_STARTBIT = 21;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_22_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_22_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_22_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_23_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_23_STARTBIT = 22;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_23_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_23_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_23_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_24_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_24_STARTBIT = 23;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_24_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_24_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_24_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_25_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_25_STARTBIT = 24;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_25_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_25_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_25_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_26_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_26_STARTBIT = 25;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_26_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_26_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_26_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_27_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_27_STARTBIT = 26;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_27_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_27_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_27_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_28_FACTOR = 1.0;
public final int BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_28_STARTBIT = 27;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_28_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_28_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_28_MAX = 1.0;
public final double BMS_CELL_STATUS_BMS_CELL_MIN_VOLTAGE_FACTOR = 0.001;
public final int BMS_CELL_STATUS_CANID_BMS_CELL_MIN_VOLTAGE_STARTBIT = 32;
public final double BMS_CELL_STATUS_CANID_BMS_CELL_MIN_VOLTAGE_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_CELL_MIN_VOLTAGE_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_CELL_MIN_VOLTAGE_MAX = 65.0;
public final double BMS_CELL_STATUS_BMS_CELL_MAX_VOLTAGE_FACTOR = 0.001;
public final int BMS_CELL_STATUS_CANID_BMS_CELL_MAX_VOLTAGE_STARTBIT = 48;
public final double BMS_CELL_STATUS_CANID_BMS_CELL_MAX_VOLTAGE_OFFSET = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_CELL_MAX_VOLTAGE_MIN = 0.0;
public final double BMS_CELL_STATUS_CANID_BMS_CELL_MAX_VOLTAGE_MAX = 65.0;

public static class BMS_CELL_STATUS_t { 

  public intBMS_Balancing_Status_Cell_1;
  public longBMS_Balancing_Status_Cell_2;
  public longBMS_Balancing_Status_Cell_3;
  public longBMS_Balancing_Status_Cell_4;
  public longBMS_Balancing_Status_Cell_5;
  public longBMS_Balancing_Status_Cell_6;
  public longBMS_Balancing_Status_Cell_7;
  public longBMS_Balancing_Status_Cell_8;
  public longBMS_Balancing_Status_Cell_9;
  public longBMS_Balancing_Status_Cell_10;
  public longBMS_Balancing_Status_Cell_11;
  public longBMS_Balancing_Status_Cell_12;
  public longBMS_Balancing_Status_Cell_13;
  public longBMS_Balancing_Status_Cell_14;
  public longBMS_Balancing_Status_Cell_15;
  public longBMS_Balancing_Status_Cell_16;
  public longBMS_Balancing_Status_Cell_17;
  public longBMS_Balancing_Status_Cell_18;
  public longBMS_Balancing_Status_Cell_20;
  public longBMS_Balancing_Status_Cell_21;
  public longBMS_Balancing_Status_Cell_22;
  public longBMS_Balancing_Status_Cell_23;
  public longBMS_Balancing_Status_Cell_24;
  public longBMS_Balancing_Status_Cell_25;
  public longBMS_Balancing_Status_Cell_26;
  public longBMS_Balancing_Status_Cell_27;
  public longBMS_Balancing_Status_Cell_28;
  public longBMS_Cell_Min_Voltage;
  public longBMS_Cell_Max_Voltage;
}
/* public final int @CHARGER_PARAMETER_1 CAN MESSAGE = 415*/
public final int CHARGER_PARAMETER_1_ID = 415;
public final int CHARGER_PARAMETER_1_IDE = 0;
public final int CHARGER_PARAMETER_1_DLC = 8;
public final double CHARGER_PARAMETER_1_CHARGER_IP_AC_VOLT_FACTOR = 0.01;
public final int CHARGER_PARAMETER_1_CANID_CHARGER_IP_AC_VOLT_STARTBIT = 0;
public final double CHARGER_PARAMETER_1_CANID_CHARGER_IP_AC_VOLT_OFFSET = 0.0;
public final double CHARGER_PARAMETER_1_CANID_CHARGER_IP_AC_VOLT_MIN = 0.0;
public final double CHARGER_PARAMETER_1_CANID_CHARGER_IP_AC_VOLT_MAX = 285.0;
public final double CHARGER_PARAMETER_1_CHARGER_IP_AC_CURRENT_FACTOR = 0.01;
public final int CHARGER_PARAMETER_1_CANID_CHARGER_IP_AC_CURRENT_STARTBIT = 16;
public final double CHARGER_PARAMETER_1_CANID_CHARGER_IP_AC_CURRENT_OFFSET = 0.0;
public final double CHARGER_PARAMETER_1_CANID_CHARGER_IP_AC_CURRENT_MIN = 0.0;
public final double CHARGER_PARAMETER_1_CANID_CHARGER_IP_AC_CURRENT_MAX = 100.0;
public final double CHARGER_PARAMETER_1_CHARGER_OP_DC_VOLT_FACTOR = 0.01;
public final int CHARGER_PARAMETER_1_CANID_CHARGER_OP_DC_VOLT_STARTBIT = 32;
public final double CHARGER_PARAMETER_1_CANID_CHARGER_OP_DC_VOLT_OFFSET = 0.0;
public final double CHARGER_PARAMETER_1_CANID_CHARGER_OP_DC_VOLT_MIN = 0.0;
public final double CHARGER_PARAMETER_1_CANID_CHARGER_OP_DC_VOLT_MAX = 150.0;
public final double CHARGER_PARAMETER_1_CHARGER_OP_DC_CURRENT_FACTOR = 0.01;
public final int CHARGER_PARAMETER_1_CANID_CHARGER_OP_DC_CURRENT_STARTBIT = 48;
public final double CHARGER_PARAMETER_1_CANID_CHARGER_OP_DC_CURRENT_OFFSET = 0.0;
public final double CHARGER_PARAMETER_1_CANID_CHARGER_OP_DC_CURRENT_MIN = 0.0;
public final double CHARGER_PARAMETER_1_CANID_CHARGER_OP_DC_CURRENT_MAX = 100.0;

public static class Charger_Parameter_1_t { 

  public intCharger_IP_AC_Volt;
  public longCharger_IP_AC_Current;
  public longCharger_OP_DC_Volt;
  public longCharger_OP_DC_Current;
}
/* public final int @OBC_HP_DCDC_PARAMETER_2 CAN MESSAGE = 423*/
public final int OBC_HP_DCDC_PARAMETER_2_ID = 423;
public final int OBC_HP_DCDC_PARAMETER_2_IDE = 0;
public final int OBC_HP_DCDC_PARAMETER_2_DLC = 8;
public final double OBC_HP_DCDC_PARAMETER_2_OBC_TEMP_FACTOR = 0.01;
public final int OBC_HP_DCDC_PARAMETER_2_CANID_OBC_TEMP_STARTBIT = 0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_OBC_TEMP_OFFSET = 0.0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_OBC_TEMP_MIN = 0.0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_OBC_TEMP_MAX = 200.0;
public final double OBC_HP_DCDC_PARAMETER_2_HP_DCDC_TEMP_FACTOR = 0.01;
public final int OBC_HP_DCDC_PARAMETER_2_CANID_HP_DCDC_TEMP_STARTBIT = 16;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_HP_DCDC_TEMP_OFFSET = 0.0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_HP_DCDC_TEMP_MIN = 0.0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_HP_DCDC_TEMP_MAX = 200.0;
public final double OBC_HP_DCDC_PARAMETER_2_OBC_OP_ENABLE_FACTOR = 1.0;
public final int OBC_HP_DCDC_PARAMETER_2_CANID_OBC_OP_ENABLE_STARTBIT = 32;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_OBC_OP_ENABLE_OFFSET = 0.0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_OBC_OP_ENABLE_MIN = 0.0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_OBC_OP_ENABLE_MAX = 1.0;
public final double OBC_HP_DCDC_PARAMETER_2_OBC_COOLANT_FAN_STATUS_FACTOR = 1.0;
public final int OBC_HP_DCDC_PARAMETER_2_CANID_OBC_COOLANT_FAN_STATUS_STARTBIT = 33;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_OBC_COOLANT_FAN_STATUS_OFFSET = 0.0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_OBC_COOLANT_FAN_STATUS_MIN = 0.0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_OBC_COOLANT_FAN_STATUS_MAX = 1.0;
public final double OBC_HP_DCDC_PARAMETER_2_CONTROL_PROXIMITY_STATUS_FACTOR = 1.0;
public final int OBC_HP_DCDC_PARAMETER_2_CANID_CONTROL_PROXIMITY_STATUS_STARTBIT = 34;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_CONTROL_PROXIMITY_STATUS_OFFSET = 0.0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_CONTROL_PROXIMITY_STATUS_MIN = 0.0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_CONTROL_PROXIMITY_STATUS_MAX = 1.0;
public final double OBC_HP_DCDC_PARAMETER_2_DCDC_CONV_OP_ENABLE_FACTOR = 1.0;
public final int OBC_HP_DCDC_PARAMETER_2_CANID_DCDC_CONV_OP_ENABLE_STARTBIT = 35;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_DCDC_CONV_OP_ENABLE_OFFSET = 0.0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_DCDC_CONV_OP_ENABLE_MIN = 0.0;
public final double OBC_HP_DCDC_PARAMETER_2_CANID_DCDC_CONV_OP_ENABLE_MAX = 1.0;

public static class OBC_HP_DCDC_Parameter_2_t { 

  public intOBC_temp;
  public longHP_DCDC_Temp;
  public longOBC_OP_Enable;
  public longOBC_Coolant_Fan_Status;
  public longControl_Proximity_status;
  public longDCDC_Conv_OP_Enable;
}
/* public final int @BMS_CELL_VOLTAGE_1 CAN MESSAGE = 435*/
public final int BMS_CELL_VOLTAGE_1_ID = 435;
public final int BMS_CELL_VOLTAGE_1_IDE = 0;
public final int BMS_CELL_VOLTAGE_1_DLC = 8;
public final double BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_1_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_1_STARTBIT = 0;
public final double BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_1_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_1_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_1_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_2_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_2_STARTBIT = 16;
public final double BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_2_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_2_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_2_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_3_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_3_STARTBIT = 32;
public final double BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_3_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_3_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_3_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_4_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_4_STARTBIT = 48;
public final double BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_4_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_4_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_4_MAX = 65.535;

public static class BMS_CELL_VOLTAGE_1_t { 

  public intCell_Voltage_Vcell_1;
  public longCell_Voltage_Vcell_2;
  public longCell_Voltage_Vcell_3;
  public longCell_Voltage_Vcell_4;
}
/* public final int @BMS_CELL_VOLTAGE_2 CAN MESSAGE = 436*/
public final int BMS_CELL_VOLTAGE_2_ID = 436;
public final int BMS_CELL_VOLTAGE_2_IDE = 0;
public final int BMS_CELL_VOLTAGE_2_DLC = 8;
public final double BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_5_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_5_STARTBIT = 0;
public final double BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_5_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_5_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_5_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_6_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_6_STARTBIT = 16;
public final double BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_6_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_6_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_6_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_7_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_7_STARTBIT = 32;
public final double BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_7_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_7_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_7_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_8_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_8_STARTBIT = 48;
public final double BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_8_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_8_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_8_MAX = 65.535;

public static class BMS_CELL_VOLTAGE_2_t { 

  public intCell_Voltage_Vcell_5;
  public longCell_Voltage_Vcell_6;
  public longCell_Voltage_Vcell_7;
  public longCell_Voltage_Vcell_8;
}
/* public final int @BMS_CELL_VOLTAGE_3 CAN MESSAGE = 437*/
public final int BMS_CELL_VOLTAGE_3_ID = 437;
public final int BMS_CELL_VOLTAGE_3_IDE = 0;
public final int BMS_CELL_VOLTAGE_3_DLC = 8;
public final double BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_9_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_9_STARTBIT = 0;
public final double BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_9_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_9_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_9_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_10_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_10_STARTBIT = 16;
public final double BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_10_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_10_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_10_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_11_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_11_STARTBIT = 32;
public final double BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_11_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_11_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_11_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_12_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_12_STARTBIT = 48;
public final double BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_12_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_12_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_12_MAX = 65.535;

public static class BMS_CELL_VOLTAGE_3_t { 

  public intCell_Voltage_Vcell_9;
  public longCell_Voltage_Vcell_10;
  public longCell_Voltage_Vcell_11;
  public longCell_Voltage_Vcell_12;
}
/* public final int @BMS_CELL_VOLTAGE_4 CAN MESSAGE = 438*/
public final int BMS_CELL_VOLTAGE_4_ID = 438;
public final int BMS_CELL_VOLTAGE_4_IDE = 0;
public final int BMS_CELL_VOLTAGE_4_DLC = 8;
public final double BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_13_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_13_STARTBIT = 0;
public final double BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_13_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_13_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_13_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_14_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_14_STARTBIT = 16;
public final double BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_14_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_14_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_14_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_15_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_15_STARTBIT = 32;
public final double BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_15_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_15_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_15_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_16_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_16_STARTBIT = 48;
public final double BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_16_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_16_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_16_MAX = 65.535;

public static class BMS_CELL_VOLTAGE_4_t { 

  public intCell_Voltage_Vcell_13;
  public longCell_Voltage_Vcell_14;
  public longCell_Voltage_Vcell_15;
  public longCell_Voltage_Vcell_16;
}
/* public final int @BMS_CELL_VOLTAGE_5 CAN MESSAGE = 439*/
public final int BMS_CELL_VOLTAGE_5_ID = 439;
public final int BMS_CELL_VOLTAGE_5_IDE = 0;
public final int BMS_CELL_VOLTAGE_5_DLC = 8;
public final double BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_17_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_17_STARTBIT = 0;
public final double BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_17_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_17_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_17_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_18_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_18_STARTBIT = 16;
public final double BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_18_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_18_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_18_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_19_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_19_STARTBIT = 32;
public final double BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_19_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_19_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_19_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_20_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_20_STARTBIT = 48;
public final double BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_20_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_20_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_20_MAX = 65.535;

public static class BMS_CELL_VOLTAGE_5_t { 

  public intCell_Voltage_Vcell_17;
  public longCell_Voltage_Vcell_18;
  public longCell_Voltage_Vcell_19;
  public longCell_Voltage_Vcell_20;
}
/* public final int @BMS_CELL_VOLTAGE_6 CAN MESSAGE = 440*/
public final int BMS_CELL_VOLTAGE_6_ID = 440;
public final int BMS_CELL_VOLTAGE_6_IDE = 0;
public final int BMS_CELL_VOLTAGE_6_DLC = 8;
public final double BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_21_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_21_STARTBIT = 0;
public final double BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_21_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_21_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_21_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_22_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_22_STARTBIT = 16;
public final double BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_22_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_22_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_22_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_23_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_23_STARTBIT = 32;
public final double BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_23_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_23_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_23_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_24_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_24_STARTBIT = 48;
public final double BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_24_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_24_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_24_MAX = 65.535;

public static class BMS_CELL_VOLTAGE_6_t { 

  public intCell_Voltage_Vcell_21;
  public longCell_Voltage_Vcell_22;
  public longCell_Voltage_Vcell_23;
  public longCell_Voltage_Vcell_24;
}
/* public final int @BMS_CELL_VOLTAGE_7 CAN MESSAGE = 441*/
public final int BMS_CELL_VOLTAGE_7_ID = 441;
public final int BMS_CELL_VOLTAGE_7_IDE = 0;
public final int BMS_CELL_VOLTAGE_7_DLC = 8;
public final double BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_25_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_25_STARTBIT = 0;
public final double BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_25_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_25_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_25_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_26_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_26_STARTBIT = 16;
public final double BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_26_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_26_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_26_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_27_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_27_STARTBIT = 32;
public final double BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_27_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_27_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_27_MAX = 65.535;
public final double BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_28_FACTOR = 0.001;
public final int BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_28_STARTBIT = 48;
public final double BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_28_OFFSET = 0.0;
public final double BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_28_MIN = 0.0;
public final double BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_28_MAX = 65.535;

public static class BMS_CELL_VOLTAGE_7_t { 

  public intCell_Voltage_Vcell_25;
  public longCell_Voltage_Vcell_26;
  public longCell_Voltage_Vcell_27;
  public longCell_Voltage_Vcell_28;
}
/* public final int @CHARGER_STATUS_INFO CAN MESSAGE = 545*/
public final int CHARGER_STATUS_INFO_ID = 545;
public final int CHARGER_STATUS_INFO_IDE = 0;
public final int CHARGER_STATUS_INFO_DLC = 8;
public final double CHARGER_STATUS_INFO_CHARGER_STATUS_SIGNAL_FACTOR = 1.0;
public final int CHARGER_STATUS_INFO_CANID_CHARGER_STATUS_SIGNAL_STARTBIT = 0;
public final double CHARGER_STATUS_INFO_CANID_CHARGER_STATUS_SIGNAL_OFFSET = 0.0;
public final double CHARGER_STATUS_INFO_CANID_CHARGER_STATUS_SIGNAL_MIN = 0.0;
public final double CHARGER_STATUS_INFO_CANID_CHARGER_STATUS_SIGNAL_MAX = 1.0;
public final double CHARGER_STATUS_INFO_CHARGER_MODE_FACTOR = 1.0;
public final int CHARGER_STATUS_INFO_CANID_CHARGER_MODE_STARTBIT = 1;
public final double CHARGER_STATUS_INFO_CANID_CHARGER_MODE_OFFSET = 0.0;
public final double CHARGER_STATUS_INFO_CANID_CHARGER_MODE_MIN = 0.0;
public final double CHARGER_STATUS_INFO_CANID_CHARGER_MODE_MAX = 15.0;

public static class Charger_status_Info_t { 

  public intCharger_Status_Signal;
  public longCharger_Mode;
}
/* public final int @MCU_DATA3 CAN MESSAGE = 561*/
public final int MCU_DATA3_ID = 561;
public final int MCU_DATA3_IDE = 0;
public final int MCU_DATA3_DLC = 8;
public final double MCU_DATA3_MCU_DC_CURRENT_FACTOR = 1.0;
public final int MCU_DATA3_CANID_MCU_DC_CURRENT_STARTBIT = 0;
public final double MCU_DATA3_CANID_MCU_DC_CURRENT_OFFSET = -1000.0;
public final double MCU_DATA3_CANID_MCU_DC_CURRENT_MIN = -1000.0;
public final double MCU_DATA3_CANID_MCU_DC_CURRENT_MAX = 1000.0;
public final double MCU_DATA3_MOTOR_TORQUE_FACTOR = 0.001;
public final int MCU_DATA3_CANID_MOTOR_TORQUE_STARTBIT = 16;
public final double MCU_DATA3_CANID_MOTOR_TORQUE_OFFSET = 0.0;
public final double MCU_DATA3_CANID_MOTOR_TORQUE_MIN = 0.0;
public final double MCU_DATA3_CANID_MOTOR_TORQUE_MAX = 65.0;
public final double MCU_DATA3_DISTANCE_CUURENT_TRIP_FACTOR = 1.0;
public final int MCU_DATA3_CANID_DISTANCE_CUURENT_TRIP_STARTBIT = 32;
public final double MCU_DATA3_CANID_DISTANCE_CUURENT_TRIP_OFFSET = 0.0;
public final double MCU_DATA3_CANID_DISTANCE_CUURENT_TRIP_MIN = 0.0;
public final double MCU_DATA3_CANID_DISTANCE_CUURENT_TRIP_MAX = 255.0;

public static class MCU_Data3_t { 

  public intMCU_DC_current;
  public longMotor_Torque;
  public longDistance_Cuurent_Trip;
}
/* public final int @MCU_DATA4 CAN MESSAGE = 562*/
public final int MCU_DATA4_ID = 562;
public final int MCU_DATA4_IDE = 0;
public final int MCU_DATA4_DLC = 8;
public final double MCU_DATA4_MOTOR_BEMF_FREQUENCY_FACTOR = 1.0;
public final int MCU_DATA4_CANID_MOTOR_BEMF_FREQUENCY_STARTBIT = 0;
public final double MCU_DATA4_CANID_MOTOR_BEMF_FREQUENCY_OFFSET = 0.0;
public final double MCU_DATA4_CANID_MOTOR_BEMF_FREQUENCY_MIN = 0.0;
public final double MCU_DATA4_CANID_MOTOR_BEMF_FREQUENCY_MAX = 1000.0;
public final double MCU_DATA4_POSITION_COUNTER_FACTOR = 1.0;
public final int MCU_DATA4_CANID_POSITION_COUNTER_STARTBIT = 10;
public final double MCU_DATA4_CANID_POSITION_COUNTER_OFFSET = 0.0;
public final double MCU_DATA4_CANID_POSITION_COUNTER_MIN = 0.0;
public final double MCU_DATA4_CANID_POSITION_COUNTER_MAX = 2047.0;
public final double MCU_DATA4_ROTOR_ANGLE_FACTOR = 1.0;
public final int MCU_DATA4_CANID_ROTOR_ANGLE_STARTBIT = 21;
public final double MCU_DATA4_CANID_ROTOR_ANGLE_OFFSET = 0.0;
public final double MCU_DATA4_CANID_ROTOR_ANGLE_MIN = 0.0;
public final double MCU_DATA4_CANID_ROTOR_ANGLE_MAX = 360.0;
public final double MCU_DATA4_VEHICLE_DIR_FLAG_FACTOR = 1.0;
public final int MCU_DATA4_CANID_VEHICLE_DIR_FLAG_STARTBIT = 57;
public final double MCU_DATA4_CANID_VEHICLE_DIR_FLAG_OFFSET = 0.0;
public final double MCU_DATA4_CANID_VEHICLE_DIR_FLAG_MIN = 0.0;
public final double MCU_DATA4_CANID_VEHICLE_DIR_FLAG_MAX = 1.0;

public static class MCU_Data4_t { 

  public intMotor_BEMF_Frequency;
  public longPosition_Counter;
  public longRotor_Angle;
  public longVehicle_Dir_flag;
}
/* public final int @MCU_DATA5 CAN MESSAGE = 563*/
public final int MCU_DATA5_ID = 563;
public final int MCU_DATA5_IDE = 0;
public final int MCU_DATA5_DLC = 8;
public final double MCU_DATA5_LIVE_POSITION_COUNTER_FACTOR = 1.0;
public final int MCU_DATA5_CANID_LIVE_POSITION_COUNTER_STARTBIT = 0;
public final double MCU_DATA5_CANID_LIVE_POSITION_COUNTER_OFFSET = 0.0;
public final double MCU_DATA5_CANID_LIVE_POSITION_COUNTER_MIN = 0.0;
public final double MCU_DATA5_CANID_LIVE_POSITION_COUNTER_MAX = 2048.0;
public final double MCU_DATA5_LIVE_PWM_ROTOR_ANGLE_FACTOR = 1.0;
public final int MCU_DATA5_CANID_LIVE_PWM_ROTOR_ANGLE_STARTBIT = 12;
public final double MCU_DATA5_CANID_LIVE_PWM_ROTOR_ANGLE_OFFSET = 0.0;
public final double MCU_DATA5_CANID_LIVE_PWM_ROTOR_ANGLE_MIN = 0.0;
public final double MCU_DATA5_CANID_LIVE_PWM_ROTOR_ANGLE_MAX = 360.0;
public final double MCU_DATA5_LIVE_Z_PULSE_COUNTER_FACTOR = 1.0;
public final int MCU_DATA5_CANID_LIVE_Z_PULSE_COUNTER_STARTBIT = 21;
public final double MCU_DATA5_CANID_LIVE_Z_PULSE_COUNTER_OFFSET = 0.0;
public final double MCU_DATA5_CANID_LIVE_Z_PULSE_COUNTER_MIN = 0.0;
public final double MCU_DATA5_CANID_LIVE_Z_PULSE_COUNTER_MAX = 999999.0;
public final double MCU_DATA5_REGEN_TORQUE_FACTOR = 0.1;
public final int MCU_DATA5_CANID_REGEN_TORQUE_STARTBIT = 41;
public final double MCU_DATA5_CANID_REGEN_TORQUE_OFFSET = 0.0;
public final double MCU_DATA5_CANID_REGEN_TORQUE_MIN = 0.0;
public final double MCU_DATA5_CANID_REGEN_TORQUE_MAX = 3000.0;

public static class MCU_Data5_t { 

  public intLive_Position_Counter;
  public longLive_PWM_Rotor_Angle;
  public longLive_Z_Pulse_Counter;
  public longRegen_Torque;
}
/* public final int @MCU_DATA6 CAN MESSAGE = 564*/
public final int MCU_DATA6_ID = 564;
public final int MCU_DATA6_IDE = 0;
public final int MCU_DATA6_DLC = 8;
public final double MCU_DATA6_R_PHASE_CURRENT_MCU_FACTOR = 0.1;
public final int MCU_DATA6_CANID_R_PHASE_CURRENT_MCU_STARTBIT = 0;
public final double MCU_DATA6_CANID_R_PHASE_CURRENT_MCU_OFFSET = 0.0;
public final double MCU_DATA6_CANID_R_PHASE_CURRENT_MCU_MIN = -32768.0;
public final double MCU_DATA6_CANID_R_PHASE_CURRENT_MCU_MAX = 32767.0;
public final double MCU_DATA6_Y_PHASE_CURRENT_MCU_FACTOR = 0.1;
public final int MCU_DATA6_CANID_Y_PHASE_CURRENT_MCU_STARTBIT = 16;
public final double MCU_DATA6_CANID_Y_PHASE_CURRENT_MCU_OFFSET = 0.0;
public final double MCU_DATA6_CANID_Y_PHASE_CURRENT_MCU_MIN = -32768.0;
public final double MCU_DATA6_CANID_Y_PHASE_CURRENT_MCU_MAX = 32767.0;
public final double MCU_DATA6_B_PHASE_CURRENT_MCU_FACTOR = 0.1;
public final int MCU_DATA6_CANID_B_PHASE_CURRENT_MCU_STARTBIT = 32;
public final double MCU_DATA6_CANID_B_PHASE_CURRENT_MCU_OFFSET = 0.0;
public final double MCU_DATA6_CANID_B_PHASE_CURRENT_MCU_MIN = -32768.0;
public final double MCU_DATA6_CANID_B_PHASE_CURRENT_MCU_MAX = 32767.0;

public static class MCU_Data6_t { 

  public intR_Phase_Current_MCU;
  public longY_Phase_Current_MCU;
  public longB_Phase_Current_MCU;
}
/* public final int @MCU_DATA1 CAN MESSAGE = 801*/
public final int MCU_DATA1_ID = 801;
public final int MCU_DATA1_IDE = 0;
public final int MCU_DATA1_DLC = 8;
public final double MCU_DATA1_VEHICLE_SPEED_KMPH_FACTOR = 0.1;
public final int MCU_DATA1_CANID_VEHICLE_SPEED_KMPH_STARTBIT = 0;
public final double MCU_DATA1_CANID_VEHICLE_SPEED_KMPH_OFFSET = 0.0;
public final double MCU_DATA1_CANID_VEHICLE_SPEED_KMPH_MIN = 0.0;
public final double MCU_DATA1_CANID_VEHICLE_SPEED_KMPH_MAX = 200.0;
public final double MCU_DATA1_MCU_TEMP_FACTOR = 0.01;
public final int MCU_DATA1_CANID_MCU_TEMP_STARTBIT = 16;
public final double MCU_DATA1_CANID_MCU_TEMP_OFFSET = 0.0;
public final double MCU_DATA1_CANID_MCU_TEMP_MIN = 0.0;
public final double MCU_DATA1_CANID_MCU_TEMP_MAX = 600.0;
public final double MCU_DATA1_MOTOR_TEMP_FACTOR = 0.01;
public final int MCU_DATA1_CANID_MOTOR_TEMP_STARTBIT = 32;
public final double MCU_DATA1_CANID_MOTOR_TEMP_OFFSET = 0.0;
public final double MCU_DATA1_CANID_MOTOR_TEMP_MIN = 0.0;
public final double MCU_DATA1_CANID_MOTOR_TEMP_MAX = 600.0;
public final double MCU_DATA1_MOTOR_RPM_FACTOR = 1.0;
public final int MCU_DATA1_CANID_MOTOR_RPM_STARTBIT = 48;
public final double MCU_DATA1_CANID_MOTOR_RPM_OFFSET = 0.0;
public final double MCU_DATA1_CANID_MOTOR_RPM_MIN = 0.0;
public final double MCU_DATA1_CANID_MOTOR_RPM_MAX = 65535.0;

public static class MCU_Data1_t { 

  public intVehicle_Speed_kmph;
  public longMCU_temp;
  public longMotor_temp;
  public longMotor_rpm;
}
/* public final int @MCU_DISCONNECT_ACK CAN MESSAGE = 817*/
public final int MCU_DISCONNECT_ACK_ID = 817;
public final int MCU_DISCONNECT_ACK_IDE = 0;
public final int MCU_DISCONNECT_ACK_DLC = 8;
public final double MCU_DISCONNECT_ACK_DISCONNECT_ACK_FACTOR = 1.0;
public final int MCU_DISCONNECT_ACK_CANID_DISCONNECT_ACK_STARTBIT = 0;
public final double MCU_DISCONNECT_ACK_CANID_DISCONNECT_ACK_OFFSET = 0.0;
public final double MCU_DISCONNECT_ACK_CANID_DISCONNECT_ACK_MIN = 0.0;
public final double MCU_DISCONNECT_ACK_CANID_DISCONNECT_ACK_MAX = 1.0;

public static class MCU_Disconnect_ACK_t { 

  public intDisconnect_ACK;
}
/* public final int @MCU_FAULT_DATA CAN MESSAGE = 833*/
public final int MCU_FAULT_DATA_ID = 833;
public final int MCU_FAULT_DATA_IDE = 0;
public final int MCU_FAULT_DATA_DLC = 8;
public final double MCU_FAULT_DATA_MOTOROC_PROTECT_U_PH_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_U_PH_STARTBIT = 0;
public final double MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_U_PH_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_U_PH_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_U_PH_MAX = 1.0;
public final double MCU_FAULT_DATA_MOTOROC_PROTECT_V_PH_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_V_PH_STARTBIT = 1;
public final double MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_V_PH_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_V_PH_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_V_PH_MAX = 1.0;
public final double MCU_FAULT_DATA_MOTOROC_PROTECT_W_PH_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_W_PH_STARTBIT = 2;
public final double MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_W_PH_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_W_PH_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_W_PH_MAX = 1.0;
public final double MCU_FAULT_DATA_MOTOROV_PROTECT_U_PH_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_U_PH_STARTBIT = 3;
public final double MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_U_PH_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_U_PH_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_U_PH_MAX = 1.0;
public final double MCU_FAULT_DATA_MOTOROV_PROTECT_V_PH_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_V_PH_STARTBIT = 4;
public final double MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_V_PH_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_V_PH_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_V_PH_MAX = 1.0;
public final double MCU_FAULT_DATA_MOTOROV_PROTECT_W_PH_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_W_PH_STARTBIT = 5;
public final double MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_W_PH_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_W_PH_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_W_PH_MAX = 1.0;
public final double MCU_FAULT_DATA_ENCODER_DISCONNECTION_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_ENCODER_DISCONNECTION_STARTBIT = 6;
public final double MCU_FAULT_DATA_CANID_ENCODER_DISCONNECTION_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_ENCODER_DISCONNECTION_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_ENCODER_DISCONNECTION_MAX = 1.0;
public final double MCU_FAULT_DATA_ENCODER_FAILURE_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_ENCODER_FAILURE_STARTBIT = 7;
public final double MCU_FAULT_DATA_CANID_ENCODER_FAILURE_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_ENCODER_FAILURE_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_ENCODER_FAILURE_MAX = 1.0;
public final double MCU_FAULT_DATA_DCBUS_UNDERVOLTAGE_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_DCBUS_UNDERVOLTAGE_STARTBIT = 8;
public final double MCU_FAULT_DATA_CANID_DCBUS_UNDERVOLTAGE_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_DCBUS_UNDERVOLTAGE_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_DCBUS_UNDERVOLTAGE_MAX = 1.0;
public final double MCU_FAULT_DATA_DCBUS_OVERVOLTAGE_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_DCBUS_OVERVOLTAGE_STARTBIT = 9;
public final double MCU_FAULT_DATA_CANID_DCBUS_OVERVOLTAGE_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_DCBUS_OVERVOLTAGE_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_DCBUS_OVERVOLTAGE_MAX = 1.0;
public final double MCU_FAULT_DATA_DCBUS_OVERCURRENT_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_DCBUS_OVERCURRENT_STARTBIT = 10;
public final double MCU_FAULT_DATA_CANID_DCBUS_OVERCURRENT_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_DCBUS_OVERCURRENT_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_DCBUS_OVERCURRENT_MAX = 1.0;
public final double MCU_FAULT_DATA_DCBUS_SHORTCIRCUIT_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_DCBUS_SHORTCIRCUIT_STARTBIT = 11;
public final double MCU_FAULT_DATA_CANID_DCBUS_SHORTCIRCUIT_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_DCBUS_SHORTCIRCUIT_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_DCBUS_SHORTCIRCUIT_MAX = 1.0;
public final double MCU_FAULT_DATA_DCBUS_REVERSEPOLARITY_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_DCBUS_REVERSEPOLARITY_STARTBIT = 12;
public final double MCU_FAULT_DATA_CANID_DCBUS_REVERSEPOLARITY_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_DCBUS_REVERSEPOLARITY_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_DCBUS_REVERSEPOLARITY_MAX = 1.0;
public final double MCU_FAULT_DATA_DCBUS_HVIL_FAIL_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_DCBUS_HVIL_FAIL_STARTBIT = 13;
public final double MCU_FAULT_DATA_CANID_DCBUS_HVIL_FAIL_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_DCBUS_HVIL_FAIL_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_DCBUS_HVIL_FAIL_MAX = 1.0;
public final double MCU_FAULT_DATA_PRECHRGE_FAIL_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_PRECHRGE_FAIL_STARTBIT = 14;
public final double MCU_FAULT_DATA_CANID_PRECHRGE_FAIL_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_PRECHRGE_FAIL_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_PRECHRGE_FAIL_MAX = 1.0;
public final double MCU_FAULT_DATA_MOTOR_REGEN_BREAK_FAULT_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MOTOR_REGEN_BREAK_FAULT_STARTBIT = 17;
public final double MCU_FAULT_DATA_CANID_MOTOR_REGEN_BREAK_FAULT_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOR_REGEN_BREAK_FAULT_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTOR_REGEN_BREAK_FAULT_MAX = 1.0;
public final double MCU_FAULT_DATA_RESERVED_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_RESERVED_STARTBIT = 19;
public final double MCU_FAULT_DATA_CANID_RESERVED_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_RESERVED_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_RESERVED_MAX = 1.0;
public final double MCU_FAULT_DATA_DC_BUS_CAPACITOR_OVERTEMP_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_DC_BUS_CAPACITOR_OVERTEMP_STARTBIT = 20;
public final double MCU_FAULT_DATA_CANID_DC_BUS_CAPACITOR_OVERTEMP_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_DC_BUS_CAPACITOR_OVERTEMP_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_DC_BUS_CAPACITOR_OVERTEMP_MAX = 1.0;
public final double MCU_FAULT_DATA_LV_SUPPLYOVERVOLTAGE_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_LV_SUPPLYOVERVOLTAGE_STARTBIT = 21;
public final double MCU_FAULT_DATA_CANID_LV_SUPPLYOVERVOLTAGE_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_LV_SUPPLYOVERVOLTAGE_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_LV_SUPPLYOVERVOLTAGE_MAX = 1.0;
public final double MCU_FAULT_DATA_LV_SUPPLYUNDERVOLTAGE_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_LV_SUPPLYUNDERVOLTAGE_STARTBIT = 22;
public final double MCU_FAULT_DATA_CANID_LV_SUPPLYUNDERVOLTAGE_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_LV_SUPPLYUNDERVOLTAGE_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_LV_SUPPLYUNDERVOLTAGE_MAX = 1.0;
public final double MCU_FAULT_DATA_LV_SUPPLYOVERCURRENT_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_LV_SUPPLYOVERCURRENT_STARTBIT = 23;
public final double MCU_FAULT_DATA_CANID_LV_SUPPLYOVERCURRENT_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_LV_SUPPLYOVERCURRENT_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_LV_SUPPLYOVERCURRENT_MAX = 1.0;
public final double MCU_FAULT_DATA_LV_SUPPLYSHORTCIRCUIT_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_LV_SUPPLYSHORTCIRCUIT_STARTBIT = 24;
public final double MCU_FAULT_DATA_CANID_LV_SUPPLYSHORTCIRCUIT_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_LV_SUPPLYSHORTCIRCUIT_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_LV_SUPPLYSHORTCIRCUIT_MAX = 1.0;
public final double MCU_FAULT_DATA_MOTORPHASEDISCONNECT_UPHASE_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_UPHASE_STARTBIT = 25;
public final double MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_UPHASE_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_UPHASE_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_UPHASE_MAX = 1.0;
public final double MCU_FAULT_DATA_MOTORPHASEDISCONNECT_VPHASE_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_VPHASE_STARTBIT = 26;
public final double MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_VPHASE_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_VPHASE_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_VPHASE_MAX = 1.0;
public final double MCU_FAULT_DATA_MOTORPHASEDISCONNECT_WPHASE_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_WPHASE_STARTBIT = 27;
public final double MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_WPHASE_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_WPHASE_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_WPHASE_MAX = 1.0;
public final double MCU_FAULT_DATA_MOTORWINDING_TEMP_SENSOR_FAIL_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MOTORWINDING_TEMP_SENSOR_FAIL_STARTBIT = 28;
public final double MCU_FAULT_DATA_CANID_MOTORWINDING_TEMP_SENSOR_FAIL_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTORWINDING_TEMP_SENSOR_FAIL_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MOTORWINDING_TEMP_SENSOR_FAIL_MAX = 1.0;
public final double MCU_FAULT_DATA_MCU_MOSFET_TEMP_SENSOR_FAIL_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MCU_MOSFET_TEMP_SENSOR_FAIL_STARTBIT = 29;
public final double MCU_FAULT_DATA_CANID_MCU_MOSFET_TEMP_SENSOR_FAIL_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MCU_MOSFET_TEMP_SENSOR_FAIL_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MCU_MOSFET_TEMP_SENSOR_FAIL_MAX = 1.0;
public final double MCU_FAULT_DATA_MCUDC_BUS_C_TEMP_SENS_FAIL_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MCUDC_BUS_C_TEMP_SENS_FAIL_STARTBIT = 30;
public final double MCU_FAULT_DATA_CANID_MCUDC_BUS_C_TEMP_SENS_FAIL_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MCUDC_BUS_C_TEMP_SENS_FAIL_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MCUDC_BUS_C_TEMP_SENS_FAIL_MAX = 1.0;
public final double MCU_FAULT_DATA_MCU_CALIBRATION_FAIL_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MCU_CALIBRATION_FAIL_STARTBIT = 31;
public final double MCU_FAULT_DATA_CANID_MCU_CALIBRATION_FAIL_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MCU_CALIBRATION_FAIL_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MCU_CALIBRATION_FAIL_MAX = 1.0;
public final double MCU_FAULT_DATA_MCU_FAULT_KL30_FAULT_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MCU_FAULT_KL30_FAULT_STARTBIT = 35;
public final double MCU_FAULT_DATA_CANID_MCU_FAULT_KL30_FAULT_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MCU_FAULT_KL30_FAULT_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MCU_FAULT_KL30_FAULT_MAX = 1.0;
public final double MCU_FAULT_DATA_MCU_FAULT_MACHINE_TEMP_LOW_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MCU_FAULT_MACHINE_TEMP_LOW_STARTBIT = 36;
public final double MCU_FAULT_DATA_CANID_MCU_FAULT_MACHINE_TEMP_LOW_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MCU_FAULT_MACHINE_TEMP_LOW_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MCU_FAULT_MACHINE_TEMP_LOW_MAX = 1.0;
public final double MCU_FAULT_DATA_MCU_FAULT_BOARD_TEMP_LOW_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MCU_FAULT_BOARD_TEMP_LOW_STARTBIT = 37;
public final double MCU_FAULT_DATA_CANID_MCU_FAULT_BOARD_TEMP_LOW_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MCU_FAULT_BOARD_TEMP_LOW_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MCU_FAULT_BOARD_TEMP_LOW_MAX = 1.0;
public final double MCU_FAULT_DATA_MCU_FAULT_ROTOR_STALL_FACTOR = 1.0;
public final int MCU_FAULT_DATA_CANID_MCU_FAULT_ROTOR_STALL_STARTBIT = 38;
public final double MCU_FAULT_DATA_CANID_MCU_FAULT_ROTOR_STALL_OFFSET = 0.0;
public final double MCU_FAULT_DATA_CANID_MCU_FAULT_ROTOR_STALL_MIN = 0.0;
public final double MCU_FAULT_DATA_CANID_MCU_FAULT_ROTOR_STALL_MAX = 1.0;

public static class MCU_Fault_Data_t { 

  public intMotorOC_protect_U_ph;
  public longMotorOC_protect_V_ph;
  public longMotorOC_protect_W_ph;
  public longMotorOV_protect_U_ph;
  public longMotorOV_protect_V_ph;
  public longMotorOV_protect_W_ph;
  public longEncoder_Disconnection;
  public longEncoder_Failure;
  public longDCbus_undervoltage;
  public longDCbus_overvoltage;
  public longDCbus_overcurrent;
  public longDCbus_shortcircuit;
  public longDCbus_reversepolarity;
  public longDCbus_HVIL_Fail;
  public longPrechrge_fail;
  public longMotor_regen_break_fault;
  public longReserved;
  public longDc_bus_capacitor_Overtemp;
  public longLV_supplyOvervoltage;
  public longLV_supplyUndervoltage;
  public longLV_supplyOvercurrent;
  public longLV_supplyshortcircuit;
  public longMotorphasedisconnect_Uphase;
  public longMotorphasedisconnect_Vphase;
  public longMotorphasedisconnect_Wphase;
  public longMotorwinding_temp_sensor_fail;
  public longMCU_Mosfet_temp_sensor_fail;
  public longMCUDC_bus_C_temp_sens_fail;
  public longMCU_calibration_fail;
  public longMCU_fault_KL30_Fault;
  public longMCU_fault_Machine_temp_low;
  public longMCU_fault_Board_temp_low;
  public longMCU_fault_rotor_stall;
}
/* public final int @MCU_FAULT_DATA2 CAN MESSAGE = 834*/
public final int MCU_FAULT_DATA2_ID = 834;
public final int MCU_FAULT_DATA2_IDE = 0;
public final int MCU_FAULT_DATA2_DLC = 8;
public final double MCU_FAULT_DATA2_MCU_OVER_TEMP_WARNING_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_OVER_TEMP_WARNING_STARTBIT = 0;
public final double MCU_FAULT_DATA2_CANID_MCU_OVER_TEMP_WARNING_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_OVER_TEMP_WARNING_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_OVER_TEMP_WARNING_MAX = 1.0;
public final double MCU_FAULT_DATA2_MOTOR_OVER_TEMP_WARNING_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MOTOR_OVER_TEMP_WARNING_STARTBIT = 1;
public final double MCU_FAULT_DATA2_CANID_MOTOR_OVER_TEMP_WARNING_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MOTOR_OVER_TEMP_WARNING_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MOTOR_OVER_TEMP_WARNING_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_OVERSPEED_FAULT_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_OVERSPEED_FAULT_STARTBIT = 35;
public final double MCU_FAULT_DATA2_CANID_MCU_OVERSPEED_FAULT_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_OVERSPEED_FAULT_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_OVERSPEED_FAULT_MAX = 1.0;
public final double MCU_FAULT_DATA2_REGEN_FAILURE_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_REGEN_FAILURE_STARTBIT = 36;
public final double MCU_FAULT_DATA2_CANID_REGEN_FAILURE_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_REGEN_FAILURE_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_REGEN_FAILURE_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_DC_BUS_V_SENSOR_STG_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_DC_BUS_V_SENSOR_STG_STARTBIT = 42;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_DC_BUS_V_SENSOR_STG_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_DC_BUS_V_SENSOR_STG_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_DC_BUS_V_SENSOR_STG_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_DC_BUS_V_SENSOR_STB_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_DC_BUS_V_SENSOR_STB_STARTBIT = 43;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_DC_BUS_V_SENSOR_STB_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_DC_BUS_V_SENSOR_STB_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_DC_BUS_V_SENSOR_STB_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_KL30_SENSOR_STG_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_SENSOR_STG_STARTBIT = 44;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_SENSOR_STG_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_SENSOR_STG_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_SENSOR_STG_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_KL30_SENSOR_STB_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_SENSOR_STB_STARTBIT = 45;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_SENSOR_STB_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_SENSOR_STB_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_SENSOR_STB_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_BOARDTEMP_SENSOR_STG_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_BOARDTEMP_SENSOR_STG_STARTBIT = 46;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BOARDTEMP_SENSOR_STG_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BOARDTEMP_SENSOR_STG_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BOARDTEMP_SENSOR_STG_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_BOARDTEMP_SENSOR_STB_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_BOARDTEMP_SENSOR_STB_STARTBIT = 47;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BOARDTEMP_SENSOR_STB_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BOARDTEMP_SENSOR_STB_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BOARDTEMP_SENSOR_STB_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_RPHASE_STG_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_RPHASE_STG_STARTBIT = 48;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_RPHASE_STG_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_RPHASE_STG_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_RPHASE_STG_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_RPASE_STB_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_RPASE_STB_STARTBIT = 49;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_RPASE_STB_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_RPASE_STB_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_RPASE_STB_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_YPHASE_STG_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_YPHASE_STG_STARTBIT = 50;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_YPHASE_STG_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_YPHASE_STG_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_YPHASE_STG_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_YPHASE_STB_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_YPHASE_STB_STARTBIT = 51;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_YPHASE_STB_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_YPHASE_STB_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_YPHASE_STB_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_BPHASE_STG_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_BPHASE_STG_STARTBIT = 52;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BPHASE_STG_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BPHASE_STG_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BPHASE_STG_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_BPHASE_STB_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_BPHASE_STB_STARTBIT = 53;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BPHASE_STB_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BPHASE_STB_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BPHASE_STB_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_DC_CURRENT_SENSOR_STG_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_DC_CURRENT_SENSOR_STG_STARTBIT = 54;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_DC_CURRENT_SENSOR_STG_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_DC_CURRENT_SENSOR_STG_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_DC_CURRENT_SENSOR_STG_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_DC_CURRENT_SENSOR_STB_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_DC_CURRENT_SENSOR_STB_STARTBIT = 55;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_DC_CURRENT_SENSOR_STB_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_DC_CURRENT_SENSOR_STB_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_DC_CURRENT_SENSOR_STB_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_BUCKCONVERTER_12V_STB_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_BUCKCONVERTER_12V_STB_STARTBIT = 56;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BUCKCONVERTER_12V_STB_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BUCKCONVERTER_12V_STB_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BUCKCONVERTER_12V_STB_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_BUCKCONV_12V_STG_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_BUCKCONV_12V_STG_STARTBIT = 57;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BUCKCONV_12V_STG_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BUCKCONV_12V_STG_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_BUCKCONV_12V_STG_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_BUCKCONV_5V_OVERV_CUTOFF_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_BUCKCONV_5V_OVERV_CUTOFF_STARTBIT = 58;
public final double MCU_FAULT_DATA2_CANID_MCU_BUCKCONV_5V_OVERV_CUTOFF_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_BUCKCONV_5V_OVERV_CUTOFF_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_BUCKCONV_5V_OVERV_CUTOFF_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_BUCKCONV_5V_UNDERV_CUTOFF_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_BUCKCONV_5V_UNDERV_CUTOFF_STARTBIT = 59;
public final double MCU_FAULT_DATA2_CANID_MCU_BUCKCONV_5V_UNDERV_CUTOFF_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_BUCKCONV_5V_UNDERV_CUTOFF_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_BUCKCONV_5V_UNDERV_CUTOFF_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_MOSFET_TEMP_HIGH_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_TEMP_HIGH_STARTBIT = 60;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_TEMP_HIGH_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_TEMP_HIGH_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_TEMP_HIGH_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_MOSFET_STG_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_STG_STARTBIT = 61;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_STG_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_STG_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_STG_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_MOSFET_STB_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_STB_STARTBIT = 62;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_STB_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_STB_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_STB_MAX = 1.0;
public final double MCU_FAULT_DATA2_MCU_FLT_KL30_HIGH_FACTOR = 1.0;
public final int MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_HIGH_STARTBIT = 63;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_HIGH_OFFSET = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_HIGH_MIN = 0.0;
public final double MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_HIGH_MAX = 1.0;

public static class MCU_Fault_Data2_t { 

  public intMCU_Over_temp_warning;
  public longMotor_Over_temp_warning;
  public longMCU_overspeed_fault;
  public longRegen_Failure;
  public longMCU_Flt_DC_bus_V_Sensor_STG;
  public longMCU_Flt_DC_bus_V_Sensor_STB;
  public longMCU_Flt_KL30_Sensor_STG;
  public longMCU_Flt_KL30_Sensor_STB;
  public longMCU_Flt_BoardTemp_Sensor_STG;
  public longMCU_Flt_BoardTemp_Sensor_STB;
  public longMCU_Flt_Rphase_STG;
  public longMCU_Flt_Rpase_STB;
  public longMCU_Flt_Yphase_STG;
  public longMCU_Flt_Yphase_STB;
  public longMCU_Flt_Bphase_STG;
  public longMCU_Flt_Bphase_STB;
  public longMCU_Flt_DC_Current_Sensor_STG;
  public longMCU_Flt_DC_Current_Sensor_STB;
  public longMCU_Flt_BuckConverter_12V_STB;
  public longMCU_Flt_BuckConv_12V_STG;
  public longMCU_BuckConv_5V_overV_Cutoff;
  public longMCU_BuckConv_5V_underV_Cutoff;
  public longMCU_Flt_MOSFET_Temp_High;
  public longMCU_Flt_MOSFET_STG;
  public longMCU_Flt_MOSFET_STB;
  public longMCU_Flt_KL30_high;
}
/* public final int @DISPLAY_INFO CAN MESSAGE = 865*/
public final int DISPLAY_INFO_ID = 865;
public final int DISPLAY_INFO_IDE = 0;
public final int DISPLAY_INFO_DLC = 8;
public final double DISPLAY_INFO_SIDE_STAND_STATUS_FACTOR = 1.0;
public final int DISPLAY_INFO_CANID_SIDE_STAND_STATUS_STARTBIT = 0;
public final double DISPLAY_INFO_CANID_SIDE_STAND_STATUS_OFFSET = 0.0;
public final double DISPLAY_INFO_CANID_SIDE_STAND_STATUS_MIN = 0.0;
public final double DISPLAY_INFO_CANID_SIDE_STAND_STATUS_MAX = 7.0;
public final double DISPLAY_INFO_DISPLAY_SOC_FACTOR = 1.0;
public final int DISPLAY_INFO_CANID_DISPLAY_SOC_STARTBIT = 3;
public final double DISPLAY_INFO_CANID_DISPLAY_SOC_OFFSET = 0.0;
public final double DISPLAY_INFO_CANID_DISPLAY_SOC_MIN = 0.0;
public final double DISPLAY_INFO_CANID_DISPLAY_SOC_MAX = 255.0;
public final double DISPLAY_INFO_VEHICLE_RANGE_FACTOR = 1.0;
public final int DISPLAY_INFO_CANID_VEHICLE_RANGE_STARTBIT = 11;
public final double DISPLAY_INFO_CANID_VEHICLE_RANGE_OFFSET = 0.0;
public final double DISPLAY_INFO_CANID_VEHICLE_RANGE_MIN = 0.0;
public final double DISPLAY_INFO_CANID_VEHICLE_RANGE_MAX = 255.0;
public final double DISPLAY_INFO_INDICATORS_TTL_FACTOR = 1.0;
public final int DISPLAY_INFO_CANID_INDICATORS_TTL_STARTBIT = 19;
public final double DISPLAY_INFO_CANID_INDICATORS_TTL_OFFSET = 0.0;
public final double DISPLAY_INFO_CANID_INDICATORS_TTL_MIN = 0.0;
public final double DISPLAY_INFO_CANID_INDICATORS_TTL_MAX = 4.0;
public final double DISPLAY_INFO_FRONTLIGHT_TTL_FACTOR = 1.0;
public final int DISPLAY_INFO_CANID_FRONTLIGHT_TTL_STARTBIT = 23;
public final double DISPLAY_INFO_CANID_FRONTLIGHT_TTL_OFFSET = 0.0;
public final double DISPLAY_INFO_CANID_FRONTLIGHT_TTL_MIN = 0.0;
public final double DISPLAY_INFO_CANID_FRONTLIGHT_TTL_MAX = 15.0;
public final double DISPLAY_INFO_CHARGE_TTL_FACTOR = 1.0;
public final int DISPLAY_INFO_CANID_CHARGE_TTL_STARTBIT = 27;
public final double DISPLAY_INFO_CANID_CHARGE_TTL_OFFSET = 0.0;
public final double DISPLAY_INFO_CANID_CHARGE_TTL_MIN = 0.0;
public final double DISPLAY_INFO_CANID_CHARGE_TTL_MAX = 7.0;
public final double DISPLAY_INFO_DRL_LAMP_TTL_FACTOR = 1.0;
public final int DISPLAY_INFO_CANID_DRL_LAMP_TTL_STARTBIT = 30;
public final double DISPLAY_INFO_CANID_DRL_LAMP_TTL_OFFSET = 0.0;
public final double DISPLAY_INFO_CANID_DRL_LAMP_TTL_MIN = 0.0;
public final double DISPLAY_INFO_CANID_DRL_LAMP_TTL_MAX = 1.0;
public final double DISPLAY_INFO_LOW_BATTERY_ALERT_TTL_FACTOR = 1.0;
public final int DISPLAY_INFO_CANID_LOW_BATTERY_ALERT_TTL_STARTBIT = 31;
public final double DISPLAY_INFO_CANID_LOW_BATTERY_ALERT_TTL_OFFSET = 0.0;
public final double DISPLAY_INFO_CANID_LOW_BATTERY_ALERT_TTL_MIN = 0.0;
public final double DISPLAY_INFO_CANID_LOW_BATTERY_ALERT_TTL_MAX = 1.0;
public final double DISPLAY_INFO_DISPLAY_SPEED_FACTOR = 1.0;
public final int DISPLAY_INFO_CANID_DISPLAY_SPEED_STARTBIT = 32;
public final double DISPLAY_INFO_CANID_DISPLAY_SPEED_OFFSET = 0.0;
public final double DISPLAY_INFO_CANID_DISPLAY_SPEED_MIN = 0.5;
public final double DISPLAY_INFO_CANID_DISPLAY_SPEED_MAX = 150.0;

public static class Display_info_t { 

  public intSide_Stand_Status;
  public longDisplay_SoC;
  public longVehicle_Range;
  public longIndicators_TTL;
  public longFrontLight_TTL;
  public longCharge_TTL;
  public longDRL_Lamp_TTL;
  public longLow_Battery_Alert_TTL;
  public longDisplay_Speed;
}
/* public final int @ENVIRONMENT_DATA CAN MESSAGE = 881*/
public final int ENVIRONMENT_DATA_ID = 881;
public final int ENVIRONMENT_DATA_IDE = 0;
public final int ENVIRONMENT_DATA_DLC = 8;
public final double ENVIRONMENT_DATA_AMBIENT_LIGHT_SENSOR_VALUE_FACTOR = 2.0;
public final int ENVIRONMENT_DATA_CANID_AMBIENT_LIGHT_SENSOR_VALUE_STARTBIT = 0;
public final double ENVIRONMENT_DATA_CANID_AMBIENT_LIGHT_SENSOR_VALUE_OFFSET = 0.0;
public final double ENVIRONMENT_DATA_CANID_AMBIENT_LIGHT_SENSOR_VALUE_MIN = 0.0;
public final double ENVIRONMENT_DATA_CANID_AMBIENT_LIGHT_SENSOR_VALUE_MAX = 131070.0;
public final double ENVIRONMENT_DATA_AMBIENT_TEMP_SENSOR_VALUE_FACTOR = 1.0;
public final int ENVIRONMENT_DATA_CANID_AMBIENT_TEMP_SENSOR_VALUE_STARTBIT = 16;
public final double ENVIRONMENT_DATA_CANID_AMBIENT_TEMP_SENSOR_VALUE_OFFSET = 0.0;
public final double ENVIRONMENT_DATA_CANID_AMBIENT_TEMP_SENSOR_VALUE_MIN = 0.0;
public final double ENVIRONMENT_DATA_CANID_AMBIENT_TEMP_SENSOR_VALUE_MAX = 65535.0;

public static class Environment_Data_t { 

  public intAmbient_Light_Sensor_Value;
  public longAmbient_Temp_Sensor_Value;
}
/* public final int @BMS_FAULT_1 CAN MESSAGE = 1054*/
public final int BMS_FAULT_1_ID = 1054;
public final int BMS_FAULT_1_IDE = 0;
public final int BMS_FAULT_1_DLC = 8;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL1_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL1_STARTBIT = 0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL1_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL1_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL1_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL2_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL2_STARTBIT = 1;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL2_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL2_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL2_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL3_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL3_STARTBIT = 2;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL3_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL3_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL3_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL4_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL4_STARTBIT = 3;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL4_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL4_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL4_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL5_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL5_STARTBIT = 4;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL5_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL5_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL5_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL6_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL6_STARTBIT = 5;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL6_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL6_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL6_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL7_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL7_STARTBIT = 6;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL7_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL7_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL7_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL8_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL8_STARTBIT = 7;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL8_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL8_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL8_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL9_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL9_STARTBIT = 8;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL9_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL9_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL9_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL10_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL10_STARTBIT = 9;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL10_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL10_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL10_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL11_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL11_STARTBIT = 10;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL11_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL11_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL11_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL12_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL12_STARTBIT = 11;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL12_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL12_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL12_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL13_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL13_STARTBIT = 12;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL13_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL13_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL13_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL14_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL14_STARTBIT = 13;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL14_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL14_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL14_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL15_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL15_STARTBIT = 14;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL15_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL15_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL15_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL16_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL16_STARTBIT = 15;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL16_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL16_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL16_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL17_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL17_STARTBIT = 16;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL17_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL17_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL17_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL18_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL18_STARTBIT = 17;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL18_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL18_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL18_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL19_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL19_STARTBIT = 18;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL19_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL19_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL19_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL20_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL20_STARTBIT = 19;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL20_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL20_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL20_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL21_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL21_STARTBIT = 20;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL21_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL21_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL21_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL22_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL22_STARTBIT = 21;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL22_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL22_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL22_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL23_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL23_STARTBIT = 22;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL23_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL23_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL23_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL24_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL24_STARTBIT = 23;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL24_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL24_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL24_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL25_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL25_STARTBIT = 24;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL25_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL25_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL25_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL26_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL26_STARTBIT = 25;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL26_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL26_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL26_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL27_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL27_STARTBIT = 26;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL27_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL27_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL27_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL28_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL28_STARTBIT = 27;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL28_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL28_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL28_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL1_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL1_STARTBIT = 28;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL1_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL1_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL1_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL2_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL2_STARTBIT = 29;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL2_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL2_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL2_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL3_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL3_STARTBIT = 30;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL3_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL3_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL3_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL4_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL4_STARTBIT = 31;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL4_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL4_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL4_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL5_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL5_STARTBIT = 32;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL5_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL5_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL5_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL6_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL6_STARTBIT = 33;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL6_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL6_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL6_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL7_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL7_STARTBIT = 34;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL7_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL7_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL7_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL8_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL8_STARTBIT = 35;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL8_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL8_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL8_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL9_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL9_STARTBIT = 36;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL9_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL9_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL9_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL10_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL10_STARTBIT = 37;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL10_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL10_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL10_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL11_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL11_STARTBIT = 38;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL11_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL11_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL11_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL12_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL12_STARTBIT = 39;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL12_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL12_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL12_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL13_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL13_STARTBIT = 40;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL13_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL13_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL13_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL14_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL14_STARTBIT = 41;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL14_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL14_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL14_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL15_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL15_STARTBIT = 42;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL15_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL15_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL15_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL16_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL16_STARTBIT = 43;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL16_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL16_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL16_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL17_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL17_STARTBIT = 44;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL17_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL17_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL17_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL18_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL18_STARTBIT = 45;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL18_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL18_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL18_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL19_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL19_STARTBIT = 46;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL19_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL19_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL19_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL20_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL20_STARTBIT = 47;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL20_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL20_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL20_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL21_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL21_STARTBIT = 48;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL21_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL21_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL21_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL22_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL22_STARTBIT = 49;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL22_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL22_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL22_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL23_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL23_STARTBIT = 50;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL23_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL23_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL23_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL24_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL24_STARTBIT = 51;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL24_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL24_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL24_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL25_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL25_STARTBIT = 52;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL25_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL25_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL25_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL26_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL26_STARTBIT = 53;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL26_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL26_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL26_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL27_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL27_STARTBIT = 54;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL27_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL27_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL27_MAX = 1.0;
public final double BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL28_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL28_STARTBIT = 55;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL28_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL28_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL28_MAX = 1.0;
public final double BMS_FAULT_1_BMS_BATTERYPACKTEMP_1_SENSFAIL_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_1_SENSFAIL_STARTBIT = 56;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_1_SENSFAIL_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_1_SENSFAIL_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_1_SENSFAIL_MAX = 1.0;
public final double BMS_FAULT_1_BMS_BATTERYPACKTEMP_2_SENSFAIL_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_2_SENSFAIL_STARTBIT = 57;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_2_SENSFAIL_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_2_SENSFAIL_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_2_SENSFAIL_MAX = 1.0;
public final double BMS_FAULT_1_BMS_BATTERYPACKTEMP_3_SENSFAIL_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_3_SENSFAIL_STARTBIT = 58;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_3_SENSFAIL_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_3_SENSFAIL_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_3_SENSFAIL_MAX = 1.0;
public final double BMS_FAULT_1_BMS_BATTERYPACKTEMP_4_SENSFAIL_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_4_SENSFAIL_STARTBIT = 59;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_4_SENSFAIL_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_4_SENSFAIL_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_4_SENSFAIL_MAX = 1.0;
public final double BMS_FAULT_1_BMS_BATTERYPACKTEMP_5_SENSFAIL_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_5_SENSFAIL_STARTBIT = 60;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_5_SENSFAIL_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_5_SENSFAIL_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_5_SENSFAIL_MAX = 1.0;
public final double BMS_FAULT_1_BMS_BATTERYPACKTEMP_6_SENSFAIL_FACTOR = 1.0;
public final int BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_6_SENSFAIL_STARTBIT = 61;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_6_SENSFAIL_OFFSET = 0.0;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_6_SENSFAIL_MIN = 0.0;
public final double BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_6_SENSFAIL_MAX = 1.0;

public static class BMS_Fault_1_t { 

  public intBMS_V_Sensor_Failure_Cell1;
  public longBMS_V_Sensor_Failure_Cell2;
  public longBMS_V_Sensor_Failure_Cell3;
  public longBMS_V_Sensor_Failure_Cell4;
  public longBMS_V_Sensor_Failure_Cell5;
  public longBMS_V_Sensor_Failure_Cell6;
  public longBMS_V_Sensor_Failure_Cell7;
  public longBMS_V_Sensor_Failure_Cell8;
  public longBMS_V_Sensor_Failure_Cell9;
  public longBMS_V_Sensor_Failure_Cell10;
  public longBMS_V_Sensor_Failure_Cell11;
  public longBMS_V_Sensor_Failure_Cell12;
  public longBMS_V_Sensor_Failure_Cell13;
  public longBMS_V_Sensor_Failure_Cell14;
  public longBMS_V_Sensor_Failure_Cell15;
  public longBMS_V_Sensor_Failure_Cell16;
  public longBMS_V_Sensor_Failure_Cell17;
  public longBMS_V_Sensor_Failure_Cell18;
  public longBMS_V_Sensor_Failure_Cell19;
  public longBMS_V_Sensor_Failure_Cell20;
  public longBMS_V_Sensor_Failure_Cell21;
  public longBMS_V_Sensor_Failure_Cell22;
  public longBMS_V_Sensor_Failure_Cell23;
  public longBMS_V_Sensor_Failure_Cell24;
  public longBMS_V_Sensor_Failure_Cell25;
  public longBMS_V_Sensor_Failure_Cell26;
  public longBMS_V_Sensor_Failure_Cell27;
  public longBMS_V_Sensor_Failure_Cell28;
  public longBMS_V_Out_of_Range_Cell1;
  public longBMS_V_Out_of_Range_Cell2;
  public longBMS_V_Out_of_Range_Cell3;
  public longBMS_V_Out_of_Range_Cell4;
  public longBMS_V_Out_of_Range_Cell5;
  public longBMS_V_Out_of_Range_Cell6;
  public longBMS_V_Out_of_Range_Cell7;
  public longBMS_V_Out_of_Range_Cell8;
  public longBMS_V_Out_of_Range_Cell9;
  public longBMS_V_Out_of_Range_Cell10;
  public longBMS_V_Out_of_Range_Cell11;
  public longBMS_V_Out_of_Range_Cell12;
  public longBMS_V_Out_of_Range_Cell13;
  public longBMS_V_Out_of_Range_Cell14;
  public longBMS_V_Out_of_Range_Cell15;
  public longBMS_V_Out_of_Range_Cell16;
  public longBMS_V_Out_of_Range_Cell17;
  public longBMS_V_Out_of_Range_Cell18;
  public longBMS_V_Out_of_Range_Cell19;
  public longBMS_V_Out_of_Range_Cell20;
  public longBMS_V_Out_of_Range_Cell21;
  public longBMS_V_Out_of_Range_Cell22;
  public longBMS_V_Out_of_Range_Cell23;
  public longBMS_V_Out_of_Range_Cell24;
  public longBMS_V_Out_of_Range_Cell25;
  public longBMS_V_Out_of_Range_Cell26;
  public longBMS_V_Out_of_Range_Cell27;
  public longBMS_V_Out_of_Range_Cell28;
  public longBMS_BatteryPackTemp_1_SensFail;
  public longBMS_BatteryPackTemp_2_SensFail;
  public longBMS_BatteryPackTemp_3_SensFail;
  public longBMS_BatteryPackTemp_4_SensFail;
  public longBMS_BatteryPackTemp_5_SensFail;
  public longBMS_BatteryPackTemp_6_SensFail;
}
/* public final int @BMS_FAULT_2 CAN MESSAGE = 1055*/
public final int BMS_FAULT_2_ID = 1055;
public final int BMS_FAULT_2_IDE = 0;
public final int BMS_FAULT_2_DLC = 8;
public final double BMS_FAULT_2_BMS_LOWTEMPCHARGE_ERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_LOWTEMPCHARGE_ERROR_STARTBIT = 0;
public final double BMS_FAULT_2_CANID_BMS_LOWTEMPCHARGE_ERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_LOWTEMPCHARGE_ERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_LOWTEMPCHARGE_ERROR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_LOWTEMPDRIVE_WARNING_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_LOWTEMPDRIVE_WARNING_STARTBIT = 1;
public final double BMS_FAULT_2_CANID_BMS_LOWTEMPDRIVE_WARNING_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_LOWTEMPDRIVE_WARNING_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_LOWTEMPDRIVE_WARNING_MAX = 0.0;
public final double BMS_FAULT_2_BMS_LOWTEMPDRIVE_ERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_LOWTEMPDRIVE_ERROR_STARTBIT = 2;
public final double BMS_FAULT_2_CANID_BMS_LOWTEMPDRIVE_ERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_LOWTEMPDRIVE_ERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_LOWTEMPDRIVE_ERROR_MAX = 0.0;
public final double BMS_FAULT_2_OVERTIMETOFASTCHARGE_ERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_OVERTIMETOFASTCHARGE_ERROR_STARTBIT = 3;
public final double BMS_FAULT_2_CANID_OVERTIMETOFASTCHARGE_ERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_OVERTIMETOFASTCHARGE_ERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_OVERTIMETOFASTCHARGE_ERROR_MAX = 1.0;
public final double BMS_FAULT_2_BATTERY_DISCHARGE_INHIBIT_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BATTERY_DISCHARGE_INHIBIT_STARTBIT = 4;
public final double BMS_FAULT_2_CANID_BATTERY_DISCHARGE_INHIBIT_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BATTERY_DISCHARGE_INHIBIT_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BATTERY_DISCHARGE_INHIBIT_MAX = 1.0;
public final double BMS_FAULT_2_BATTERY_DERATE_DRIVE_CUR_FLAG_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BATTERY_DERATE_DRIVE_CUR_FLAG_STARTBIT = 5;
public final double BMS_FAULT_2_CANID_BATTERY_DERATE_DRIVE_CUR_FLAG_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BATTERY_DERATE_DRIVE_CUR_FLAG_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BATTERY_DERATE_DRIVE_CUR_FLAG_MAX = 1.0;
public final double BMS_FAULT_2_BATTERY_DERATE_CHARGE_CUR_FLAG_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BATTERY_DERATE_CHARGE_CUR_FLAG_STARTBIT = 6;
public final double BMS_FAULT_2_CANID_BATTERY_DERATE_CHARGE_CUR_FLAG_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BATTERY_DERATE_CHARGE_CUR_FLAG_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BATTERY_DERATE_CHARGE_CUR_FLAG_MAX = 1.0;
public final double BMS_FAULT_2_BATTERY_INHIBIT_REGEN_FAULT_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BATTERY_INHIBIT_REGEN_FAULT_STARTBIT = 7;
public final double BMS_FAULT_2_CANID_BATTERY_INHIBIT_REGEN_FAULT_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BATTERY_INHIBIT_REGEN_FAULT_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BATTERY_INHIBIT_REGEN_FAULT_MAX = 1.0;
public final double BMS_FAULT_2_BATTERY_VOLT_DEVIATION_ERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BATTERY_VOLT_DEVIATION_ERROR_STARTBIT = 8;
public final double BMS_FAULT_2_CANID_BATTERY_VOLT_DEVIATION_ERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BATTERY_VOLT_DEVIATION_ERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BATTERY_VOLT_DEVIATION_ERROR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_BATT_PACKTEMP_1_OUTOFRANGE_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_1_OUTOFRANGE_STARTBIT = 9;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_1_OUTOFRANGE_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_1_OUTOFRANGE_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_1_OUTOFRANGE_MAX = 1.0;
public final double BMS_FAULT_2_BMS_BATT_PACKTEMP_2_OUTOFRANGE_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_2_OUTOFRANGE_STARTBIT = 10;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_2_OUTOFRANGE_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_2_OUTOFRANGE_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_2_OUTOFRANGE_MAX = 1.0;
public final double BMS_FAULT_2_BMS_BATT_PACKTEMP_3_OUTOFRANGE_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_3_OUTOFRANGE_STARTBIT = 11;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_3_OUTOFRANGE_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_3_OUTOFRANGE_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_3_OUTOFRANGE_MAX = 1.0;
public final double BMS_FAULT_2_BMS_BATT_PACKTEMP_4_OUTOFRANGE_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_4_OUTOFRANGE_STARTBIT = 12;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_4_OUTOFRANGE_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_4_OUTOFRANGE_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_4_OUTOFRANGE_MAX = 1.0;
public final double BMS_FAULT_2_BMS_BATT_PACKTEMP_5_OUTOFRANGE_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_5_OUTOFRANGE_STARTBIT = 13;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_5_OUTOFRANGE_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_5_OUTOFRANGE_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_5_OUTOFRANGE_MAX = 1.0;
public final double BMS_FAULT_2_BMS_BATT_PACKTEMP_6_OUTOFRANGE_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_6_OUTOFRANGE_STARTBIT = 14;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_6_OUTOFRANGE_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_6_OUTOFRANGE_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_6_OUTOFRANGE_MAX = 1.0;
public final double BMS_FAULT_2_BMS_CURR_SENS_FAILURE_OPENCIR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_CURR_SENS_FAILURE_OPENCIR_STARTBIT = 15;
public final double BMS_FAULT_2_CANID_BMS_CURR_SENS_FAILURE_OPENCIR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_CURR_SENS_FAILURE_OPENCIR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_CURR_SENS_FAILURE_OPENCIR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_CURR_SENS_FAILURE_SHORTCIR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_CURR_SENS_FAILURE_SHORTCIR_STARTBIT = 16;
public final double BMS_FAULT_2_CANID_BMS_CURR_SENS_FAILURE_SHORTCIR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_CURR_SENS_FAILURE_SHORTCIR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_CURR_SENS_FAILURE_SHORTCIR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVERCURRCHARGE_WARN_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVERCURRCHARGE_WARN_STARTBIT = 17;
public final double BMS_FAULT_2_CANID_BMS_OVERCURRCHARGE_WARN_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERCURRCHARGE_WARN_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERCURRCHARGE_WARN_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVERCURRCHARGE_ERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVERCURRCHARGE_ERROR_STARTBIT = 18;
public final double BMS_FAULT_2_CANID_BMS_OVERCURRCHARGE_ERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERCURRCHARGE_ERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERCURRCHARGE_ERROR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_PRECHARGETOOFAST_INFO_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_PRECHARGETOOFAST_INFO_STARTBIT = 19;
public final double BMS_FAULT_2_CANID_BMS_PRECHARGETOOFAST_INFO_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_PRECHARGETOOFAST_INFO_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_PRECHARGETOOFAST_INFO_MAX = 1.0;
public final double BMS_FAULT_2_BMS_PRECHARGETOOSLOW_INFO_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_PRECHARGETOOSLOW_INFO_STARTBIT = 20;
public final double BMS_FAULT_2_CANID_BMS_PRECHARGETOOSLOW_INFO_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_PRECHARGETOOSLOW_INFO_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_PRECHARGETOOSLOW_INFO_MAX = 1.0;
public final double BMS_FAULT_2_BMS_PRECHARGEFAILURE_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_PRECHARGEFAILURE_STARTBIT = 21;
public final double BMS_FAULT_2_CANID_BMS_PRECHARGEFAILURE_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_PRECHARGEFAILURE_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_PRECHARGEFAILURE_MAX = 1.0;
public final double BMS_FAULT_2_BMS_MOSFETSCONNFAILED_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_MOSFETSCONNFAILED_STARTBIT = 22;
public final double BMS_FAULT_2_CANID_BMS_MOSFETSCONNFAILED_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_MOSFETSCONNFAILED_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_MOSFETSCONNFAILED_MAX = 1.0;
public final double BMS_FAULT_2_BMS_MOSFETSDISCONNFAILED_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_MOSFETSDISCONNFAILED_STARTBIT = 23;
public final double BMS_FAULT_2_CANID_BMS_MOSFETSDISCONNFAILED_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_MOSFETSDISCONNFAILED_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_MOSFETSDISCONNFAILED_MAX = 1.0;
public final double BMS_FAULT_2_BMS_PDU_TEMPWARN_INFO_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_PDU_TEMPWARN_INFO_STARTBIT = 24;
public final double BMS_FAULT_2_CANID_BMS_PDU_TEMPWARN_INFO_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_PDU_TEMPWARN_INFO_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_PDU_TEMPWARN_INFO_MAX = 1.0;
public final double BMS_FAULT_2_BMS_PDU_TEMP_ERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_PDU_TEMP_ERROR_STARTBIT = 25;
public final double BMS_FAULT_2_CANID_BMS_PDU_TEMP_ERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_PDU_TEMP_ERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_PDU_TEMP_ERROR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVERVCHARGEWARNINFO_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVERVCHARGEWARNINFO_STARTBIT = 26;
public final double BMS_FAULT_2_CANID_BMS_OVERVCHARGEWARNINFO_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERVCHARGEWARNINFO_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERVCHARGEWARNINFO_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVERVCHARGEERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVERVCHARGEERROR_STARTBIT = 27;
public final double BMS_FAULT_2_CANID_BMS_OVERVCHARGEERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERVCHARGEERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERVCHARGEERROR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVERVCHAR_PERM_FAULT_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVERVCHAR_PERM_FAULT_STARTBIT = 28;
public final double BMS_FAULT_2_CANID_BMS_OVERVCHAR_PERM_FAULT_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERVCHAR_PERM_FAULT_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERVCHAR_PERM_FAULT_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVERV_REGEN_WARN_INFO_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVERV_REGEN_WARN_INFO_STARTBIT = 29;
public final double BMS_FAULT_2_CANID_BMS_OVERV_REGEN_WARN_INFO_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERV_REGEN_WARN_INFO_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERV_REGEN_WARN_INFO_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVERV_REGEN_ERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVERV_REGEN_ERROR_STARTBIT = 30;
public final double BMS_FAULT_2_CANID_BMS_OVERV_REGEN_ERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERV_REGEN_ERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERV_REGEN_ERROR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_UNDV_WARN_INFO_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_UNDV_WARN_INFO_STARTBIT = 31;
public final double BMS_FAULT_2_CANID_BMS_UNDV_WARN_INFO_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_UNDV_WARN_INFO_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_UNDV_WARN_INFO_MAX = 1.0;
public final double BMS_FAULT_2_BMS_UNDV_ERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_UNDV_ERROR_STARTBIT = 32;
public final double BMS_FAULT_2_CANID_BMS_UNDV_ERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_UNDV_ERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_UNDV_ERROR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_UNDV_PERM_FAULT_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_UNDV_PERM_FAULT_STARTBIT = 33;
public final double BMS_FAULT_2_CANID_BMS_UNDV_PERM_FAULT_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_UNDV_PERM_FAULT_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_UNDV_PERM_FAULT_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVERTEMPCHARWARNINFO_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVERTEMPCHARWARNINFO_STARTBIT = 34;
public final double BMS_FAULT_2_CANID_BMS_OVERTEMPCHARWARNINFO_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERTEMPCHARWARNINFO_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERTEMPCHARWARNINFO_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVERTEMPCHARERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVERTEMPCHARERROR_STARTBIT = 35;
public final double BMS_FAULT_2_CANID_BMS_OVERTEMPCHARERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERTEMPCHARERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERTEMPCHARERROR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVERTEMPDRIVEWARNINFO_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVERTEMPDRIVEWARNINFO_STARTBIT = 36;
public final double BMS_FAULT_2_CANID_BMS_OVERTEMPDRIVEWARNINFO_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERTEMPDRIVEWARNINFO_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERTEMPDRIVEWARNINFO_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVERTEMPDRIVEERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVERTEMPDRIVEERROR_STARTBIT = 37;
public final double BMS_FAULT_2_CANID_BMS_OVERTEMPDRIVEERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERTEMPDRIVEERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVERTEMPDRIVEERROR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVTEMP_CELLVENTERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVTEMP_CELLVENTERROR_STARTBIT = 38;
public final double BMS_FAULT_2_CANID_BMS_OVTEMP_CELLVENTERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVTEMP_CELLVENTERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVTEMP_CELLVENTERROR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_OVTEMP_CELLVENTFAILURE_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_OVTEMP_CELLVENTFAILURE_STARTBIT = 39;
public final double BMS_FAULT_2_CANID_BMS_OVTEMP_CELLVENTFAILURE_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVTEMP_CELLVENTFAILURE_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_OVTEMP_CELLVENTFAILURE_MAX = 1.0;
public final double BMS_FAULT_2_BMS_SHORTCIR_DETECTERROR_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_SHORTCIR_DETECTERROR_STARTBIT = 40;
public final double BMS_FAULT_2_CANID_BMS_SHORTCIR_DETECTERROR_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_SHORTCIR_DETECTERROR_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_SHORTCIR_DETECTERROR_MAX = 1.0;
public final double BMS_FAULT_2_BMS_SHORTCIR_DETECT_PERMFAULT_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_SHORTCIR_DETECT_PERMFAULT_STARTBIT = 41;
public final double BMS_FAULT_2_CANID_BMS_SHORTCIR_DETECT_PERMFAULT_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_SHORTCIR_DETECT_PERMFAULT_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_SHORTCIR_DETECT_PERMFAULT_MAX = 1.0;
public final double BMS_FAULT_2_BMS_CELL_FAILURE_PERMFAULT_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_CELL_FAILURE_PERMFAULT_STARTBIT = 42;
public final double BMS_FAULT_2_CANID_BMS_CELL_FAILURE_PERMFAULT_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_CELL_FAILURE_PERMFAULT_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_CELL_FAILURE_PERMFAULT_MAX = 1.0;
public final double BMS_FAULT_2_BMS_PARACELL_DISCONFAULT_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_PARACELL_DISCONFAULT_STARTBIT = 43;
public final double BMS_FAULT_2_CANID_BMS_PARACELL_DISCONFAULT_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_PARACELL_DISCONFAULT_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_PARACELL_DISCONFAULT_MAX = 1.0;
public final double BMS_FAULT_2_BMS_LOWTEMP_CHARWARNINFO_FACTOR = 1.0;
public final int BMS_FAULT_2_CANID_BMS_LOWTEMP_CHARWARNINFO_STARTBIT = 44;
public final double BMS_FAULT_2_CANID_BMS_LOWTEMP_CHARWARNINFO_OFFSET = 0.0;
public final double BMS_FAULT_2_CANID_BMS_LOWTEMP_CHARWARNINFO_MIN = 0.0;
public final double BMS_FAULT_2_CANID_BMS_LOWTEMP_CHARWARNINFO_MAX = 1.0;

public static class BMS_Fault_2_t { 

  public intBMS_LowTempCharge_Error;
  public longBMS_LowTempDrive_Warning;
  public longBMS_LowTempDrive_Error;
  public longOverTimetoFastCharge_Error;
  public longBattery_Discharge_Inhibit;
  public longBattery_Derate_Drive_Cur_Flag;
  public longBattery_Derate_Charge_Cur_Flag;
  public longBattery_Inhibit_regen_Fault;
  public longBattery_Volt_Deviation_Error;
  public longBMS_Batt_PackTemp_1_OutofRange;
  public longBMS_Batt_PackTemp_2_OutofRange;
  public longBMS_Batt_PackTemp_3_OutofRange;
  public longBMS_Batt_PackTemp_4_OutofRange;
  public longBMS_Batt_PackTemp_5_OutofRange;
  public longBMS_Batt_PackTemp_6_OutofRange;
  public longBMS_Curr_Sens_Failure_OpenCir;
  public longBMS_Curr_Sens_Failure_ShortCir;
  public longBMS_OverCurrCharge_Warn;
  public longBMS_OverCurrCharge_Error;
  public longBMS_PreChargeTooFast_Info;
  public longBMS_PreChargeTooSlow_Info;
  public longBMS_PreChargeFailure;
  public longBMS_MOSFETsConnFailed;
  public longBMS_MOSFETsDisconnFailed;
  public longBMS_PDU_TempWarn_Info;
  public longBMS_PDU_Temp_Error;
  public longBMS_OverVChargeWarnInfo;
  public longBMS_OverVChargeError;
  public longBMS_OverVChar_Perm_Fault;
  public longBMS_OverV_Regen_Warn_Info;
  public longBMS_OverV_Regen_Error;
  public longBMS_UndV_Warn_Info;
  public longBMS_UndV_Error;
  public longBMS_UndV_Perm_fault;
  public longBMS_OverTempCharWarnInfo;
  public longBMS_OverTempCharError;
  public longBMS_OverTempDriveWarnInfo;
  public longBMS_OverTempDriveError;
  public longBMS_OvTemp_CellVentError;
  public longBMS_OvTemp_CellVentFailure;
  public longBMS_ShortCir_DetectError;
  public longBMS_ShortCir_Detect_PermFault;
  public longBMS_Cell_Failure_PermFault;
  public longBMS_ParaCell_DisconFault;
  public longBMS_LowTemp_CharWarnInfo;
}
/* public final int @ESCL_DATA CAN MESSAGE = 1230*/
public final int ESCL_DATA_ID = 1230;
public final int ESCL_DATA_IDE = 0;
public final int ESCL_DATA_DLC = 8;
public final double ESCL_DATA_ESCL_SUPPLY_VOLTAGE_FACTOR = 1.0;
public final int ESCL_DATA_CANID_ESCL_SUPPLY_VOLTAGE_STARTBIT = 0;
public final double ESCL_DATA_CANID_ESCL_SUPPLY_VOLTAGE_OFFSET = 0.0;
public final double ESCL_DATA_CANID_ESCL_SUPPLY_VOLTAGE_MIN = 0.0;
public final double ESCL_DATA_CANID_ESCL_SUPPLY_VOLTAGE_MAX = 65535.0;
public final double ESCL_DATA_MOTOR_STALL_CURRENT_FACTOR = 1.0;
public final int ESCL_DATA_CANID_MOTOR_STALL_CURRENT_STARTBIT = 16;
public final double ESCL_DATA_CANID_MOTOR_STALL_CURRENT_OFFSET = 0.0;
public final double ESCL_DATA_CANID_MOTOR_STALL_CURRENT_MIN = 0.0;
public final double ESCL_DATA_CANID_MOTOR_STALL_CURRENT_MAX = 65535.0;
public final double ESCL_DATA_ESCL_STATUS_FACTOR = 1.0;
public final int ESCL_DATA_CANID_ESCL_STATUS_STARTBIT = 32;
public final double ESCL_DATA_CANID_ESCL_STATUS_OFFSET = 0.0;
public final double ESCL_DATA_CANID_ESCL_STATUS_MIN = 0.0;
public final double ESCL_DATA_CANID_ESCL_STATUS_MAX = 5.0;
public final double ESCL_DATA_ESCL_HALL1_STATUS_FACTOR = 1.0;
public final int ESCL_DATA_CANID_ESCL_HALL1_STATUS_STARTBIT = 35;
public final double ESCL_DATA_CANID_ESCL_HALL1_STATUS_OFFSET = 0.0;
public final double ESCL_DATA_CANID_ESCL_HALL1_STATUS_MIN = 0.0;
public final double ESCL_DATA_CANID_ESCL_HALL1_STATUS_MAX = 1.0;
public final double ESCL_DATA_ESCL_HALL2_STATUS_FACTOR = 1.0;
public final int ESCL_DATA_CANID_ESCL_HALL2_STATUS_STARTBIT = 36;
public final double ESCL_DATA_CANID_ESCL_HALL2_STATUS_OFFSET = 0.0;
public final double ESCL_DATA_CANID_ESCL_HALL2_STATUS_MIN = 0.0;
public final double ESCL_DATA_CANID_ESCL_HALL2_STATUS_MAX = 1.0;
public final double ESCL_DATA_ESCL_POWER_STATUS_FACTOR = 1.0;
public final int ESCL_DATA_CANID_ESCL_POWER_STATUS_STARTBIT = 37;
public final double ESCL_DATA_CANID_ESCL_POWER_STATUS_OFFSET = 0.0;
public final double ESCL_DATA_CANID_ESCL_POWER_STATUS_MIN = 0.0;
public final double ESCL_DATA_CANID_ESCL_POWER_STATUS_MAX = 1.0;
public final double ESCL_DATA_ESCL_PLUNGER_STATUS_FACTOR = 1.0;
public final int ESCL_DATA_CANID_ESCL_PLUNGER_STATUS_STARTBIT = 38;
public final double ESCL_DATA_CANID_ESCL_PLUNGER_STATUS_OFFSET = 0.0;
public final double ESCL_DATA_CANID_ESCL_PLUNGER_STATUS_MIN = 0.0;
public final double ESCL_DATA_CANID_ESCL_PLUNGER_STATUS_MAX = 1.0;
public final double ESCL_DATA_ESCL_MOTOR_TEMP_FAULT_FACTOR = 1.0;
public final int ESCL_DATA_CANID_ESCL_MOTOR_TEMP_FAULT_STARTBIT = 39;
public final double ESCL_DATA_CANID_ESCL_MOTOR_TEMP_FAULT_OFFSET = 0.0;
public final double ESCL_DATA_CANID_ESCL_MOTOR_TEMP_FAULT_MIN = 0.0;
public final double ESCL_DATA_CANID_ESCL_MOTOR_TEMP_FAULT_MAX = 1.0;
public final double ESCL_DATA_ESCL_MOTOR_OPEN_FAULT_FACTOR = 1.0;
public final int ESCL_DATA_CANID_ESCL_MOTOR_OPEN_FAULT_STARTBIT = 40;
public final double ESCL_DATA_CANID_ESCL_MOTOR_OPEN_FAULT_OFFSET = 0.0;
public final double ESCL_DATA_CANID_ESCL_MOTOR_OPEN_FAULT_MIN = 0.0;
public final double ESCL_DATA_CANID_ESCL_MOTOR_OPEN_FAULT_MAX = 1.0;
public final double ESCL_DATA_ESCL_MOTOR_SHORT_FAULT_FACTOR = 1.0;
public final int ESCL_DATA_CANID_ESCL_MOTOR_SHORT_FAULT_STARTBIT = 41;
public final double ESCL_DATA_CANID_ESCL_MOTOR_SHORT_FAULT_OFFSET = 0.0;
public final double ESCL_DATA_CANID_ESCL_MOTOR_SHORT_FAULT_MIN = 0.0;
public final double ESCL_DATA_CANID_ESCL_MOTOR_SHORT_FAULT_MAX = 1.0;
public final double ESCL_DATA_ESCL_LOCK_UNLOCK_ERROR_FACTOR = 1.0;
public final int ESCL_DATA_CANID_ESCL_LOCK_UNLOCK_ERROR_STARTBIT = 42;
public final double ESCL_DATA_CANID_ESCL_LOCK_UNLOCK_ERROR_OFFSET = 0.0;
public final double ESCL_DATA_CANID_ESCL_LOCK_UNLOCK_ERROR_MIN = 0.0;
public final double ESCL_DATA_CANID_ESCL_LOCK_UNLOCK_ERROR_MAX = 1.0;
public final double ESCL_DATA_ESCL_SLEEP_ACK_FACTOR = 1.0;
public final int ESCL_DATA_CANID_ESCL_SLEEP_ACK_STARTBIT = 43;
public final double ESCL_DATA_CANID_ESCL_SLEEP_ACK_OFFSET = 0.0;
public final double ESCL_DATA_CANID_ESCL_SLEEP_ACK_MIN = 0.0;
public final double ESCL_DATA_CANID_ESCL_SLEEP_ACK_MAX = 1.0;

public static class ESCL_Data_t { 

  public intESCL_Supply_Voltage;
  public longMotor_Stall_Current;
  public longESCL_Status;
  public longESCL_Hall1_Status;
  public longESCL_Hall2_Status;
  public longESCL_Power_Status;
  public longESCL_Plunger_Status;
  public longESCL_Motor_Temp_Fault;
  public longESCL_Motor_Open_Fault;
  public longESCL_Motor_Short_Fault;
  public longESCL_Lock_Unlock_Error;
  public longESCL_Sleep_Ack;
}
/* public final int @CHARGER_FAULT_INFO CAN MESSAGE = 1294*/
public final int CHARGER_FAULT_INFO_ID = 1294;
public final int CHARGER_FAULT_INFO_IDE = 0;
public final int CHARGER_FAULT_INFO_DLC = 8;
public final double CHARGER_FAULT_INFO_OBC_IP_AC_OVERVOLTAGE_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_IP_AC_OVERVOLTAGE_STARTBIT = 0;
public final double CHARGER_FAULT_INFO_CANID_OBC_IP_AC_OVERVOLTAGE_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_IP_AC_OVERVOLTAGE_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_IP_AC_OVERVOLTAGE_MAX = 1.0;
public final double CHARGER_FAULT_INFO_OBC_IP_AC_UNDERV_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_IP_AC_UNDERV_STARTBIT = 1;
public final double CHARGER_FAULT_INFO_CANID_OBC_IP_AC_UNDERV_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_IP_AC_UNDERV_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_IP_AC_UNDERV_MAX = 1.0;
public final double CHARGER_FAULT_INFO_OBC_IP_OVERCURRENT_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_IP_OVERCURRENT_STARTBIT = 2;
public final double CHARGER_FAULT_INFO_CANID_OBC_IP_OVERCURRENT_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_IP_OVERCURRENT_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_IP_OVERCURRENT_MAX = 1.0;
public final double CHARGER_FAULT_INFO_OBC_OP_OVERCURRENT_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_OP_OVERCURRENT_STARTBIT = 3;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_OVERCURRENT_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_OVERCURRENT_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_OVERCURRENT_MAX = 1.0;
public final double CHARGER_FAULT_INFO_OBC_HIGH_TEMP_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_HIGH_TEMP_STARTBIT = 4;
public final double CHARGER_FAULT_INFO_CANID_OBC_HIGH_TEMP_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_HIGH_TEMP_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_HIGH_TEMP_MAX = 1.0;
public final double CHARGER_FAULT_INFO_OBC_LOW_TEMP_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_LOW_TEMP_STARTBIT = 5;
public final double CHARGER_FAULT_INFO_CANID_OBC_LOW_TEMP_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_LOW_TEMP_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_LOW_TEMP_MAX = 1.0;
public final double CHARGER_FAULT_INFO_OBC_TEMP_SENSOR_FAIL_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_TEMP_SENSOR_FAIL_STARTBIT = 6;
public final double CHARGER_FAULT_INFO_CANID_OBC_TEMP_SENSOR_FAIL_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_TEMP_SENSOR_FAIL_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_TEMP_SENSOR_FAIL_MAX = 1.0;
public final double CHARGER_FAULT_INFO_OBC_CURRENT_SENSOR_FAIL_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_CURRENT_SENSOR_FAIL_STARTBIT = 7;
public final double CHARGER_FAULT_INFO_CANID_OBC_CURRENT_SENSOR_FAIL_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_CURRENT_SENSOR_FAIL_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_CURRENT_SENSOR_FAIL_MAX = 1.0;
public final double CHARGER_FAULT_INFO_OBC_CONTACTORRELAY_FAIL_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_CONTACTORRELAY_FAIL_STARTBIT = 8;
public final double CHARGER_FAULT_INFO_CANID_OBC_CONTACTORRELAY_FAIL_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_CONTACTORRELAY_FAIL_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_CONTACTORRELAY_FAIL_MAX = 1.0;
public final double CHARGER_FAULT_INFO_OBC_OP_OPEN_CIRCUIT_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_OP_OPEN_CIRCUIT_STARTBIT = 9;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_OPEN_CIRCUIT_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_OPEN_CIRCUIT_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_OPEN_CIRCUIT_MAX = 1.0;
public final double CHARGER_FAULT_INFO_OBC_OP_SHORT_CIRCUIT_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_OP_SHORT_CIRCUIT_STARTBIT = 10;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_SHORT_CIRCUIT_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_SHORT_CIRCUIT_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_SHORT_CIRCUIT_MAX = 1.0;
public final double CHARGER_FAULT_INFO_OBC_OP_OVER_VOL_FLT_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_OP_OVER_VOL_FLT_STARTBIT = 11;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_OVER_VOL_FLT_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_OVER_VOL_FLT_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_OVER_VOL_FLT_MAX = 1.0;
public final double CHARGER_FAULT_INFO_OBC_OP_UNDER_VOL_FLT_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_OBC_OP_UNDER_VOL_FLT_STARTBIT = 12;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_UNDER_VOL_FLT_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_UNDER_VOL_FLT_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_OBC_OP_UNDER_VOL_FLT_MAX = 1.0;
public final double CHARGER_FAULT_INFO_DCDC_OP_OVER_VOL_FLT_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_OP_OVER_VOL_FLT_STARTBIT = 13;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_OVER_VOL_FLT_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_OVER_VOL_FLT_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_OVER_VOL_FLT_MAX = 1.0;
public final double CHARGER_FAULT_INFO_DCDC_IP_OVER_VOLTAGE_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_IP_OVER_VOLTAGE_STARTBIT = 14;
public final double CHARGER_FAULT_INFO_CANID_DCDC_IP_OVER_VOLTAGE_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_IP_OVER_VOLTAGE_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_IP_OVER_VOLTAGE_MAX = 1.0;
public final double CHARGER_FAULT_INFO_DCDC_IP_UNDER_VOLTAGE_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_IP_UNDER_VOLTAGE_STARTBIT = 15;
public final double CHARGER_FAULT_INFO_CANID_DCDC_IP_UNDER_VOLTAGE_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_IP_UNDER_VOLTAGE_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_IP_UNDER_VOLTAGE_MAX = 1.0;
public final double CHARGER_FAULT_INFO_DCDC_IP_OVER_CURRENT_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_IP_OVER_CURRENT_STARTBIT = 16;
public final double CHARGER_FAULT_INFO_CANID_DCDC_IP_OVER_CURRENT_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_IP_OVER_CURRENT_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_IP_OVER_CURRENT_MAX = 1.0;
public final double CHARGER_FAULT_INFO_DCDC_OP_OVER_CURRENT_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_OP_OVER_CURRENT_STARTBIT = 17;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_OVER_CURRENT_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_OVER_CURRENT_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_OVER_CURRENT_MAX = 1.0;
public final double CHARGER_FAULT_INFO_DCDC_HIGH_TEMP_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_HIGH_TEMP_STARTBIT = 18;
public final double CHARGER_FAULT_INFO_CANID_DCDC_HIGH_TEMP_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_HIGH_TEMP_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_HIGH_TEMP_MAX = 1.0;
public final double CHARGER_FAULT_INFO_DCDC_LOW_TEMP_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_LOW_TEMP_STARTBIT = 19;
public final double CHARGER_FAULT_INFO_CANID_DCDC_LOW_TEMP_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_LOW_TEMP_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_LOW_TEMP_MAX = 1.0;
public final double CHARGER_FAULT_INFO_DCDC_TEMPSENSOR_FAILURE_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_TEMPSENSOR_FAILURE_STARTBIT = 20;
public final double CHARGER_FAULT_INFO_CANID_DCDC_TEMPSENSOR_FAILURE_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_TEMPSENSOR_FAILURE_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_TEMPSENSOR_FAILURE_MAX = 1.0;
public final double CHARGER_FAULT_INFO_DCDC_CURRENT_SENSOR_FAILURE_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_CURRENT_SENSOR_FAILURE_STARTBIT = 21;
public final double CHARGER_FAULT_INFO_CANID_DCDC_CURRENT_SENSOR_FAILURE_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_CURRENT_SENSOR_FAILURE_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_CURRENT_SENSOR_FAILURE_MAX = 1.0;
public final double CHARGER_FAULT_INFO_DCDC_CONTACTOR_OR_RELAY_FAILURE_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_CONTACTOR_OR_RELAY_FAILURE_STARTBIT = 22;
public final double CHARGER_FAULT_INFO_CANID_DCDC_CONTACTOR_OR_RELAY_FAILURE_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_CONTACTOR_OR_RELAY_FAILURE_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_CONTACTOR_OR_RELAY_FAILURE_MAX = 1.0;
public final double CHARGER_FAULT_INFO_DCDC_OP_OPEN_CIRCUIT_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_OP_OPEN_CIRCUIT_STARTBIT = 23;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_OPEN_CIRCUIT_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_OPEN_CIRCUIT_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_OPEN_CIRCUIT_MAX = 0.0;
public final double CHARGER_FAULT_INFO_DCDC_OP_SHORT_CIRCUIT_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_OP_SHORT_CIRCUIT_STARTBIT = 24;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_SHORT_CIRCUIT_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_SHORT_CIRCUIT_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_SHORT_CIRCUIT_MAX = 1.0;
public final double CHARGER_FAULT_INFO_DCDC_OP_UNDER_VOL_FLT_FACTOR = 1.0;
public final int CHARGER_FAULT_INFO_CANID_DCDC_OP_UNDER_VOL_FLT_STARTBIT = 25;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_UNDER_VOL_FLT_OFFSET = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_UNDER_VOL_FLT_MIN = 0.0;
public final double CHARGER_FAULT_INFO_CANID_DCDC_OP_UNDER_VOL_FLT_MAX = 1.0;

public static class Charger_Fault_Info_t { 

  public intOBC_IP_AC_overVoltage;
  public longOBC_IP_AC_UnderV;
  public longOBC_IP_Overcurrent;
  public longOBC_OP_Overcurrent;
  public longOBC_High_temp;
  public longOBC_Low_temp;
  public longOBC_Temp_Sensor_fail;
  public longOBC_Current_Sensor_fail;
  public longOBC_ContactorRelay_fail;
  public longOBC_OP_Open_Circuit;
  public longOBC_OP_Short_Circuit;
  public longOBC_OP_Over_Vol_flt;
  public longOBC_OP_Under_Vol_flt;
  public longDCDC_OP_Over_Vol_flt;
  public longDCDC_IP_Over_Voltage;
  public longDCDC_IP_Under_Voltage;
  public longDCDC_IP_Over_Current;
  public longDCDC_OP_Over_Current;
  public longDCDC_High_Temp;
  public longDCDC_Low_Temp;
  public longDCDC_TempSensor_Failure;
  public longDCDC_Current_Sensor_Failure;
  public longDCDC_Contactor_or_Relay_Failure;
  public longDCDC_OP_Open_Circuit;
  public longDCDC_OP_Short_Circuit;
  public longDCDC_OP_Under_Vol_flt;
}
/* public final int @HP_DCDC_PARAMETER1 CAN MESSAGE = 1295*/
public final int HP_DCDC_PARAMETER1_ID = 1295;
public final int HP_DCDC_PARAMETER1_IDE = 0;
public final int HP_DCDC_PARAMETER1_DLC = 8;
public final double HP_DCDC_PARAMETER1_HP_DCDC_IP_DC_CURRENT_FACTOR = 0.01;
public final int HP_DCDC_PARAMETER1_CANID_HP_DCDC_IP_DC_CURRENT_STARTBIT = 0;
public final double HP_DCDC_PARAMETER1_CANID_HP_DCDC_IP_DC_CURRENT_OFFSET = 0.0;
public final double HP_DCDC_PARAMETER1_CANID_HP_DCDC_IP_DC_CURRENT_MIN = 0.0;
public final double HP_DCDC_PARAMETER1_CANID_HP_DCDC_IP_DC_CURRENT_MAX = 150.0;
public final double HP_DCDC_PARAMETER1_HP_DCDC_IP_DC_VOLTAGE_FACTOR = 0.01;
public final int HP_DCDC_PARAMETER1_CANID_HP_DCDC_IP_DC_VOLTAGE_STARTBIT = 16;
public final double HP_DCDC_PARAMETER1_CANID_HP_DCDC_IP_DC_VOLTAGE_OFFSET = 0.0;
public final double HP_DCDC_PARAMETER1_CANID_HP_DCDC_IP_DC_VOLTAGE_MIN = 0.0;
public final double HP_DCDC_PARAMETER1_CANID_HP_DCDC_IP_DC_VOLTAGE_MAX = 100.0;
public final double HP_DCDC_PARAMETER1_HP_DCDC_OP_DC_CURRENT_FACTOR = 0.01;
public final int HP_DCDC_PARAMETER1_CANID_HP_DCDC_OP_DC_CURRENT_STARTBIT = 32;
public final double HP_DCDC_PARAMETER1_CANID_HP_DCDC_OP_DC_CURRENT_OFFSET = 0.0;
public final double HP_DCDC_PARAMETER1_CANID_HP_DCDC_OP_DC_CURRENT_MIN = 0.0;
public final double HP_DCDC_PARAMETER1_CANID_HP_DCDC_OP_DC_CURRENT_MAX = 100.0;
public final double HP_DCDC_PARAMETER1_HP_DCDC_OP_DC_VOLTAGE_FACTOR = 0.01;
public final int HP_DCDC_PARAMETER1_CANID_HP_DCDC_OP_DC_VOLTAGE_STARTBIT = 48;
public final double HP_DCDC_PARAMETER1_CANID_HP_DCDC_OP_DC_VOLTAGE_OFFSET = 0.0;
public final double HP_DCDC_PARAMETER1_CANID_HP_DCDC_OP_DC_VOLTAGE_MIN = 0.0;
public final double HP_DCDC_PARAMETER1_CANID_HP_DCDC_OP_DC_VOLTAGE_MAX = 100.0;

public static class HP_DCDC_Parameter1_t { 

  public intHP_DCDC_IP_DC_Current;
  public longHP_DCDC_IP_DC_Voltage;
  public longHP_DCDC_OP_DC_Current;
  public longHP_DCDC_OP_DC_Voltage;
}
/* public final int @IMU_DATA_X CAN MESSAGE = 1579*/
public final int IMU_DATA_X_ID = 1579;
public final int IMU_DATA_X_IDE = 0;
public final int IMU_DATA_X_DLC = 8;
public final double IMU_DATA_X_ACCELEROMETER_XAXIS_FACTOR = 1.0;
public final int IMU_DATA_X_CANID_ACCELEROMETER_XAXIS_STARTBIT = 0;
public final double IMU_DATA_X_CANID_ACCELEROMETER_XAXIS_OFFSET = -2000.0;
public final double IMU_DATA_X_CANID_ACCELEROMETER_XAXIS_MIN = -2000.0;
public final double IMU_DATA_X_CANID_ACCELEROMETER_XAXIS_MAX = 2000.0;
public final double IMU_DATA_X_GYROSCOPE_XAXIS_FACTOR = 1.0;
public final int IMU_DATA_X_CANID_GYROSCOPE_XAXIS_STARTBIT = 32;
public final double IMU_DATA_X_CANID_GYROSCOPE_XAXIS_OFFSET = -2000.0;
public final double IMU_DATA_X_CANID_GYROSCOPE_XAXIS_MIN = -2000.0;
public final double IMU_DATA_X_CANID_GYROSCOPE_XAXIS_MAX = 2000.0;

public static class IMU_Data_X_t { 

  public intAccelerometer_Xaxis;
  public longGyroscope_Xaxis;
}
/* public final int @MCU_SW_VERSION CAN MESSAGE = 1585*/
public final int MCU_SW_VERSION_ID = 1585;
public final int MCU_SW_VERSION_IDE = 0;
public final int MCU_SW_VERSION_DLC = 8;
public final double MCU_SW_VERSION_MCU_BOOTLOADER_VERSION_FACTOR = 1.0;
public final int MCU_SW_VERSION_CANID_MCU_BOOTLOADER_VERSION_STARTBIT = 0;
public final double MCU_SW_VERSION_CANID_MCU_BOOTLOADER_VERSION_OFFSET = 0.0;
public final double MCU_SW_VERSION_CANID_MCU_BOOTLOADER_VERSION_MIN = 0.0;
public final double MCU_SW_VERSION_CANID_MCU_BOOTLOADER_VERSION_MAX = 4.294967295E9;
public final double MCU_SW_VERSION_MCU_FIRMWARE_VERSION_FACTOR = 1.0;
public final int MCU_SW_VERSION_CANID_MCU_FIRMWARE_VERSION_STARTBIT = 32;
public final double MCU_SW_VERSION_CANID_MCU_FIRMWARE_VERSION_OFFSET = 0.0;
public final double MCU_SW_VERSION_CANID_MCU_FIRMWARE_VERSION_MIN = 0.0;
public final double MCU_SW_VERSION_CANID_MCU_FIRMWARE_VERSION_MAX = 4.294967295E9;

public static class MCU_SW_Version_t { 

  public intMCU_Bootloader_Version;
  public longMCU_Firmware_Version;
}
/* public final int @MCU_HW_VERSION CAN MESSAGE = 1586*/
public final int MCU_HW_VERSION_ID = 1586;
public final int MCU_HW_VERSION_IDE = 0;
public final int MCU_HW_VERSION_DLC = 8;
public final double MCU_HW_VERSION_MCU_HARDWARE_VERSION_FACTOR = 1.0;
public final int MCU_HW_VERSION_CANID_MCU_HARDWARE_VERSION_STARTBIT = 0;
public final double MCU_HW_VERSION_CANID_MCU_HARDWARE_VERSION_OFFSET = 0.0;
public final double MCU_HW_VERSION_CANID_MCU_HARDWARE_VERSION_MIN = 0.0;
public final double MCU_HW_VERSION_CANID_MCU_HARDWARE_VERSION_MAX = 4.294967295E9;

public static class MCU_HW_Version_t { 

  public intMCU_Hardware_Version;
}
/* public final int @ICM_HW_VERSION_INFO CAN MESSAGE = 1601*/
public final int ICM_HW_VERSION_INFO_ID = 1601;
public final int ICM_HW_VERSION_INFO_IDE = 0;
public final int ICM_HW_VERSION_INFO_DLC = 8;
public final double ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_FACTOR = 1.0;
public final int ICM_HW_VERSION_INFO_CANID_ICM_HARDWARE_VERSION_STARTBIT = 0;
public final double ICM_HW_VERSION_INFO_CANID_ICM_HARDWARE_VERSION_OFFSET = 0.0;
public final double ICM_HW_VERSION_INFO_CANID_ICM_HARDWARE_VERSION_MIN = 0.0;
public final double ICM_HW_VERSION_INFO_CANID_ICM_HARDWARE_VERSION_MAX = 1.84467440737096E19;

public static class ICM_HW_Version_Info_t { 

  public intICM_Hardware_Version;
}
/* public final int @ICM_SW_VERSION CAN MESSAGE = 1602*/
public final int ICM_SW_VERSION_ID = 1602;
public final int ICM_SW_VERSION_IDE = 0;
public final int ICM_SW_VERSION_DLC = 8;
public final double ICM_SW_VERSION_ICM_FIRMWARE_VERSION_FACTOR = 1.0;
public final int ICM_SW_VERSION_CANID_ICM_FIRMWARE_VERSION_STARTBIT = 0;
public final double ICM_SW_VERSION_CANID_ICM_FIRMWARE_VERSION_OFFSET = 0.0;
public final double ICM_SW_VERSION_CANID_ICM_FIRMWARE_VERSION_MIN = 0.0;
public final double ICM_SW_VERSION_CANID_ICM_FIRMWARE_VERSION_MAX = 4.294967295E9;
public final double ICM_SW_VERSION_ICM_BOOTLOADER_VERSION_FACTOR = 1.0;
public final int ICM_SW_VERSION_CANID_ICM_BOOTLOADER_VERSION_STARTBIT = 32;
public final double ICM_SW_VERSION_CANID_ICM_BOOTLOADER_VERSION_OFFSET = 0.0;
public final double ICM_SW_VERSION_CANID_ICM_BOOTLOADER_VERSION_MIN = 0.0;
public final double ICM_SW_VERSION_CANID_ICM_BOOTLOADER_VERSION_MAX = 4.294967295E9;

public static class ICM_SW_Version_t { 

  public intICM_Firmware_Version;
  public longICM_Bootloader_Version;
}
/* public final int @ESCL_HW_VERSION_INFO CAN MESSAGE = 1603*/
public final int ESCL_HW_VERSION_INFO_ID = 1603;
public final int ESCL_HW_VERSION_INFO_IDE = 0;
public final int ESCL_HW_VERSION_INFO_DLC = 8;
public final double ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_FACTOR = 1.0;
public final int ESCL_HW_VERSION_INFO_CANID_ESCL_HARDWARE_VERSION_STARTBIT = 0;
public final double ESCL_HW_VERSION_INFO_CANID_ESCL_HARDWARE_VERSION_OFFSET = 0.0;
public final double ESCL_HW_VERSION_INFO_CANID_ESCL_HARDWARE_VERSION_MIN = 0.0;
public final double ESCL_HW_VERSION_INFO_CANID_ESCL_HARDWARE_VERSION_MAX = 4.294967295E9;

public static class ESCL_HW_Version_Info_t { 

  public intESCL_Hardware_Version;
}
/* public final int @OBC_SW_VERSION CAN MESSAGE = 1604*/
public final int OBC_SW_VERSION_ID = 1604;
public final int OBC_SW_VERSION_IDE = 0;
public final int OBC_SW_VERSION_DLC = 8;
public final double OBC_SW_VERSION_OBC_FIRMWARE_VERSION_FACTOR = 1.0;
public final int OBC_SW_VERSION_CANID_OBC_FIRMWARE_VERSION_STARTBIT = 0;
public final double OBC_SW_VERSION_CANID_OBC_FIRMWARE_VERSION_OFFSET = 0.0;
public final double OBC_SW_VERSION_CANID_OBC_FIRMWARE_VERSION_MIN = 0.0;
public final double OBC_SW_VERSION_CANID_OBC_FIRMWARE_VERSION_MAX = 4.294967295E9;
public final double OBC_SW_VERSION_OBC_BOOTLOADER_VERSION_FACTOR = 1.0;
public final int OBC_SW_VERSION_CANID_OBC_BOOTLOADER_VERSION_STARTBIT = 32;
public final double OBC_SW_VERSION_CANID_OBC_BOOTLOADER_VERSION_OFFSET = 0.0;
public final double OBC_SW_VERSION_CANID_OBC_BOOTLOADER_VERSION_MIN = 0.0;
public final double OBC_SW_VERSION_CANID_OBC_BOOTLOADER_VERSION_MAX = 4.294967295E9;

public static class OBC_SW_Version_t { 

  public intOBC_Firmware_Version;
  public longOBC_Bootloader_Version;
}
/* public final int @OBC_HW_VERSION CAN MESSAGE = 1605*/
public final int OBC_HW_VERSION_ID = 1605;
public final int OBC_HW_VERSION_IDE = 0;
public final int OBC_HW_VERSION_DLC = 8;
public final double OBC_HW_VERSION_OBC_HARDWARE_VERSION_FACTOR = 1.0;
public final int OBC_HW_VERSION_CANID_OBC_HARDWARE_VERSION_STARTBIT = 0;
public final double OBC_HW_VERSION_CANID_OBC_HARDWARE_VERSION_OFFSET = 0.0;
public final double OBC_HW_VERSION_CANID_OBC_HARDWARE_VERSION_MIN = 0.0;
public final double OBC_HW_VERSION_CANID_OBC_HARDWARE_VERSION_MAX = 4.294967295E9;

public static class OBC_HW_Version_t { 

  public intOBC_Hardware_Version;
}
/* public final int @ESCL_SW_VERSION_INFO CAN MESSAGE = 1606*/
public final int ESCL_SW_VERSION_INFO_ID = 1606;
public final int ESCL_SW_VERSION_INFO_IDE = 0;
public final int ESCL_SW_VERSION_INFO_DLC = 8;
public final double ESCL_SW_VERSION_INFO_ESCL_FIRMWARE_VERSION_FACTOR = 1.0;
public final int ESCL_SW_VERSION_INFO_CANID_ESCL_FIRMWARE_VERSION_STARTBIT = 0;
public final double ESCL_SW_VERSION_INFO_CANID_ESCL_FIRMWARE_VERSION_OFFSET = 0.0;
public final double ESCL_SW_VERSION_INFO_CANID_ESCL_FIRMWARE_VERSION_MIN = 0.0;
public final double ESCL_SW_VERSION_INFO_CANID_ESCL_FIRMWARE_VERSION_MAX = 4.294967295E9;
public final double ESCL_SW_VERSION_INFO_ESCL_BOOTLOADER_VERSION_FACTOR = 1.0;
public final int ESCL_SW_VERSION_INFO_CANID_ESCL_BOOTLOADER_VERSION_STARTBIT = 32;
public final double ESCL_SW_VERSION_INFO_CANID_ESCL_BOOTLOADER_VERSION_OFFSET = 0.0;
public final double ESCL_SW_VERSION_INFO_CANID_ESCL_BOOTLOADER_VERSION_MIN = 0.0;
public final double ESCL_SW_VERSION_INFO_CANID_ESCL_BOOTLOADER_VERSION_MAX = 4.294967295E9;

public static class ESCL_SW_Version_Info_t { 

  public intESCL_Firmware_version;
  public longESCL_Bootloader_version;
}
/* public final int @RSC_HW_VERSION_INFO CAN MESSAGE = 1607*/
public final int RSC_HW_VERSION_INFO_ID = 1607;
public final int RSC_HW_VERSION_INFO_IDE = 0;
public final int RSC_HW_VERSION_INFO_DLC = 8;
public final double RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_FACTOR = 1.0;
public final int RSC_HW_VERSION_INFO_CANID_RSC_HARDWARE_VERSION_STARTBIT = 0;
public final double RSC_HW_VERSION_INFO_CANID_RSC_HARDWARE_VERSION_OFFSET = 0.0;
public final double RSC_HW_VERSION_INFO_CANID_RSC_HARDWARE_VERSION_MIN = 0.0;
public final double RSC_HW_VERSION_INFO_CANID_RSC_HARDWARE_VERSION_MAX = 1.84467440737096E19;

public static class RSC_HW_Version_Info_t { 

  public intRSC_Hardware_Version;
}
/* public final int @RSC_SW_VERSION CAN MESSAGE = 1608*/
public final int RSC_SW_VERSION_ID = 1608;
public final int RSC_SW_VERSION_IDE = 0;
public final int RSC_SW_VERSION_DLC = 8;
public final double RSC_SW_VERSION_RSC_FIRMWARE_VERSION_FACTOR = 1.0;
public final int RSC_SW_VERSION_CANID_RSC_FIRMWARE_VERSION_STARTBIT = 0;
public final double RSC_SW_VERSION_CANID_RSC_FIRMWARE_VERSION_OFFSET = 0.0;
public final double RSC_SW_VERSION_CANID_RSC_FIRMWARE_VERSION_MIN = 0.0;
public final double RSC_SW_VERSION_CANID_RSC_FIRMWARE_VERSION_MAX = 4.294967295E9;
public final double RSC_SW_VERSION_RSC_BOOTLOADER_VERSION_FACTOR = 1.0;
public final int RSC_SW_VERSION_CANID_RSC_BOOTLOADER_VERSION_STARTBIT = 32;
public final double RSC_SW_VERSION_CANID_RSC_BOOTLOADER_VERSION_OFFSET = 0.0;
public final double RSC_SW_VERSION_CANID_RSC_BOOTLOADER_VERSION_MIN = 0.0;
public final double RSC_SW_VERSION_CANID_RSC_BOOTLOADER_VERSION_MAX = 4.294967295E9;

public static class RSC_SW_Version_t { 

  public intRSC_Firmware_Version;
  public longRSC_Bootloader_Version;
}
/* public final int @LSC_HW_VERSION_INFO CAN MESSAGE = 1609*/
public final int LSC_HW_VERSION_INFO_ID = 1609;
public final int LSC_HW_VERSION_INFO_IDE = 0;
public final int LSC_HW_VERSION_INFO_DLC = 8;
public final double LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_FACTOR = 1.0;
public final int LSC_HW_VERSION_INFO_CANID_LSC_HARDWARE_VERSION_STARTBIT = 0;
public final double LSC_HW_VERSION_INFO_CANID_LSC_HARDWARE_VERSION_OFFSET = 0.0;
public final double LSC_HW_VERSION_INFO_CANID_LSC_HARDWARE_VERSION_MIN = 0.0;
public final double LSC_HW_VERSION_INFO_CANID_LSC_HARDWARE_VERSION_MAX = 1.84467440737096E19;

public static class LSC_HW_Version_Info_t { 

  public intLSC_Hardware_Version;
}
/* public final int @LSC_SW_VERSION CAN MESSAGE = 1610*/
public final int LSC_SW_VERSION_ID = 1610;
public final int LSC_SW_VERSION_IDE = 0;
public final int LSC_SW_VERSION_DLC = 8;
public final double LSC_SW_VERSION_LSC_FIRMWARE_VERSION_FACTOR = 1.0;
public final int LSC_SW_VERSION_CANID_LSC_FIRMWARE_VERSION_STARTBIT = 0;
public final double LSC_SW_VERSION_CANID_LSC_FIRMWARE_VERSION_OFFSET = 0.0;
public final double LSC_SW_VERSION_CANID_LSC_FIRMWARE_VERSION_MIN = 0.0;
public final double LSC_SW_VERSION_CANID_LSC_FIRMWARE_VERSION_MAX = 4.294967295E9;
public final double LSC_SW_VERSION_LSC_BOOTLOADER_VERSION_FACTOR = 1.0;
public final int LSC_SW_VERSION_CANID_LSC_BOOTLOADER_VERSION_STARTBIT = 32;
public final double LSC_SW_VERSION_CANID_LSC_BOOTLOADER_VERSION_OFFSET = 0.0;
public final double LSC_SW_VERSION_CANID_LSC_BOOTLOADER_VERSION_MIN = 0.0;
public final double LSC_SW_VERSION_CANID_LSC_BOOTLOADER_VERSION_MAX = 4.294967295E9;

public static class LSC_SW_Version_t { 

  public intLSC_Firmware_Version;
  public longLSC_Bootloader_Version;
}
/* public final int @IMU_DATA_Y CAN MESSAGE = 1611*/
public final int IMU_DATA_Y_ID = 1611;
public final int IMU_DATA_Y_IDE = 0;
public final int IMU_DATA_Y_DLC = 8;
public final double IMU_DATA_Y_ACCELEROMETER_YAXIS_FACTOR = 1.0;
public final int IMU_DATA_Y_CANID_ACCELEROMETER_YAXIS_STARTBIT = 0;
public final double IMU_DATA_Y_CANID_ACCELEROMETER_YAXIS_OFFSET = -2000.0;
public final double IMU_DATA_Y_CANID_ACCELEROMETER_YAXIS_MIN = -2000.0;
public final double IMU_DATA_Y_CANID_ACCELEROMETER_YAXIS_MAX = 2000.0;
public final double IMU_DATA_Y_GYROSCOPE_YAXIS_FACTOR = 1.0;
public final int IMU_DATA_Y_CANID_GYROSCOPE_YAXIS_STARTBIT = 32;
public final double IMU_DATA_Y_CANID_GYROSCOPE_YAXIS_OFFSET = -2000.0;
public final double IMU_DATA_Y_CANID_GYROSCOPE_YAXIS_MIN = -2000.0;
public final double IMU_DATA_Y_CANID_GYROSCOPE_YAXIS_MAX = 2000.0;

public static class IMU_Data_Y_t { 

  public intAccelerometer_Yaxis;
  public longGyroscope_Yaxis;
}
/* public final int @IC_PARAMTER_1 CAN MESSAGE = 1615*/
public final int IC_PARAMTER_1_ID = 1615;
public final int IC_PARAMTER_1_IDE = 0;
public final int IC_PARAMTER_1_DLC = 8;
public final double IC_PARAMTER_1_LED_TEMP_FACTOR = 0.1;
public final int IC_PARAMTER_1_CANID_LED_TEMP_STARTBIT = 0;
public final double IC_PARAMTER_1_CANID_LED_TEMP_OFFSET = -40.0;
public final double IC_PARAMTER_1_CANID_LED_TEMP_MIN = -40.0;
public final double IC_PARAMTER_1_CANID_LED_TEMP_MAX = 6513.5;
public final double IC_PARAMTER_1_TEMP_SENSOR_INPUT_CONTROLLER_FACTOR = 0.1;
public final int IC_PARAMTER_1_CANID_TEMP_SENSOR_INPUT_CONTROLLER_STARTBIT = 16;
public final double IC_PARAMTER_1_CANID_TEMP_SENSOR_INPUT_CONTROLLER_OFFSET = -40.0;
public final double IC_PARAMTER_1_CANID_TEMP_SENSOR_INPUT_CONTROLLER_MIN = -40.0;
public final double IC_PARAMTER_1_CANID_TEMP_SENSOR_INPUT_CONTROLLER_MAX = 6513.5;
public final double IC_PARAMTER_1_MAIN_INPUT_SUPPLY_FACTOR = 1.0;
public final int IC_PARAMTER_1_CANID_MAIN_INPUT_SUPPLY_STARTBIT = 32;
public final double IC_PARAMTER_1_CANID_MAIN_INPUT_SUPPLY_OFFSET = 0.0;
public final double IC_PARAMTER_1_CANID_MAIN_INPUT_SUPPLY_MIN = 0.0;
public final double IC_PARAMTER_1_CANID_MAIN_INPUT_SUPPLY_MAX = 65535.0;
public final double IC_PARAMTER_1_TEMP_SENSOR_INPUT_AMBIENT_FACTOR = 0.1;
public final int IC_PARAMTER_1_CANID_TEMP_SENSOR_INPUT_AMBIENT_STARTBIT = 48;
public final double IC_PARAMTER_1_CANID_TEMP_SENSOR_INPUT_AMBIENT_OFFSET = -40.0;
public final double IC_PARAMTER_1_CANID_TEMP_SENSOR_INPUT_AMBIENT_MIN = -40.0;
public final double IC_PARAMTER_1_CANID_TEMP_SENSOR_INPUT_AMBIENT_MAX = 6513.5;

public static class IC_Paramter_1_t { 

  public intLED_Temp;
  public longTemp_Sensor_Input_Controller;
  public longMAin_Input_Supply;
  public longTemp_Sensor_Input_Ambient;
}
/* public final int @ICM_DIGITAL_INPUT CAN MESSAGE = 1616*/
public final int ICM_DIGITAL_INPUT_ID = 1616;
public final int ICM_DIGITAL_INPUT_IDE = 0;
public final int ICM_DIGITAL_INPUT_DLC = 8;
public final double ICM_DIGITAL_INPUT_BACKLIGHT_DRIVER_FAULT_INPUT_FACTOR = 1.0;
public final int ICM_DIGITAL_INPUT_CANID_BACKLIGHT_DRIVER_FAULT_INPUT_STARTBIT = 0;
public final double ICM_DIGITAL_INPUT_CANID_BACKLIGHT_DRIVER_FAULT_INPUT_OFFSET = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_BACKLIGHT_DRIVER_FAULT_INPUT_MIN = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_BACKLIGHT_DRIVER_FAULT_INPUT_MAX = 1.0;
public final double ICM_DIGITAL_INPUT_AMBIENT_LIGHT_SENSOR_INTERRUPT_FACTOR = 1.0;
public final int ICM_DIGITAL_INPUT_CANID_AMBIENT_LIGHT_SENSOR_INTERRUPT_STARTBIT = 1;
public final double ICM_DIGITAL_INPUT_CANID_AMBIENT_LIGHT_SENSOR_INTERRUPT_OFFSET = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_AMBIENT_LIGHT_SENSOR_INTERRUPT_MIN = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_AMBIENT_LIGHT_SENSOR_INTERRUPT_MAX = 1.0;
public final double ICM_DIGITAL_INPUT_AMBIENT_TEMP_SENSOR_INTERRUPT_FACTOR = 1.0;
public final int ICM_DIGITAL_INPUT_CANID_AMBIENT_TEMP_SENSOR_INTERRUPT_STARTBIT = 2;
public final double ICM_DIGITAL_INPUT_CANID_AMBIENT_TEMP_SENSOR_INTERRUPT_OFFSET = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_AMBIENT_TEMP_SENSOR_INTERRUPT_MIN = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_AMBIENT_TEMP_SENSOR_INTERRUPT_MAX = 1.0;
public final double ICM_DIGITAL_INPUT_WARNING_STATUS_FACTOR = 1.0;
public final int ICM_DIGITAL_INPUT_CANID_WARNING_STATUS_STARTBIT = 3;
public final double ICM_DIGITAL_INPUT_CANID_WARNING_STATUS_OFFSET = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_WARNING_STATUS_MIN = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_WARNING_STATUS_MAX = 1.0;
public final double ICM_DIGITAL_INPUT_ERROR_STATUS_FACTOR = 1.0;
public final int ICM_DIGITAL_INPUT_CANID_ERROR_STATUS_STARTBIT = 4;
public final double ICM_DIGITAL_INPUT_CANID_ERROR_STATUS_OFFSET = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_ERROR_STATUS_MIN = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_ERROR_STATUS_MAX = 1.0;
public final double ICM_DIGITAL_INPUT_WARNING_COUNTER_FACTOR = 1.0;
public final int ICM_DIGITAL_INPUT_CANID_WARNING_COUNTER_STARTBIT = 8;
public final double ICM_DIGITAL_INPUT_CANID_WARNING_COUNTER_OFFSET = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_WARNING_COUNTER_MIN = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_WARNING_COUNTER_MAX = 255.0;
public final double ICM_DIGITAL_INPUT_ERROR_COUNTER_FACTOR = 1.0;
public final int ICM_DIGITAL_INPUT_CANID_ERROR_COUNTER_STARTBIT = 16;
public final double ICM_DIGITAL_INPUT_CANID_ERROR_COUNTER_OFFSET = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_ERROR_COUNTER_MIN = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_ERROR_COUNTER_MAX = 255.0;
public final double ICM_DIGITAL_INPUT_RESET_COUNTER_FACTOR = 1.0;
public final int ICM_DIGITAL_INPUT_CANID_RESET_COUNTER_STARTBIT = 24;
public final double ICM_DIGITAL_INPUT_CANID_RESET_COUNTER_OFFSET = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_RESET_COUNTER_MIN = 0.0;
public final double ICM_DIGITAL_INPUT_CANID_RESET_COUNTER_MAX = 255.0;

public static class ICM_Digital_Input_t { 

  public intBacklight_Driver_Fault_Input;
  public longAmbient_Light_Sensor_Interrupt;
  public longAmbient_Temp_Sensor_Interrupt;
  public longWarning_Status;
  public longError_Status;
  public longWarning_Counter;
  public longError_Counter;
  public longReset_Counter;
}
/* public final int @IMU_DATA_Z CAN MESSAGE = 1627*/
public final int IMU_DATA_Z_ID = 1627;
public final int IMU_DATA_Z_IDE = 0;
public final int IMU_DATA_Z_DLC = 8;
public final double IMU_DATA_Z_ACCELEROMETER_ZAXIS_FACTOR = 1.0;
public final int IMU_DATA_Z_CANID_ACCELEROMETER_ZAXIS_STARTBIT = 0;
public final double IMU_DATA_Z_CANID_ACCELEROMETER_ZAXIS_OFFSET = -2000.0;
public final double IMU_DATA_Z_CANID_ACCELEROMETER_ZAXIS_MIN = -2000.0;
public final double IMU_DATA_Z_CANID_ACCELEROMETER_ZAXIS_MAX = 2000.0;
public final double IMU_DATA_Z_GYROSCOPE_ZAXIS_FACTOR = 1.0;
public final int IMU_DATA_Z_CANID_GYROSCOPE_ZAXIS_STARTBIT = 32;
public final double IMU_DATA_Z_CANID_GYROSCOPE_ZAXIS_OFFSET = -2000.0;
public final double IMU_DATA_Z_CANID_GYROSCOPE_ZAXIS_MIN = -2000.0;
public final double IMU_DATA_Z_CANID_GYROSCOPE_ZAXIS_MAX = 2000.0;

public static class IMU_Data_Z_t { 

  public intAccelerometer_Zaxis;
  public longGyroscope_Zaxis;
}
/* public final int @BMS_SOFTWARE_VERSIONS CAN MESSAGE = 1638*/
public final int BMS_SOFTWARE_VERSIONS_ID = 1638;
public final int BMS_SOFTWARE_VERSIONS_IDE = 0;
public final int BMS_SOFTWARE_VERSIONS_DLC = 8;
public final double BMS_SOFTWARE_VERSIONS_BMS_FIRMWARE_VERSION_FACTOR = 1.0;
public final int BMS_SOFTWARE_VERSIONS_CANID_BMS_FIRMWARE_VERSION_STARTBIT = 0;
public final double BMS_SOFTWARE_VERSIONS_CANID_BMS_FIRMWARE_VERSION_OFFSET = 0.0;
public final double BMS_SOFTWARE_VERSIONS_CANID_BMS_FIRMWARE_VERSION_MIN = 0.0;
public final double BMS_SOFTWARE_VERSIONS_CANID_BMS_FIRMWARE_VERSION_MAX = 4.294967295E9;
public final double BMS_SOFTWARE_VERSIONS_BMS_BOOTLOADER_VERSION_FACTOR = 1.0;
public final int BMS_SOFTWARE_VERSIONS_CANID_BMS_BOOTLOADER_VERSION_STARTBIT = 32;
public final double BMS_SOFTWARE_VERSIONS_CANID_BMS_BOOTLOADER_VERSION_OFFSET = 0.0;
public final double BMS_SOFTWARE_VERSIONS_CANID_BMS_BOOTLOADER_VERSION_MIN = 0.0;
public final double BMS_SOFTWARE_VERSIONS_CANID_BMS_BOOTLOADER_VERSION_MAX = 4.294967295E9;

public static class BMS_SOFTWARE_VERSIONS_t { 

  public intBMS_Firmware_Version;
  public longBMS_Bootloader_Version;
}
/* public final int @ABS_SOFTWARE_VERSION CAN MESSAGE = 1639*/
public final int ABS_SOFTWARE_VERSION_ID = 1639;
public final int ABS_SOFTWARE_VERSION_IDE = 0;
public final int ABS_SOFTWARE_VERSION_DLC = 8;
public final double ABS_SOFTWARE_VERSION_ABS_FIRMWARE_VERSION_FACTOR = 1.0;
public final int ABS_SOFTWARE_VERSION_CANID_ABS_FIRMWARE_VERSION_STARTBIT = 0;
public final double ABS_SOFTWARE_VERSION_CANID_ABS_FIRMWARE_VERSION_OFFSET = 0.0;
public final double ABS_SOFTWARE_VERSION_CANID_ABS_FIRMWARE_VERSION_MIN = 0.0;
public final double ABS_SOFTWARE_VERSION_CANID_ABS_FIRMWARE_VERSION_MAX = 4.294967295E9;
public final double ABS_SOFTWARE_VERSION_ABS_BOOTLOADER_VERSION_FACTOR = 1.0;
public final int ABS_SOFTWARE_VERSION_CANID_ABS_BOOTLOADER_VERSION_STARTBIT = 32;
public final double ABS_SOFTWARE_VERSION_CANID_ABS_BOOTLOADER_VERSION_OFFSET = 0.0;
public final double ABS_SOFTWARE_VERSION_CANID_ABS_BOOTLOADER_VERSION_MIN = 0.0;
public final double ABS_SOFTWARE_VERSION_CANID_ABS_BOOTLOADER_VERSION_MAX = 4.294967295E9;

public static class ABS_Software_Version_t { 

  public intABS_Firmware_version;
  public longABS_Bootloader_version;
}
/* public final int @BMS_HARDWARE_VERSION CAN MESSAGE = 1640*/
public final int BMS_HARDWARE_VERSION_ID = 1640;
public final int BMS_HARDWARE_VERSION_IDE = 0;
public final int BMS_HARDWARE_VERSION_DLC = 8;
public final double BMS_HARDWARE_VERSION_BMS_HARDWARE_VERSION_FACTOR = 1.0;
public final int BMS_HARDWARE_VERSION_CANID_BMS_HARDWARE_VERSION_STARTBIT = 0;
public final double BMS_HARDWARE_VERSION_CANID_BMS_HARDWARE_VERSION_OFFSET = 0.0;
public final double BMS_HARDWARE_VERSION_CANID_BMS_HARDWARE_VERSION_MIN = 0.0;
public final double BMS_HARDWARE_VERSION_CANID_BMS_HARDWARE_VERSION_MAX = 4.294967295E9;

public static class BMS_HARDWARE_VERSION_t { 

  public intBMS_Hardware_Version;
}
/* public final int @ABS_HARDWARE_VERSION CAN MESSAGE = 1641*/
public final int ABS_HARDWARE_VERSION_ID = 1641;
public final int ABS_HARDWARE_VERSION_IDE = 0;
public final int ABS_HARDWARE_VERSION_DLC = 8;
public final double ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_FACTOR = 1.0;
public final int ABS_HARDWARE_VERSION_CANID_ABS_HARDWARE_VERSION_STARTBIT = 0;
public final double ABS_HARDWARE_VERSION_CANID_ABS_HARDWARE_VERSION_OFFSET = 0.0;
public final double ABS_HARDWARE_VERSION_CANID_ABS_HARDWARE_VERSION_MIN = 0.0;
public final double ABS_HARDWARE_VERSION_CANID_ABS_HARDWARE_VERSION_MAX = 4.294967295E9;

public static class ABS_Hardware_Version_t { 

  public intABS_Hardware_version;
}
/* public final int @BMS_DIAGNOSTIC_REQUEST CAN MESSAGE = 1652*/
public final int BMS_DIAGNOSTIC_REQUEST_ID = 1652;
public final int BMS_DIAGNOSTIC_REQUEST_IDE = 0;
public final int BMS_DIAGNOSTIC_REQUEST_DLC = 8;
public final double BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_FACTOR = 1.0;
public final int BMS_DIAGNOSTIC_REQUEST_CANID_BMS_DIAG_REQUEST_STARTBIT = 0;
public final double BMS_DIAGNOSTIC_REQUEST_CANID_BMS_DIAG_REQUEST_OFFSET = 0.0;
public final double BMS_DIAGNOSTIC_REQUEST_CANID_BMS_DIAG_REQUEST_MIN = 0.0;
public final double BMS_DIAGNOSTIC_REQUEST_CANID_BMS_DIAG_REQUEST_MAX = 0.0;

public static class BMS_Diagnostic_Request_t { 

  public intBMS_Diag_Request;
}
/* public final int @BMS_DIAGNOSTIC_RESPONSE CAN MESSAGE = 1653*/
public final int BMS_DIAGNOSTIC_RESPONSE_ID = 1653;
public final int BMS_DIAGNOSTIC_RESPONSE_IDE = 0;
public final int BMS_DIAGNOSTIC_RESPONSE_DLC = 8;
public final double BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_FACTOR = 1.0;
public final int BMS_DIAGNOSTIC_RESPONSE_CANID_BMS_DIAG_RESP_STARTBIT = 0;
public final double BMS_DIAGNOSTIC_RESPONSE_CANID_BMS_DIAG_RESP_OFFSET = 0.0;
public final double BMS_DIAGNOSTIC_RESPONSE_CANID_BMS_DIAG_RESP_MIN = 0.0;
public final double BMS_DIAGNOSTIC_RESPONSE_CANID_BMS_DIAG_RESP_MAX = 1.84467440737096E19;

public static class BMS_Diagnostic_Response_t { 

  public intBMS_Diag_Resp;
}
/* public final int @OTA_STATUS CAN MESSAGE = 1664*/
public final int OTA_STATUS_ID = 1664;
public final int OTA_STATUS_IDE = 0;
public final int OTA_STATUS_DLC = 8;
public final double OTA_STATUS_OTA_STATUS_INFO_FACTOR = 1.0;
public final int OTA_STATUS_CANID_OTA_STATUS_INFO_STARTBIT = 0;
public final double OTA_STATUS_CANID_OTA_STATUS_INFO_OFFSET = 0.0;
public final double OTA_STATUS_CANID_OTA_STATUS_INFO_MIN = 0.0;
public final double OTA_STATUS_CANID_OTA_STATUS_INFO_MAX = 0.0;

public static class OTA_Status_t { 

  public intOTA_Status_Info;
}
/* public final int @VEHICLE_LEFT_SW_CUBE CAN MESSAGE = 1722*/
public final int VEHICLE_LEFT_SW_CUBE_ID = 1722;
public final int VEHICLE_LEFT_SW_CUBE_IDE = 0;
public final int VEHICLE_LEFT_SW_CUBE_DLC = 8;
public final double VEHICLE_LEFT_SW_CUBE_HIGH_BEAM_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_HIGH_BEAM_STARTBIT = 0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HIGH_BEAM_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HIGH_BEAM_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HIGH_BEAM_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_LOW_BEAM_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_LOW_BEAM_STARTBIT = 1;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LOW_BEAM_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LOW_BEAM_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LOW_BEAM_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_PASS_BEAM_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_PASS_BEAM_STARTBIT = 2;
public final double VEHICLE_LEFT_SW_CUBE_CANID_PASS_BEAM_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_PASS_BEAM_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_PASS_BEAM_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_LEFT_INDICATOR_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_LEFT_INDICATOR_STARTBIT = 3;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LEFT_INDICATOR_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LEFT_INDICATOR_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LEFT_INDICATOR_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_CRUISE_CONTROL_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_CRUISE_CONTROL_STARTBIT = 4;
public final double VEHICLE_LEFT_SW_CUBE_CANID_CRUISE_CONTROL_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_CRUISE_CONTROL_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_CRUISE_CONTROL_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_RIGHT_INDICATOR_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_RIGHT_INDICATOR_STARTBIT = 5;
public final double VEHICLE_LEFT_SW_CUBE_CANID_RIGHT_INDICATOR_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_RIGHT_INDICATOR_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_RIGHT_INDICATOR_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_HORN_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_HORN_STARTBIT = 6;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HORN_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HORN_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HORN_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_ECO_MODE_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_ECO_MODE_STARTBIT = 7;
public final double VEHICLE_LEFT_SW_CUBE_CANID_ECO_MODE_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_ECO_MODE_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_ECO_MODE_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_TOUR_MODE_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_TOUR_MODE_STARTBIT = 8;
public final double VEHICLE_LEFT_SW_CUBE_CANID_TOUR_MODE_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_TOUR_MODE_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_TOUR_MODE_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_SPORTS_MODE_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_SPORTS_MODE_STARTBIT = 9;
public final double VEHICLE_LEFT_SW_CUBE_CANID_SPORTS_MODE_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_SPORTS_MODE_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_SPORTS_MODE_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_TURBO_MODE_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_TURBO_MODE_STARTBIT = 10;
public final double VEHICLE_LEFT_SW_CUBE_CANID_TURBO_MODE_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_TURBO_MODE_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_TURBO_MODE_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_NEUTRAL_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_NEUTRAL_STARTBIT = 11;
public final double VEHICLE_LEFT_SW_CUBE_CANID_NEUTRAL_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_NEUTRAL_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_NEUTRAL_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_PARK_ASSIST_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_PARK_ASSIST_STARTBIT = 12;
public final double VEHICLE_LEFT_SW_CUBE_CANID_PARK_ASSIST_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_PARK_ASSIST_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_PARK_ASSIST_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_HOME_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_HOME_STARTBIT = 15;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HOME_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HOME_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HOME_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_JOYSTICK_UP_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_UP_STARTBIT = 16;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_UP_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_UP_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_UP_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_JOYSTICK_DOWN_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_DOWN_STARTBIT = 17;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_DOWN_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_DOWN_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_DOWN_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_JOYSTICK_LEFT_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_LEFT_STARTBIT = 18;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_LEFT_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_LEFT_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_LEFT_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_JOYSTICK_RIGHT_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_RIGHT_STARTBIT = 19;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_RIGHT_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_RIGHT_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_RIGHT_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_JOYSTICK_SET_RST_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_SET_RST_STARTBIT = 20;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_SET_RST_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_SET_RST_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_SET_RST_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_LSC_POWER_STATUS_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_LSC_POWER_STATUS_STARTBIT = 21;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LSC_POWER_STATUS_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LSC_POWER_STATUS_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LSC_POWER_STATUS_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_JOYSTICK_FAULT_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_FAULT_STARTBIT = 22;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_FAULT_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_FAULT_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_FAULT_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_MODE_SELECTOR_ROLLER_FAULT_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_MODE_SELECTOR_ROLLER_FAULT_STARTBIT = 23;
public final double VEHICLE_LEFT_SW_CUBE_CANID_MODE_SELECTOR_ROLLER_FAULT_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_MODE_SELECTOR_ROLLER_FAULT_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_MODE_SELECTOR_ROLLER_FAULT_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_LEFT_INDICATOR_BUTTON_FAULT_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_LEFT_INDICATOR_BUTTON_FAULT_STARTBIT = 24;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LEFT_INDICATOR_BUTTON_FAULT_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LEFT_INDICATOR_BUTTON_FAULT_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LEFT_INDICATOR_BUTTON_FAULT_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_CRUISE_CONTROL_BUTTON_FAULT_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_CRUISE_CONTROL_BUTTON_FAULT_STARTBIT = 25;
public final double VEHICLE_LEFT_SW_CUBE_CANID_CRUISE_CONTROL_BUTTON_FAULT_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_CRUISE_CONTROL_BUTTON_FAULT_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_CRUISE_CONTROL_BUTTON_FAULT_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_HORN_BUTTON_FAULT_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_HORN_BUTTON_FAULT_STARTBIT = 26;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HORN_BUTTON_FAULT_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HORN_BUTTON_FAULT_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HORN_BUTTON_FAULT_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_HOME_BUTTON_FAULT_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_HOME_BUTTON_FAULT_STARTBIT = 27;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HOME_BUTTON_FAULT_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HOME_BUTTON_FAULT_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_HOME_BUTTON_FAULT_MAX = 1.0;
public final double VEHICLE_LEFT_SW_CUBE_LSC_SYSTEM_FAULT_FACTOR = 1.0;
public final int VEHICLE_LEFT_SW_CUBE_CANID_LSC_SYSTEM_FAULT_STARTBIT = 28;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LSC_SYSTEM_FAULT_OFFSET = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LSC_SYSTEM_FAULT_MIN = 0.0;
public final double VEHICLE_LEFT_SW_CUBE_CANID_LSC_SYSTEM_FAULT_MAX = 1.0;

public static class Vehicle_left_SW_Cube_t { 

  public intHigh_beam;
  public longLow_beam;
  public longPass_beam;
  public longLeft_Indicator;
  public longCruise_Control;
  public longRight_Indicator;
  public longHorn;
  public longEco_Mode;
  public longTour_Mode;
  public longSports_Mode;
  public longTurbo_mode;
  public longNeutral;
  public longPark_Assist;
  public longHome;
  public longJoystick_Up;
  public longJoystick_Down;
  public longJoystick_Left;
  public longJoystick_Right;
  public longJoystick_SET_RST;
  public longLSC_Power_Status;
  public longJoystick_fault;
  public longMode_Selector_Roller_fault;
  public longLeft_Indicator_Button_fault;
  public longCruise_Control_Button_fault;
  public longHorn_Button_fault;
  public longHome_Button_fault;
  public longLSC_System_fault;
}
/* public final int @VEHICLE_RIGHT_SW_CUBE CAN MESSAGE = 1723*/
public final int VEHICLE_RIGHT_SW_CUBE_ID = 1723;
public final int VEHICLE_RIGHT_SW_CUBE_IDE = 0;
public final int VEHICLE_RIGHT_SW_CUBE_DLC = 8;
public final double VEHICLE_RIGHT_SW_CUBE_VOICE_ASSIST_FACTOR = 1.0;
public final int VEHICLE_RIGHT_SW_CUBE_CANID_VOICE_ASSIST_STARTBIT = 0;
public final double VEHICLE_RIGHT_SW_CUBE_CANID_VOICE_ASSIST_OFFSET = 0.0;
public final double VEHICLE_RIGHT_SW_CUBE_CANID_VOICE_ASSIST_MIN = 0.0;
public final double VEHICLE_RIGHT_SW_CUBE_CANID_VOICE_ASSIST_MAX = 1.0;
public final double VEHICLE_RIGHT_SW_CUBE_REGEN_FACTOR = 1.0;
public final int VEHICLE_RIGHT_SW_CUBE_CANID_REGEN_STARTBIT = 1;
public final double VEHICLE_RIGHT_SW_CUBE_CANID_REGEN_OFFSET = 0.0;
public final double VEHICLE_RIGHT_SW_CUBE_CANID_REGEN_MIN = 0.0;
public final double VEHICLE_RIGHT_SW_CUBE_CANID_REGEN_MAX = 1.0;
public final double VEHICLE_RIGHT_SW_CUBE_KEY_IGNITION_FACTOR = 1.0;
public final int VEHICLE_RIGHT_SW_CUBE_CANID_KEY_IGNITION_STARTBIT = 2;
public final double VEHICLE_RIGHT_SW_CUBE_CANID_KEY_IGNITION_OFFSET = 0.0;
public final double VEHICLE_RIGHT_SW_CUBE_CANID_KEY_IGNITION_MIN = 0.0;
public final double VEHICLE_RIGHT_SW_CUBE_CANID_KEY_IGNITION_MAX = 1.0;

public static class Vehicle_Right_SW_Cube_t { 

  public intVoice_Assist;
  public longRegen;
  public longKey_Ignition;
}
/* public final int @ICM_ERROR CAN MESSAGE = 1799*/
public final int ICM_ERROR_ID = 1799;
public final int ICM_ERROR_IDE = 0;
public final int ICM_ERROR_DLC = 8;
public final double ICM_ERROR_INPUT_OVERVOLTAGE_FACTOR = 1.0;
public final int ICM_ERROR_CANID_INPUT_OVERVOLTAGE_STARTBIT = 0;
public final double ICM_ERROR_CANID_INPUT_OVERVOLTAGE_OFFSET = 0.0;
public final double ICM_ERROR_CANID_INPUT_OVERVOLTAGE_MIN = 0.0;
public final double ICM_ERROR_CANID_INPUT_OVERVOLTAGE_MAX = 1.0;
public final double ICM_ERROR_INPUT_UNCERVOLTAGE_FACTOR = 1.0;
public final int ICM_ERROR_CANID_INPUT_UNCERVOLTAGE_STARTBIT = 1;
public final double ICM_ERROR_CANID_INPUT_UNCERVOLTAGE_OFFSET = 0.0;
public final double ICM_ERROR_CANID_INPUT_UNCERVOLTAGE_MIN = 0.0;
public final double ICM_ERROR_CANID_INPUT_UNCERVOLTAGE_MAX = 1.0;
public final double ICM_ERROR_INPUT_OVERCURRENT_FACTOR = 1.0;
public final int ICM_ERROR_CANID_INPUT_OVERCURRENT_STARTBIT = 2;
public final double ICM_ERROR_CANID_INPUT_OVERCURRENT_OFFSET = 0.0;
public final double ICM_ERROR_CANID_INPUT_OVERCURRENT_MIN = 0.0;
public final double ICM_ERROR_CANID_INPUT_OVERCURRENT_MAX = 1.0;
public final double ICM_ERROR_OUTPUT_OVERCURRENT_FACTOR = 1.0;
public final int ICM_ERROR_CANID_OUTPUT_OVERCURRENT_STARTBIT = 3;
public final double ICM_ERROR_CANID_OUTPUT_OVERCURRENT_OFFSET = 0.0;
public final double ICM_ERROR_CANID_OUTPUT_OVERCURRENT_MIN = 0.0;
public final double ICM_ERROR_CANID_OUTPUT_OVERCURRENT_MAX = 1.0;
public final double ICM_ERROR_HIGH_TEMP_FACTOR = 1.0;
public final int ICM_ERROR_CANID_HIGH_TEMP_STARTBIT = 4;
public final double ICM_ERROR_CANID_HIGH_TEMP_OFFSET = 0.0;
public final double ICM_ERROR_CANID_HIGH_TEMP_MIN = 0.0;
public final double ICM_ERROR_CANID_HIGH_TEMP_MAX = 0.0;
public final double ICM_ERROR_LOW_TEMP_FACTOR = 1.0;
public final int ICM_ERROR_CANID_LOW_TEMP_STARTBIT = 5;
public final double ICM_ERROR_CANID_LOW_TEMP_OFFSET = 0.0;
public final double ICM_ERROR_CANID_LOW_TEMP_MIN = 0.0;
public final double ICM_ERROR_CANID_LOW_TEMP_MAX = 1.0;
public final double ICM_ERROR_TEMP_SENSOR_FAILURE_FACTOR = 1.0;
public final int ICM_ERROR_CANID_TEMP_SENSOR_FAILURE_STARTBIT = 6;
public final double ICM_ERROR_CANID_TEMP_SENSOR_FAILURE_OFFSET = 0.0;
public final double ICM_ERROR_CANID_TEMP_SENSOR_FAILURE_MIN = 0.0;
public final double ICM_ERROR_CANID_TEMP_SENSOR_FAILURE_MAX = 1.0;
public final double ICM_ERROR_OUTPUT_SHORT_CIRCUIT_FAILURE_FACTOR = 1.0;
public final int ICM_ERROR_CANID_OUTPUT_SHORT_CIRCUIT_FAILURE_STARTBIT = 7;
public final double ICM_ERROR_CANID_OUTPUT_SHORT_CIRCUIT_FAILURE_OFFSET = 0.0;
public final double ICM_ERROR_CANID_OUTPUT_SHORT_CIRCUIT_FAILURE_MIN = 0.0;
public final double ICM_ERROR_CANID_OUTPUT_SHORT_CIRCUIT_FAILURE_MAX = 1.0;
public final double ICM_ERROR_RESERVED_FACTOR = 1.0;
public final int ICM_ERROR_CANID_RESERVED_STARTBIT = 8;
public final double ICM_ERROR_CANID_RESERVED_OFFSET = 0.0;
public final double ICM_ERROR_CANID_RESERVED_MIN = 0.0;
public final double ICM_ERROR_CANID_RESERVED_MAX = 1.0;

public static class ICM_Error_t { 

  public intInput_OverVoltage;
  public longInput_UncerVoltage;
  public longInput_OverCurrent;
  public longOutput_OverCurrent;
  public longHigh_Temp;
  public longLow_Temp;
  public longTemp_Sensor_Failure;
  public longOutput_Short_Circuit_Failure;
  public longReserved;
}
/* public final int @TIMESTAMP_SYNC_MESSAGE CAN MESSAGE = 1807*/
public final int TIMESTAMP_SYNC_MESSAGE_ID = 1807;
public final int TIMESTAMP_SYNC_MESSAGE_IDE = 0;
public final int TIMESTAMP_SYNC_MESSAGE_DLC = 8;
public final double TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_FACTOR = 1.0;
public final int TIMESTAMP_SYNC_MESSAGE_CANID_VCU_TIMESTAMP_STARTBIT = 0;
public final double TIMESTAMP_SYNC_MESSAGE_CANID_VCU_TIMESTAMP_OFFSET = 0.0;
public final double TIMESTAMP_SYNC_MESSAGE_CANID_VCU_TIMESTAMP_MIN = 0.0;
public final double TIMESTAMP_SYNC_MESSAGE_CANID_VCU_TIMESTAMP_MAX = 1.84467440737096E19;

public static class TimeStamp_Sync_Message_t { 

  public intVCU_TimeStamp;
}
/* public final int @RSC_DIAGNOSTIC_REQUEST CAN MESSAGE = 1953*/
public final int RSC_DIAGNOSTIC_REQUEST_ID = 1953;
public final int RSC_DIAGNOSTIC_REQUEST_IDE = 0;
public final int RSC_DIAGNOSTIC_REQUEST_DLC = 8;
public final double RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_FACTOR = 1.0;
public final int RSC_DIAGNOSTIC_REQUEST_CANID_RSC_DIAG_REQ_STARTBIT = 0;
public final double RSC_DIAGNOSTIC_REQUEST_CANID_RSC_DIAG_REQ_OFFSET = 0.0;
public final double RSC_DIAGNOSTIC_REQUEST_CANID_RSC_DIAG_REQ_MIN = 0.0;
public final double RSC_DIAGNOSTIC_REQUEST_CANID_RSC_DIAG_REQ_MAX = 1.84467440737096E19;

public static class RSC_Diagnostic_Request_t { 

  public intRSC_Diag_Req;
}
/* public final int @RSC_DIAGNOSTIC_RESPONSE CAN MESSAGE = 1954*/
public final int RSC_DIAGNOSTIC_RESPONSE_ID = 1954;
public final int RSC_DIAGNOSTIC_RESPONSE_IDE = 0;
public final int RSC_DIAGNOSTIC_RESPONSE_DLC = 8;
public final double RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_FACTOR = 1.0;
public final int RSC_DIAGNOSTIC_RESPONSE_CANID_RSC_DIAG_RESP_STARTBIT = 0;
public final double RSC_DIAGNOSTIC_RESPONSE_CANID_RSC_DIAG_RESP_OFFSET = 0.0;
public final double RSC_DIAGNOSTIC_RESPONSE_CANID_RSC_DIAG_RESP_MIN = 0.0;
public final double RSC_DIAGNOSTIC_RESPONSE_CANID_RSC_DIAG_RESP_MAX = 1.84467440737096E19;

public static class RSC_Diagnostic_Response_t { 

  public intRSC_Diag_Resp;
}
/* public final int @LSC_DIAGNOSTIC_REQUEST CAN MESSAGE = 1955*/
public final int LSC_DIAGNOSTIC_REQUEST_ID = 1955;
public final int LSC_DIAGNOSTIC_REQUEST_IDE = 0;
public final int LSC_DIAGNOSTIC_REQUEST_DLC = 8;
public final double LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_FACTOR = 1.0;
public final int LSC_DIAGNOSTIC_REQUEST_CANID_LSC_DIAG_REQ_STARTBIT = 0;
public final double LSC_DIAGNOSTIC_REQUEST_CANID_LSC_DIAG_REQ_OFFSET = 0.0;
public final double LSC_DIAGNOSTIC_REQUEST_CANID_LSC_DIAG_REQ_MIN = 0.0;
public final double LSC_DIAGNOSTIC_REQUEST_CANID_LSC_DIAG_REQ_MAX = 1.84467440737096E19;

public static class LSC_Diagnostic_Request_t { 

  public intLSC_Diag_Req;
}
/* public final int @LSC_DIAGNOSTIC_RESPONSE CAN MESSAGE = 1956*/
public final int LSC_DIAGNOSTIC_RESPONSE_ID = 1956;
public final int LSC_DIAGNOSTIC_RESPONSE_IDE = 0;
public final int LSC_DIAGNOSTIC_RESPONSE_DLC = 8;
public final double LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_FACTOR = 1.0;
public final int LSC_DIAGNOSTIC_RESPONSE_CANID_LSC_DIAGNOSTIC_RESPONSE_STARTBIT = 0;
public final double LSC_DIAGNOSTIC_RESPONSE_CANID_LSC_DIAGNOSTIC_RESPONSE_OFFSET = 0.0;
public final double LSC_DIAGNOSTIC_RESPONSE_CANID_LSC_DIAGNOSTIC_RESPONSE_MIN = 0.0;
public final double LSC_DIAGNOSTIC_RESPONSE_CANID_LSC_DIAGNOSTIC_RESPONSE_MAX = 1.84467440737096E19;

public static class LSC_Diagnostic_Response_t { 

  public intLSC_Diagnostic_Response;
}
/* public final int @MCU_DIAGNOSTIC_REQUEST CAN MESSAGE = 1972*/
public final int MCU_DIAGNOSTIC_REQUEST_ID = 1972;
public final int MCU_DIAGNOSTIC_REQUEST_IDE = 0;
public final int MCU_DIAGNOSTIC_REQUEST_DLC = 8;
public final double MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_FACTOR = 1.0;
public final int MCU_DIAGNOSTIC_REQUEST_CANID_MCU_DIAG_REQUEST_STARTBIT = 0;
public final double MCU_DIAGNOSTIC_REQUEST_CANID_MCU_DIAG_REQUEST_OFFSET = 0.0;
public final double MCU_DIAGNOSTIC_REQUEST_CANID_MCU_DIAG_REQUEST_MIN = 0.0;
public final double MCU_DIAGNOSTIC_REQUEST_CANID_MCU_DIAG_REQUEST_MAX = 0.0;

public static class MCU_Diagnostic_Request_t { 

  public intMCU_Diag_Request;
}
/* public final int @MCU_DIAGNOSTIC_RESPONSE CAN MESSAGE = 1986*/
public final int MCU_DIAGNOSTIC_RESPONSE_ID = 1986;
public final int MCU_DIAGNOSTIC_RESPONSE_IDE = 0;
public final int MCU_DIAGNOSTIC_RESPONSE_DLC = 8;
public final double MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_FACTOR = 1.0;
public final int MCU_DIAGNOSTIC_RESPONSE_CANID_MCU_DIAGNOSTIC_RESPONSE_STARTBIT = 0;
public final double MCU_DIAGNOSTIC_RESPONSE_CANID_MCU_DIAGNOSTIC_RESPONSE_OFFSET = 0.0;
public final double MCU_DIAGNOSTIC_RESPONSE_CANID_MCU_DIAGNOSTIC_RESPONSE_MIN = 0.0;
public final double MCU_DIAGNOSTIC_RESPONSE_CANID_MCU_DIAGNOSTIC_RESPONSE_MAX = 1.84467440737096E19;

public static class MCU_Diagnostic_Response_t { 

  public intMCU_Diagnostic_Response;
}
/* public final int @OBC_DIAGNOSTIC_RESPONSE CAN MESSAGE = 1989*/
public final int OBC_DIAGNOSTIC_RESPONSE_ID = 1989;
public final int OBC_DIAGNOSTIC_RESPONSE_IDE = 0;
public final int OBC_DIAGNOSTIC_RESPONSE_DLC = 8;
public final double OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_FACTOR = 1.0;
public final int OBC_DIAGNOSTIC_RESPONSE_CANID_OBC_DIAG_RESP_STARTBIT = 0;
public final double OBC_DIAGNOSTIC_RESPONSE_CANID_OBC_DIAG_RESP_OFFSET = 0.0;
public final double OBC_DIAGNOSTIC_RESPONSE_CANID_OBC_DIAG_RESP_MIN = 0.0;
public final double OBC_DIAGNOSTIC_RESPONSE_CANID_OBC_DIAG_RESP_MAX = 1.84467440737096E19;

public static class OBC_Diagnostic_Response_t { 

  public intOBC_Diag_Resp;
}
/* public final int @ABS_DIAG_REQUEST CAN MESSAGE = 1992*/
public final int ABS_DIAG_REQUEST_ID = 1992;
public final int ABS_DIAG_REQUEST_IDE = 0;
public final int ABS_DIAG_REQUEST_DLC = 8;
public final double ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_FACTOR = 1.0;
public final int ABS_DIAG_REQUEST_CANID_ABS_DIAG_REQUEST_STARTBIT = 0;
public final double ABS_DIAG_REQUEST_CANID_ABS_DIAG_REQUEST_OFFSET = 0.0;
public final double ABS_DIAG_REQUEST_CANID_ABS_DIAG_REQUEST_MIN = 0.0;
public final double ABS_DIAG_REQUEST_CANID_ABS_DIAG_REQUEST_MAX = 1.84467440737096E19;

public static class ABS_Diag_Request_t { 

  public intABS_Diag_Request;
}
/* public final int @ABS_DIAG_RESPONSE CAN MESSAGE = 1993*/
public final int ABS_DIAG_RESPONSE_ID = 1993;
public final int ABS_DIAG_RESPONSE_IDE = 0;
public final int ABS_DIAG_RESPONSE_DLC = 8;
public final double ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_FACTOR = 1.0;
public final int ABS_DIAG_RESPONSE_CANID_ABS_DIAG_RESPONSE_STARTBIT = 0;
public final double ABS_DIAG_RESPONSE_CANID_ABS_DIAG_RESPONSE_OFFSET = 0.0;
public final double ABS_DIAG_RESPONSE_CANID_ABS_DIAG_RESPONSE_MIN = 0.0;
public final double ABS_DIAG_RESPONSE_CANID_ABS_DIAG_RESPONSE_MAX = 1.84467440737096E19;

public static class ABS_Diag_Response_t { 

  public intABS_Diag_Response;
}
/* public final int @OBC_DIAGNOSTIC_REQUEST CAN MESSAGE = 1996*/
public final int OBC_DIAGNOSTIC_REQUEST_ID = 1996;
public final int OBC_DIAGNOSTIC_REQUEST_IDE = 0;
public final int OBC_DIAGNOSTIC_REQUEST_DLC = 8;
public final double OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_FACTOR = 1.0;
public final int OBC_DIAGNOSTIC_REQUEST_CANID_OBC_DIAG_REQUEST_STARTBIT = 0;
public final double OBC_DIAGNOSTIC_REQUEST_CANID_OBC_DIAG_REQUEST_OFFSET = 0.0;
public final double OBC_DIAGNOSTIC_REQUEST_CANID_OBC_DIAG_REQUEST_MIN = 0.0;
public final double OBC_DIAGNOSTIC_REQUEST_CANID_OBC_DIAG_REQUEST_MAX = 0.0;

public static class OBC_Diagnostic_Request_t { 

  public intOBC_Diag_Request;
}
/* public final int @HU_DIAGNOSTIC_RESPONSE CAN MESSAGE = 2006*/
public final int HU_DIAGNOSTIC_RESPONSE_ID = 2006;
public final int HU_DIAGNOSTIC_RESPONSE_IDE = 0;
public final int HU_DIAGNOSTIC_RESPONSE_DLC = 8;
public final double HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_FACTOR = 1.0;
public final int HU_DIAGNOSTIC_RESPONSE_CANID_HU_DIAGNOSTIC_RESPONSE_STARTBIT = 0;
public final double HU_DIAGNOSTIC_RESPONSE_CANID_HU_DIAGNOSTIC_RESPONSE_OFFSET = 0.0;
public final double HU_DIAGNOSTIC_RESPONSE_CANID_HU_DIAGNOSTIC_RESPONSE_MIN = 0.0;
public final double HU_DIAGNOSTIC_RESPONSE_CANID_HU_DIAGNOSTIC_RESPONSE_MAX = 0.0;

public static class HU_Diagnostic_Response_t { 

  public intHU_Diagnostic_Response;
}
/* public final int @HU_DIAGNOSTIC_REQUEST CAN MESSAGE = 2007*/
public final int HU_DIAGNOSTIC_REQUEST_ID = 2007;
public final int HU_DIAGNOSTIC_REQUEST_IDE = 0;
public final int HU_DIAGNOSTIC_REQUEST_DLC = 8;
public final double HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_FACTOR = 1.0;
public final int HU_DIAGNOSTIC_REQUEST_CANID_HU_DIAG_REQ_STARTBIT = 0;
public final double HU_DIAGNOSTIC_REQUEST_CANID_HU_DIAG_REQ_OFFSET = 0.0;
public final double HU_DIAGNOSTIC_REQUEST_CANID_HU_DIAG_REQ_MIN = 0.0;
public final double HU_DIAGNOSTIC_REQUEST_CANID_HU_DIAG_REQ_MAX = 1.84467440737096E19;

public static class HU_Diagnostic_Request_t { 

  public intHU_Diag_Req;
}
/* public final int @ESCL_DIAGNOSTIC_RESPONSE CAN MESSAGE = 2008*/
public final int ESCL_DIAGNOSTIC_RESPONSE_ID = 2008;
public final int ESCL_DIAGNOSTIC_RESPONSE_IDE = 0;
public final int ESCL_DIAGNOSTIC_RESPONSE_DLC = 8;
public final double ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_FACTOR = 1.0;
public final int ESCL_DIAGNOSTIC_RESPONSE_CANID_ESCL_DIAGNOSTIC_RESPONSE_STARTBIT = 0;
public final double ESCL_DIAGNOSTIC_RESPONSE_CANID_ESCL_DIAGNOSTIC_RESPONSE_OFFSET = 0.0;
public final double ESCL_DIAGNOSTIC_RESPONSE_CANID_ESCL_DIAGNOSTIC_RESPONSE_MIN = 0.0;
public final double ESCL_DIAGNOSTIC_RESPONSE_CANID_ESCL_DIAGNOSTIC_RESPONSE_MAX = 1.84467440737096E19;

public static class ESCL_Diagnostic_Response_t { 

  public intESCL_Diagnostic_Response;
}
/* public final int @ESCL_DIAGNOSTIC_REQUEST CAN MESSAGE = 2009*/
public final int ESCL_DIAGNOSTIC_REQUEST_ID = 2009;
public final int ESCL_DIAGNOSTIC_REQUEST_IDE = 0;
public final int ESCL_DIAGNOSTIC_REQUEST_DLC = 8;
public final double ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_FACTOR = 1.0;
public final int ESCL_DIAGNOSTIC_REQUEST_CANID_ESCL_DIAG_REQ_STARTBIT = 0;
public final double ESCL_DIAGNOSTIC_REQUEST_CANID_ESCL_DIAG_REQ_OFFSET = 0.0;
public final double ESCL_DIAGNOSTIC_REQUEST_CANID_ESCL_DIAG_REQ_MIN = 0.0;
public final double ESCL_DIAGNOSTIC_REQUEST_CANID_ESCL_DIAG_REQ_MAX = 1.84467440737096E19;

public static class ESCL_Diagnostic_Request_t { 

  public intESCL_Diag_Req;
}
/* public final int @BCM_DIAGNOSTIC_RESPONSE CAN MESSAGE = 2010*/
public final int BCM_DIAGNOSTIC_RESPONSE_ID = 2010;
public final int BCM_DIAGNOSTIC_RESPONSE_IDE = 0;
public final int BCM_DIAGNOSTIC_RESPONSE_DLC = 8;
public final double BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_FACTOR = 1.0;
public final int BCM_DIAGNOSTIC_RESPONSE_CANID_BCM_DIAG_RESPONSE_STARTBIT = 0;
public final double BCM_DIAGNOSTIC_RESPONSE_CANID_BCM_DIAG_RESPONSE_OFFSET = 0.0;
public final double BCM_DIAGNOSTIC_RESPONSE_CANID_BCM_DIAG_RESPONSE_MIN = 0.0;
public final double BCM_DIAGNOSTIC_RESPONSE_CANID_BCM_DIAG_RESPONSE_MAX = 1.84467440737096E19;

public static class BCM_Diagnostic_Response_t { 

  public intBCM_Diag_Response;
}
/* public final int @BCM_DIAGNOSTIC_REQUEST CAN MESSAGE = 2011*/
public final int BCM_DIAGNOSTIC_REQUEST_ID = 2011;
public final int BCM_DIAGNOSTIC_REQUEST_IDE = 0;
public final int BCM_DIAGNOSTIC_REQUEST_DLC = 8;
public final double BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_FACTOR = 1.0;
public final int BCM_DIAGNOSTIC_REQUEST_CANID_BCM_DIAG_REQUEST_STARTBIT = 0;
public final double BCM_DIAGNOSTIC_REQUEST_CANID_BCM_DIAG_REQUEST_OFFSET = 0.0;
public final double BCM_DIAGNOSTIC_REQUEST_CANID_BCM_DIAG_REQUEST_MIN = 0.0;
public final double BCM_DIAGNOSTIC_REQUEST_CANID_BCM_DIAG_REQUEST_MAX = 1.84467440737096E19;

public static class BCM_Diagnostic_Request_t { 

  public intBCM_Diag_Request;
}
/* public final int @FUNC_DIAGNOSTIC_REQUEST CAN MESSAGE = 2029*/
public final int FUNC_DIAGNOSTIC_REQUEST_ID = 2029;
public final int FUNC_DIAGNOSTIC_REQUEST_IDE = 0;
public final int FUNC_DIAGNOSTIC_REQUEST_DLC = 8;
public final double FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_FACTOR = 1.0;
public final int FUNC_DIAGNOSTIC_REQUEST_CANID_FUNCTIONAL_DIAG_REQUEST_STARTBIT = 0;
public final double FUNC_DIAGNOSTIC_REQUEST_CANID_FUNCTIONAL_DIAG_REQUEST_OFFSET = 0.0;
public final double FUNC_DIAGNOSTIC_REQUEST_CANID_FUNCTIONAL_DIAG_REQUEST_MIN = 0.0;
public final double FUNC_DIAGNOSTIC_REQUEST_CANID_FUNCTIONAL_DIAG_REQUEST_MAX = 0.0;

public static class Func_Diagnostic_Request_t { 

  public intFunctional_Diag_Request;
}
/* public final int @BATTERY_STATUS_INFO CAN MESSAGE = 302*/
public final int BATTERY_STATUS_INFO_ID = 302;
public final int BATTERY_STATUS_INFO_IDE = 0;
public final int BATTERY_STATUS_INFO_DLC = 8;
public final double BATTERY_STATUS_INFO_BATTERY_CURRENT_FACTOR = 0.01;
public final int BATTERY_STATUS_INFO_CANID_BATTERY_CURRENT_STARTBIT = 0;
public final double BATTERY_STATUS_INFO_CANID_BATTERY_CURRENT_OFFSET = -300.0;
public final double BATTERY_STATUS_INFO_CANID_BATTERY_CURRENT_MIN = -300.0;
public final double BATTERY_STATUS_INFO_CANID_BATTERY_CURRENT_MAX = 355.35;
public final double BATTERY_STATUS_INFO_BATTERY_PACK_SOC_FACTOR = 0.01;
public final int BATTERY_STATUS_INFO_CANID_BATTERY_PACK_SOC_STARTBIT = 16;
public final double BATTERY_STATUS_INFO_CANID_BATTERY_PACK_SOC_OFFSET = 0.0;
public final double BATTERY_STATUS_INFO_CANID_BATTERY_PACK_SOC_MIN = 0.0;
public final double BATTERY_STATUS_INFO_CANID_BATTERY_PACK_SOC_MAX = 655.35;
public final double BATTERY_STATUS_INFO_CHARGE_VOLTAGE_LIMIT_FACTOR = 0.01;
public final int BATTERY_STATUS_INFO_CANID_CHARGE_VOLTAGE_LIMIT_STARTBIT = 32;
public final double BATTERY_STATUS_INFO_CANID_CHARGE_VOLTAGE_LIMIT_OFFSET = 0.0;
public final double BATTERY_STATUS_INFO_CANID_CHARGE_VOLTAGE_LIMIT_MIN = 0.0;
public final double BATTERY_STATUS_INFO_CANID_CHARGE_VOLTAGE_LIMIT_MAX = 655.35;
public final double BATTERY_STATUS_INFO_CHARGER_MODE_REQUEST_FACTOR = 1.0;
public final int BATTERY_STATUS_INFO_CANID_CHARGER_MODE_REQUEST_STARTBIT = 48;
public final double BATTERY_STATUS_INFO_CANID_CHARGER_MODE_REQUEST_OFFSET = 0.0;
public final double BATTERY_STATUS_INFO_CANID_CHARGER_MODE_REQUEST_MIN = 0.0;
public final double BATTERY_STATUS_INFO_CANID_CHARGER_MODE_REQUEST_MAX = 7.0;

public static class BATTERY_STATUS_INFO_t { 

  public intBattery_Current;
  public longBattery_Pack_SoC;
  public longCharge_Voltage_limit;
  public longCharger_Mode_Request;
}
}
interface can_Converter {
 long Deserialize_VCU_to_OBC_Auth_Req( CanConverter.VCU_to_OBC_Auth_Req_t messages, byte[] data);
long Serialize_VCU_to_OBC_Auth_Req( CanConverter.VCU_to_OBC_Auth_Req_t messages, byte[] data);
long Deserialize_VCU_to_OBC_Auth_Stat( CanConverter.VCU_to_OBC_Auth_Stat_t messages, byte[] data);
long Serialize_VCU_to_OBC_Auth_Stat( CanConverter.VCU_to_OBC_Auth_Stat_t messages, byte[] data);
long Deserialize_OBC_to_VCU_Auth_Resp( CanConverter.OBC_to_VCU_Auth_Resp_t messages, byte[] data);
long Serialize_OBC_to_VCU_Auth_Resp( CanConverter.OBC_to_VCU_Auth_Resp_t messages, byte[] data);
long Deserialize_VCU_to_MCU_Auth_Req( CanConverter.VCU_to_MCU_Auth_Req_t messages, byte[] data);
long Serialize_VCU_to_MCU_Auth_Req( CanConverter.VCU_to_MCU_Auth_Req_t messages, byte[] data);
long Deserialize_MCU_to_VCU_Auth_Resp( CanConverter.MCU_to_VCU_Auth_Resp_t messages, byte[] data);
long Serialize_MCU_to_VCU_Auth_Resp( CanConverter.MCU_to_VCU_Auth_Resp_t messages, byte[] data);
long Deserialize_VCU_to_MCU_Auth_Stat( CanConverter.VCU_to_MCU_Auth_Stat_t messages, byte[] data);
long Serialize_VCU_to_MCU_Auth_Stat( CanConverter.VCU_to_MCU_Auth_Stat_t messages, byte[] data);
long Deserialize_MCU_Data2( CanConverter.MCU_Data2_t messages, byte[] data);
long Serialize_MCU_Data2( CanConverter.MCU_Data2_t messages, byte[] data);
long Deserialize_Regen_Set_Percentage( CanConverter.Regen_Set_Percentage_t messages, byte[] data);
long Serialize_Regen_Set_Percentage( CanConverter.Regen_Set_Percentage_t messages, byte[] data);
long Deserialize_BMS_PARAMETER_1( CanConverter.BMS_PARAMETER_1_t messages, byte[] data);
long Serialize_BMS_PARAMETER_1( CanConverter.BMS_PARAMETER_1_t messages, byte[] data);
long Deserialize_BATTERY_LIMITS( CanConverter.BATTERY_LIMITS_t messages, byte[] data);
long Serialize_BATTERY_LIMITS( CanConverter.BATTERY_LIMITS_t messages, byte[] data);
long Deserialize_BMS_PARAMETER_LIMIT_2( CanConverter.BMS_PARAMETER_LIMIT_2_t messages, byte[] data);
long Serialize_BMS_PARAMETER_LIMIT_2( CanConverter.BMS_PARAMETER_LIMIT_2_t messages, byte[] data);
long Deserialize_Vehicle_Mode( CanConverter.Vehicle_Mode_t messages, byte[] data);
long Serialize_Vehicle_Mode( CanConverter.Vehicle_Mode_t messages, byte[] data);
long Deserialize_Traction_Control( CanConverter.Traction_Control_t messages, byte[] data);
long Serialize_Traction_Control( CanConverter.Traction_Control_t messages, byte[] data);
long Deserialize_SOM_Parameters_1( CanConverter.SOM_Parameters_1_t messages, byte[] data);
long Serialize_SOM_Parameters_1( CanConverter.SOM_Parameters_1_t messages, byte[] data);
long Deserialize_ABS_Parameters( CanConverter.ABS_Parameters_t messages, byte[] data);
long Serialize_ABS_Parameters( CanConverter.ABS_Parameters_t messages, byte[] data);
long Deserialize_Traction_Control2( CanConverter.Traction_Control2_t messages, byte[] data);
long Serialize_Traction_Control2( CanConverter.Traction_Control2_t messages, byte[] data);
long Deserialize_Vehicle_Func( CanConverter.Vehicle_Func_t messages, byte[] data);
long Serialize_Vehicle_Func( CanConverter.Vehicle_Func_t messages, byte[] data);
long Deserialize_BMS_PARAMETER_3( CanConverter.BMS_PARAMETER_3_t messages, byte[] data);
long Serialize_BMS_PARAMETER_3( CanConverter.BMS_PARAMETER_3_t messages, byte[] data);
long Deserialize_BMS_PARAMETER_4( CanConverter.BMS_PARAMETER_4_t messages, byte[] data);
long Serialize_BMS_PARAMETER_4( CanConverter.BMS_PARAMETER_4_t messages, byte[] data);
long Deserialize_Battery_Energy_Cycles( CanConverter.Battery_Energy_Cycles_t messages, byte[] data);
long Serialize_Battery_Energy_Cycles( CanConverter.Battery_Energy_Cycles_t messages, byte[] data);
long Deserialize_OBC_Wakeup_Info( CanConverter.OBC_Wakeup_Info_t messages, byte[] data);
long Serialize_OBC_Wakeup_Info( CanConverter.OBC_Wakeup_Info_t messages, byte[] data);
long Deserialize_BATTERY_TEMPERATURE( CanConverter.BATTERY_TEMPERATURE_t messages, byte[] data);
long Serialize_BATTERY_TEMPERATURE( CanConverter.BATTERY_TEMPERATURE_t messages, byte[] data);
long Deserialize_Custom_Mode( CanConverter.Custom_Mode_t messages, byte[] data);
long Serialize_Custom_Mode( CanConverter.Custom_Mode_t messages, byte[] data);
long Deserialize_VCU_Data( CanConverter.VCU_Data_t messages, byte[] data);
long Serialize_VCU_Data( CanConverter.VCU_Data_t messages, byte[] data);
long Deserialize_BMS_CELL_STATUS( CanConverter.BMS_CELL_STATUS_t messages, byte[] data);
long Serialize_BMS_CELL_STATUS( CanConverter.BMS_CELL_STATUS_t messages, byte[] data);
long Deserialize_Charger_Parameter_1( CanConverter.Charger_Parameter_1_t messages, byte[] data);
long Serialize_Charger_Parameter_1( CanConverter.Charger_Parameter_1_t messages, byte[] data);
long Deserialize_OBC_HP_DCDC_Parameter_2( CanConverter.OBC_HP_DCDC_Parameter_2_t messages, byte[] data);
long Serialize_OBC_HP_DCDC_Parameter_2( CanConverter.OBC_HP_DCDC_Parameter_2_t messages, byte[] data);
long Deserialize_BMS_CELL_VOLTAGE_1( CanConverter.BMS_CELL_VOLTAGE_1_t messages, byte[] data);
long Serialize_BMS_CELL_VOLTAGE_1( CanConverter.BMS_CELL_VOLTAGE_1_t messages, byte[] data);
long Deserialize_BMS_CELL_VOLTAGE_2( CanConverter.BMS_CELL_VOLTAGE_2_t messages, byte[] data);
long Serialize_BMS_CELL_VOLTAGE_2( CanConverter.BMS_CELL_VOLTAGE_2_t messages, byte[] data);
long Deserialize_BMS_CELL_VOLTAGE_3( CanConverter.BMS_CELL_VOLTAGE_3_t messages, byte[] data);
long Serialize_BMS_CELL_VOLTAGE_3( CanConverter.BMS_CELL_VOLTAGE_3_t messages, byte[] data);
long Deserialize_BMS_CELL_VOLTAGE_4( CanConverter.BMS_CELL_VOLTAGE_4_t messages, byte[] data);
long Serialize_BMS_CELL_VOLTAGE_4( CanConverter.BMS_CELL_VOLTAGE_4_t messages, byte[] data);
long Deserialize_BMS_CELL_VOLTAGE_5( CanConverter.BMS_CELL_VOLTAGE_5_t messages, byte[] data);
long Serialize_BMS_CELL_VOLTAGE_5( CanConverter.BMS_CELL_VOLTAGE_5_t messages, byte[] data);
long Deserialize_BMS_CELL_VOLTAGE_6( CanConverter.BMS_CELL_VOLTAGE_6_t messages, byte[] data);
long Serialize_BMS_CELL_VOLTAGE_6( CanConverter.BMS_CELL_VOLTAGE_6_t messages, byte[] data);
long Deserialize_BMS_CELL_VOLTAGE_7( CanConverter.BMS_CELL_VOLTAGE_7_t messages, byte[] data);
long Serialize_BMS_CELL_VOLTAGE_7( CanConverter.BMS_CELL_VOLTAGE_7_t messages, byte[] data);
long Deserialize_Charger_status_Info( CanConverter.Charger_status_Info_t messages, byte[] data);
long Serialize_Charger_status_Info( CanConverter.Charger_status_Info_t messages, byte[] data);
long Deserialize_MCU_Data3( CanConverter.MCU_Data3_t messages, byte[] data);
long Serialize_MCU_Data3( CanConverter.MCU_Data3_t messages, byte[] data);
long Deserialize_MCU_Data4( CanConverter.MCU_Data4_t messages, byte[] data);
long Serialize_MCU_Data4( CanConverter.MCU_Data4_t messages, byte[] data);
long Deserialize_MCU_Data5( CanConverter.MCU_Data5_t messages, byte[] data);
long Serialize_MCU_Data5( CanConverter.MCU_Data5_t messages, byte[] data);
long Deserialize_MCU_Data6( CanConverter.MCU_Data6_t messages, byte[] data);
long Serialize_MCU_Data6( CanConverter.MCU_Data6_t messages, byte[] data);
long Deserialize_MCU_Data1( CanConverter.MCU_Data1_t messages, byte[] data);
long Serialize_MCU_Data1( CanConverter.MCU_Data1_t messages, byte[] data);
long Deserialize_MCU_Disconnect_ACK( CanConverter.MCU_Disconnect_ACK_t messages, byte[] data);
long Serialize_MCU_Disconnect_ACK( CanConverter.MCU_Disconnect_ACK_t messages, byte[] data);
long Deserialize_MCU_Fault_Data( CanConverter.MCU_Fault_Data_t messages, byte[] data);
long Serialize_MCU_Fault_Data( CanConverter.MCU_Fault_Data_t messages, byte[] data);
long Deserialize_MCU_Fault_Data2( CanConverter.MCU_Fault_Data2_t messages, byte[] data);
long Serialize_MCU_Fault_Data2( CanConverter.MCU_Fault_Data2_t messages, byte[] data);
long Deserialize_Display_info( CanConverter.Display_info_t messages, byte[] data);
long Serialize_Display_info( CanConverter.Display_info_t messages, byte[] data);
long Deserialize_Environment_Data( CanConverter.Environment_Data_t messages, byte[] data);
long Serialize_Environment_Data( CanConverter.Environment_Data_t messages, byte[] data);
long Deserialize_BMS_Fault_1( CanConverter.BMS_Fault_1_t messages, byte[] data);
long Serialize_BMS_Fault_1( CanConverter.BMS_Fault_1_t messages, byte[] data);
long Deserialize_BMS_Fault_2( CanConverter.BMS_Fault_2_t messages, byte[] data);
long Serialize_BMS_Fault_2( CanConverter.BMS_Fault_2_t messages, byte[] data);
long Deserialize_ESCL_Data( CanConverter.ESCL_Data_t messages, byte[] data);
long Serialize_ESCL_Data( CanConverter.ESCL_Data_t messages, byte[] data);
long Deserialize_Charger_Fault_Info( CanConverter.Charger_Fault_Info_t messages, byte[] data);
long Serialize_Charger_Fault_Info( CanConverter.Charger_Fault_Info_t messages, byte[] data);
long Deserialize_HP_DCDC_Parameter1( CanConverter.HP_DCDC_Parameter1_t messages, byte[] data);
long Serialize_HP_DCDC_Parameter1( CanConverter.HP_DCDC_Parameter1_t messages, byte[] data);
long Deserialize_IMU_Data_X( CanConverter.IMU_Data_X_t messages, byte[] data);
long Serialize_IMU_Data_X( CanConverter.IMU_Data_X_t messages, byte[] data);
long Deserialize_MCU_SW_Version( CanConverter.MCU_SW_Version_t messages, byte[] data);
long Serialize_MCU_SW_Version( CanConverter.MCU_SW_Version_t messages, byte[] data);
long Deserialize_MCU_HW_Version( CanConverter.MCU_HW_Version_t messages, byte[] data);
long Serialize_MCU_HW_Version( CanConverter.MCU_HW_Version_t messages, byte[] data);
long Deserialize_ICM_HW_Version_Info( CanConverter.ICM_HW_Version_Info_t messages, byte[] data);
long Serialize_ICM_HW_Version_Info( CanConverter.ICM_HW_Version_Info_t messages, byte[] data);
long Deserialize_ICM_SW_Version( CanConverter.ICM_SW_Version_t messages, byte[] data);
long Serialize_ICM_SW_Version( CanConverter.ICM_SW_Version_t messages, byte[] data);
long Deserialize_ESCL_HW_Version_Info( CanConverter.ESCL_HW_Version_Info_t messages, byte[] data);
long Serialize_ESCL_HW_Version_Info( CanConverter.ESCL_HW_Version_Info_t messages, byte[] data);
long Deserialize_OBC_SW_Version( CanConverter.OBC_SW_Version_t messages, byte[] data);
long Serialize_OBC_SW_Version( CanConverter.OBC_SW_Version_t messages, byte[] data);
long Deserialize_OBC_HW_Version( CanConverter.OBC_HW_Version_t messages, byte[] data);
long Serialize_OBC_HW_Version( CanConverter.OBC_HW_Version_t messages, byte[] data);
long Deserialize_ESCL_SW_Version_Info( CanConverter.ESCL_SW_Version_Info_t messages, byte[] data);
long Serialize_ESCL_SW_Version_Info( CanConverter.ESCL_SW_Version_Info_t messages, byte[] data);
long Deserialize_RSC_HW_Version_Info( CanConverter.RSC_HW_Version_Info_t messages, byte[] data);
long Serialize_RSC_HW_Version_Info( CanConverter.RSC_HW_Version_Info_t messages, byte[] data);
long Deserialize_RSC_SW_Version( CanConverter.RSC_SW_Version_t messages, byte[] data);
long Serialize_RSC_SW_Version( CanConverter.RSC_SW_Version_t messages, byte[] data);
long Deserialize_LSC_HW_Version_Info( CanConverter.LSC_HW_Version_Info_t messages, byte[] data);
long Serialize_LSC_HW_Version_Info( CanConverter.LSC_HW_Version_Info_t messages, byte[] data);
long Deserialize_LSC_SW_Version( CanConverter.LSC_SW_Version_t messages, byte[] data);
long Serialize_LSC_SW_Version( CanConverter.LSC_SW_Version_t messages, byte[] data);
long Deserialize_IMU_Data_Y( CanConverter.IMU_Data_Y_t messages, byte[] data);
long Serialize_IMU_Data_Y( CanConverter.IMU_Data_Y_t messages, byte[] data);
long Deserialize_IC_Paramter_1( CanConverter.IC_Paramter_1_t messages, byte[] data);
long Serialize_IC_Paramter_1( CanConverter.IC_Paramter_1_t messages, byte[] data);
long Deserialize_ICM_Digital_Input( CanConverter.ICM_Digital_Input_t messages, byte[] data);
long Serialize_ICM_Digital_Input( CanConverter.ICM_Digital_Input_t messages, byte[] data);
long Deserialize_IMU_Data_Z( CanConverter.IMU_Data_Z_t messages, byte[] data);
long Serialize_IMU_Data_Z( CanConverter.IMU_Data_Z_t messages, byte[] data);
long Deserialize_BMS_SOFTWARE_VERSIONS( CanConverter.BMS_SOFTWARE_VERSIONS_t messages, byte[] data);
long Serialize_BMS_SOFTWARE_VERSIONS( CanConverter.BMS_SOFTWARE_VERSIONS_t messages, byte[] data);
long Deserialize_ABS_Software_Version( CanConverter.ABS_Software_Version_t messages, byte[] data);
long Serialize_ABS_Software_Version( CanConverter.ABS_Software_Version_t messages, byte[] data);
long Deserialize_BMS_HARDWARE_VERSION( CanConverter.BMS_HARDWARE_VERSION_t messages, byte[] data);
long Serialize_BMS_HARDWARE_VERSION( CanConverter.BMS_HARDWARE_VERSION_t messages, byte[] data);
long Deserialize_ABS_Hardware_Version( CanConverter.ABS_Hardware_Version_t messages, byte[] data);
long Serialize_ABS_Hardware_Version( CanConverter.ABS_Hardware_Version_t messages, byte[] data);
long Deserialize_BMS_Diagnostic_Request( CanConverter.BMS_Diagnostic_Request_t messages, byte[] data);
long Serialize_BMS_Diagnostic_Request( CanConverter.BMS_Diagnostic_Request_t messages, byte[] data);
long Deserialize_BMS_Diagnostic_Response( CanConverter.BMS_Diagnostic_Response_t messages, byte[] data);
long Serialize_BMS_Diagnostic_Response( CanConverter.BMS_Diagnostic_Response_t messages, byte[] data);
long Deserialize_OTA_Status( CanConverter.OTA_Status_t messages, byte[] data);
long Serialize_OTA_Status( CanConverter.OTA_Status_t messages, byte[] data);
long Deserialize_Vehicle_left_SW_Cube( CanConverter.Vehicle_left_SW_Cube_t messages, byte[] data);
long Serialize_Vehicle_left_SW_Cube( CanConverter.Vehicle_left_SW_Cube_t messages, byte[] data);
long Deserialize_Vehicle_Right_SW_Cube( CanConverter.Vehicle_Right_SW_Cube_t messages, byte[] data);
long Serialize_Vehicle_Right_SW_Cube( CanConverter.Vehicle_Right_SW_Cube_t messages, byte[] data);
long Deserialize_ICM_Error( CanConverter.ICM_Error_t messages, byte[] data);
long Serialize_ICM_Error( CanConverter.ICM_Error_t messages, byte[] data);
long Deserialize_TimeStamp_Sync_Message( CanConverter.TimeStamp_Sync_Message_t messages, byte[] data);
long Serialize_TimeStamp_Sync_Message( CanConverter.TimeStamp_Sync_Message_t messages, byte[] data);
long Deserialize_RSC_Diagnostic_Request( CanConverter.RSC_Diagnostic_Request_t messages, byte[] data);
long Serialize_RSC_Diagnostic_Request( CanConverter.RSC_Diagnostic_Request_t messages, byte[] data);
long Deserialize_RSC_Diagnostic_Response( CanConverter.RSC_Diagnostic_Response_t messages, byte[] data);
long Serialize_RSC_Diagnostic_Response( CanConverter.RSC_Diagnostic_Response_t messages, byte[] data);
long Deserialize_LSC_Diagnostic_Request( CanConverter.LSC_Diagnostic_Request_t messages, byte[] data);
long Serialize_LSC_Diagnostic_Request( CanConverter.LSC_Diagnostic_Request_t messages, byte[] data);
long Deserialize_LSC_Diagnostic_Response( CanConverter.LSC_Diagnostic_Response_t messages, byte[] data);
long Serialize_LSC_Diagnostic_Response( CanConverter.LSC_Diagnostic_Response_t messages, byte[] data);
long Deserialize_MCU_Diagnostic_Request( CanConverter.MCU_Diagnostic_Request_t messages, byte[] data);
long Serialize_MCU_Diagnostic_Request( CanConverter.MCU_Diagnostic_Request_t messages, byte[] data);
long Deserialize_MCU_Diagnostic_Response( CanConverter.MCU_Diagnostic_Response_t messages, byte[] data);
long Serialize_MCU_Diagnostic_Response( CanConverter.MCU_Diagnostic_Response_t messages, byte[] data);
long Deserialize_OBC_Diagnostic_Response( CanConverter.OBC_Diagnostic_Response_t messages, byte[] data);
long Serialize_OBC_Diagnostic_Response( CanConverter.OBC_Diagnostic_Response_t messages, byte[] data);
long Deserialize_ABS_Diag_Request( CanConverter.ABS_Diag_Request_t messages, byte[] data);
long Serialize_ABS_Diag_Request( CanConverter.ABS_Diag_Request_t messages, byte[] data);
long Deserialize_ABS_Diag_Response( CanConverter.ABS_Diag_Response_t messages, byte[] data);
long Serialize_ABS_Diag_Response( CanConverter.ABS_Diag_Response_t messages, byte[] data);
long Deserialize_OBC_Diagnostic_Request( CanConverter.OBC_Diagnostic_Request_t messages, byte[] data);
long Serialize_OBC_Diagnostic_Request( CanConverter.OBC_Diagnostic_Request_t messages, byte[] data);
long Deserialize_HU_Diagnostic_Response( CanConverter.HU_Diagnostic_Response_t messages, byte[] data);
long Serialize_HU_Diagnostic_Response( CanConverter.HU_Diagnostic_Response_t messages, byte[] data);
long Deserialize_HU_Diagnostic_Request( CanConverter.HU_Diagnostic_Request_t messages, byte[] data);
long Serialize_HU_Diagnostic_Request( CanConverter.HU_Diagnostic_Request_t messages, byte[] data);
long Deserialize_ESCL_Diagnostic_Response( CanConverter.ESCL_Diagnostic_Response_t messages, byte[] data);
long Serialize_ESCL_Diagnostic_Response( CanConverter.ESCL_Diagnostic_Response_t messages, byte[] data);
long Deserialize_ESCL_Diagnostic_Request( CanConverter.ESCL_Diagnostic_Request_t messages, byte[] data);
long Serialize_ESCL_Diagnostic_Request( CanConverter.ESCL_Diagnostic_Request_t messages, byte[] data);
long Deserialize_BCM_Diagnostic_Response( CanConverter.BCM_Diagnostic_Response_t messages, byte[] data);
long Serialize_BCM_Diagnostic_Response( CanConverter.BCM_Diagnostic_Response_t messages, byte[] data);
long Deserialize_BCM_Diagnostic_Request( CanConverter.BCM_Diagnostic_Request_t messages, byte[] data);
long Serialize_BCM_Diagnostic_Request( CanConverter.BCM_Diagnostic_Request_t messages, byte[] data);
long Deserialize_Func_Diagnostic_Request( CanConverter.Func_Diagnostic_Request_t messages, byte[] data);
long Serialize_Func_Diagnostic_Request( CanConverter.Func_Diagnostic_Request_t messages, byte[] data);
long Deserialize_BATTERY_STATUS_INFO( CanConverter.BATTERY_STATUS_INFO_t messages, byte[] data);
long Serialize_BATTERY_STATUS_INFO( CanConverter.BATTERY_STATUS_INFO_t messages, byte[] data);
}

class Converter implements can_Converter  {
public long Deserialize_VCU_to_OBC_Auth_Req( CanConverter.VCU_to_OBC_Auth_Req_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.VCU_to_OBC_Seed=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.VCU_TO_OBC_AUTH_REQ_VCU_TO_OBC_SEED_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.VCU_TO_OBC_AUTH_REQ_VCU_TO_OBC_SEED_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.VCU_TO_OBC_AUTH_REQ_VCU_TO_OBC_SEED_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.VCU_TO_OBC_AUTH_REQ_CANID_VCU_TO_OBC_SEED_OFFSET);
  return can.VCU_TO_OBC_AUTH_REQ_ID;
}

/*------------------------------------------------------------*/

public long Serialize_VCU_to_OBC_Auth_Req( CanConverter.VCU_to_OBC_Auth_Req_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.VCU_to_OBC_Seed=(int) (messages.VCU_to_OBC_Seed - can.VCU_TO_OBC_AUTH_REQ_CANID_VCU_TO_OBC_SEED_OFFSET);
 data[0] = (byte)((messages.VCU_to_OBC_Seed & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.VCU_to_OBC_Seed >> can.VCU_TO_OBC_AUTH_REQ_VCU_TO_OBC_SEED_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.VCU_to_OBC_Seed >> can.VCU_TO_OBC_AUTH_REQ_VCU_TO_OBC_SEED_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.VCU_to_OBC_Seed >> can.VCU_TO_OBC_AUTH_REQ_VCU_TO_OBC_SEED_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.VCU_TO_OBC_AUTH_REQ_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_VCU_to_OBC_Auth_Stat( CanConverter.VCU_to_OBC_Auth_Stat_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.VCU_Auth_Res_to_OBC=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.VCU_TO_OBC_AUTH_STAT_CANID_VCU_AUTH_RES_TO_OBC_OFFSET);
  return can.VCU_TO_OBC_AUTH_STAT_ID;
}

/*------------------------------------------------------------*/

public long Serialize_VCU_to_OBC_Auth_Stat( CanConverter.VCU_to_OBC_Auth_Stat_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.VCU_Auth_Res_to_OBC=(int) (messages.VCU_Auth_Res_to_OBC - can.VCU_TO_OBC_AUTH_STAT_CANID_VCU_AUTH_RES_TO_OBC_OFFSET);
 data[0] = (byte)((messages.VCU_Auth_Res_to_OBC & ( can.SIGNLE_READ_Mask1)));
  return can.VCU_TO_OBC_AUTH_STAT_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_OBC_to_VCU_Auth_Resp( CanConverter.OBC_to_VCU_Auth_Resp_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_Key=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.OBC_TO_VCU_AUTH_RESP_OBC_KEY_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.OBC_TO_VCU_AUTH_RESP_OBC_KEY_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.OBC_TO_VCU_AUTH_RESP_OBC_KEY_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.OBC_TO_VCU_AUTH_RESP_CANID_OBC_KEY_OFFSET);
  return can.OBC_TO_VCU_AUTH_RESP_ID;
}

/*------------------------------------------------------------*/

public long Serialize_OBC_to_VCU_Auth_Resp( CanConverter.OBC_to_VCU_Auth_Resp_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_Key=(int) (messages.OBC_Key - can.OBC_TO_VCU_AUTH_RESP_CANID_OBC_KEY_OFFSET);
 data[0] = (byte)((messages.OBC_Key & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.OBC_Key >> can.OBC_TO_VCU_AUTH_RESP_OBC_KEY_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.OBC_Key >> can.OBC_TO_VCU_AUTH_RESP_OBC_KEY_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.OBC_Key >> can.OBC_TO_VCU_AUTH_RESP_OBC_KEY_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.OBC_TO_VCU_AUTH_RESP_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_VCU_to_MCU_Auth_Req( CanConverter.VCU_to_MCU_Auth_Req_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.VCU_to_MCU_Seed=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.VCU_TO_MCU_AUTH_REQ_VCU_TO_MCU_SEED_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.VCU_TO_MCU_AUTH_REQ_VCU_TO_MCU_SEED_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.VCU_TO_MCU_AUTH_REQ_VCU_TO_MCU_SEED_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.VCU_TO_MCU_AUTH_REQ_CANID_VCU_TO_MCU_SEED_OFFSET);
  return can.VCU_TO_MCU_AUTH_REQ_ID;
}

/*------------------------------------------------------------*/

public long Serialize_VCU_to_MCU_Auth_Req( CanConverter.VCU_to_MCU_Auth_Req_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.VCU_to_MCU_Seed=(int) (messages.VCU_to_MCU_Seed - can.VCU_TO_MCU_AUTH_REQ_CANID_VCU_TO_MCU_SEED_OFFSET);
 data[0] = (byte)((messages.VCU_to_MCU_Seed & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.VCU_to_MCU_Seed >> can.VCU_TO_MCU_AUTH_REQ_VCU_TO_MCU_SEED_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.VCU_to_MCU_Seed >> can.VCU_TO_MCU_AUTH_REQ_VCU_TO_MCU_SEED_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.VCU_to_MCU_Seed >> can.VCU_TO_MCU_AUTH_REQ_VCU_TO_MCU_SEED_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.VCU_TO_MCU_AUTH_REQ_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_to_VCU_Auth_Resp( CanConverter.MCU_to_VCU_Auth_Resp_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Key=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.MCU_TO_VCU_AUTH_RESP_MCU_KEY_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.MCU_TO_VCU_AUTH_RESP_MCU_KEY_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.MCU_TO_VCU_AUTH_RESP_MCU_KEY_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.MCU_TO_VCU_AUTH_RESP_CANID_MCU_KEY_OFFSET);
  return can.MCU_TO_VCU_AUTH_RESP_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_to_VCU_Auth_Resp( CanConverter.MCU_to_VCU_Auth_Resp_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Key=(int) (messages.MCU_Key - can.MCU_TO_VCU_AUTH_RESP_CANID_MCU_KEY_OFFSET);
 data[0] = (byte)((messages.MCU_Key & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.MCU_Key >> can.MCU_TO_VCU_AUTH_RESP_MCU_KEY_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.MCU_Key >> can.MCU_TO_VCU_AUTH_RESP_MCU_KEY_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.MCU_Key >> can.MCU_TO_VCU_AUTH_RESP_MCU_KEY_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.MCU_TO_VCU_AUTH_RESP_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_VCU_to_MCU_Auth_Stat( CanConverter.VCU_to_MCU_Auth_Stat_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.VCU_Auth_Resp_to_MCU=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.VCU_TO_MCU_AUTH_STAT_CANID_VCU_AUTH_RESP_TO_MCU_OFFSET);
  return can.VCU_TO_MCU_AUTH_STAT_ID;
}

/*------------------------------------------------------------*/

public long Serialize_VCU_to_MCU_Auth_Stat( CanConverter.VCU_to_MCU_Auth_Stat_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.VCU_Auth_Resp_to_MCU=(int) (messages.VCU_Auth_Resp_to_MCU - can.VCU_TO_MCU_AUTH_STAT_CANID_VCU_AUTH_RESP_TO_MCU_OFFSET);
 data[0] = (byte)((messages.VCU_Auth_Resp_to_MCU & ( can.SIGNLE_READ_Mask1)));
  return can.VCU_TO_MCU_AUTH_STAT_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_Data2( CanConverter.MCU_Data2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Power_Status=(int)(((data[0] & (can.SIGNLE_READ_Mask2))) + can.MCU_DATA2_CANID_MCU_POWER_STATUS_OFFSET);messages.Regen_status=(int)((((data[0] >> can.MCU_DATA2_REGEN_STATUS_MASK0) & (can.SIGNLE_READ_Mask3))) + can.MCU_DATA2_CANID_REGEN_STATUS_OFFSET);messages.Cruise_Control_Status=(int)(((data[5] & (can.SIGNLE_READ_Mask1))) + can.MCU_DATA2_CANID_CRUISE_CONTROL_STATUS_OFFSET);messages.MCU_Riding_Mode=(int)((((data[5] >> can.MCU_DATA2_MCU_RIDING_MODE_MASK0) & (can.SIGNLE_READ_Mask4))) + can.MCU_DATA2_CANID_MCU_RIDING_MODE_OFFSET);messages.Hill_Hold_Status=(int)((((data[5] >> can.MCU_DATA2_HILL_HOLD_STATUS_MASK0) & (can.SIGNLE_READ_Mask2))) + can.MCU_DATA2_CANID_HILL_HOLD_STATUS_OFFSET);messages.MCU_DC_voltage=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA2_MCU_DC_VOLTAGE_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA2_CANID_MCU_DC_VOLTAGE_OFFSET);
  return can.MCU_DATA2_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_Data2( CanConverter.MCU_Data2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Power_Status=(int) (messages.MCU_Power_Status - can.MCU_DATA2_CANID_MCU_POWER_STATUS_OFFSET);
messages.Regen_status=(int) (messages.Regen_status - can.MCU_DATA2_CANID_REGEN_STATUS_OFFSET);
messages.Cruise_Control_Status=(int) (messages.Cruise_Control_Status - can.MCU_DATA2_CANID_CRUISE_CONTROL_STATUS_OFFSET);
messages.MCU_Riding_Mode=(int) (messages.MCU_Riding_Mode - can.MCU_DATA2_CANID_MCU_RIDING_MODE_OFFSET);
messages.Hill_Hold_Status=(int) (messages.Hill_Hold_Status - can.MCU_DATA2_CANID_HILL_HOLD_STATUS_OFFSET);
messages.MCU_DC_voltage=(int) (messages.MCU_DC_voltage - can.MCU_DATA2_CANID_MCU_DC_VOLTAGE_OFFSET);
 data[0] = (byte)((messages.MCU_Power_Status & ( can.SIGNLE_READ_Mask2)) | ((messages.Regen_status & ( can.SIGNLE_READ_Mask3)) << can.MCU_DATA2_REGEN_STATUS_MASK0));
 data[5] = (byte)((messages.Cruise_Control_Status & ( can.SIGNLE_READ_Mask1)) | ((messages.MCU_Riding_Mode & ( can.SIGNLE_READ_Mask4)) << can.MCU_DATA2_MCU_RIDING_MODE_MASK0) | ((messages.Hill_Hold_Status & ( can.SIGNLE_READ_Mask2)) << can.MCU_DATA2_HILL_HOLD_STATUS_MASK0));
 data[6] = (byte)((messages.MCU_DC_voltage & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.MCU_DC_voltage >> can.MCU_DATA2_MCU_DC_VOLTAGE_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.MCU_DATA2_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Regen_Set_Percentage( CanConverter.Regen_Set_Percentage_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Forced_Regen_Percentage=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.REGEN_SET_PERCENTAGE_FORCED_REGEN_PERCENTAGE_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.REGEN_SET_PERCENTAGE_CANID_FORCED_REGEN_PERCENTAGE_OFFSET);messages.Coast_Regen_Percentage=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.REGEN_SET_PERCENTAGE_COAST_REGEN_PERCENTAGE_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.REGEN_SET_PERCENTAGE_CANID_COAST_REGEN_PERCENTAGE_OFFSET);messages.Brake_Regen_Pencentage=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.REGEN_SET_PERCENTAGE_BRAKE_REGEN_PENCENTAGE_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.REGEN_SET_PERCENTAGE_CANID_BRAKE_REGEN_PENCENTAGE_OFFSET);messages.Regen_Max_Current=(int)(((( data[7] & (can.SIGNLE_READ_Mask2)) << can.REGEN_SET_PERCENTAGE_REGEN_MAX_CURRENT_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.REGEN_SET_PERCENTAGE_CANID_REGEN_MAX_CURRENT_OFFSET);
  return can.REGEN_SET_PERCENTAGE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Regen_Set_Percentage( CanConverter.Regen_Set_Percentage_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Forced_Regen_Percentage=(int) (messages.Forced_Regen_Percentage - can.REGEN_SET_PERCENTAGE_CANID_FORCED_REGEN_PERCENTAGE_OFFSET);
messages.Coast_Regen_Percentage=(int) (messages.Coast_Regen_Percentage - can.REGEN_SET_PERCENTAGE_CANID_COAST_REGEN_PERCENTAGE_OFFSET);
messages.Brake_Regen_Pencentage=(int) (messages.Brake_Regen_Pencentage - can.REGEN_SET_PERCENTAGE_CANID_BRAKE_REGEN_PENCENTAGE_OFFSET);
messages.Regen_Max_Current=(int) (messages.Regen_Max_Current - can.REGEN_SET_PERCENTAGE_CANID_REGEN_MAX_CURRENT_OFFSET);
 data[0] = (byte)((messages.Forced_Regen_Percentage & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Forced_Regen_Percentage >> can.REGEN_SET_PERCENTAGE_FORCED_REGEN_PERCENTAGE_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Coast_Regen_Percentage & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Coast_Regen_Percentage >> can.REGEN_SET_PERCENTAGE_COAST_REGEN_PERCENTAGE_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Brake_Regen_Pencentage & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Brake_Regen_Pencentage >> can.REGEN_SET_PERCENTAGE_BRAKE_REGEN_PENCENTAGE_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Regen_Max_Current & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Regen_Max_Current >> can.REGEN_SET_PERCENTAGE_REGEN_MAX_CURRENT_MASK0) & (can.SIGNLE_READ_Mask2)));
  return can.REGEN_SET_PERCENTAGE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_PARAMETER_1( CanConverter.BMS_PARAMETER_1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Contactor_State=(int)(((data[0] & (can.SIGNLE_READ_Mask4))) + can.BMS_PARAMETER_1_CANID_CONTACTOR_STATE_OFFSET);messages.Battery_Pack_Bus_Volt=(int)(((( data[2] & (can.SIGNLE_READ_Mask8)) << can.BMS_PARAMETER_1_BATTERY_PACK_BUS_VOLT_MASK0) | ( data[1] & (can.SIGNLE_READ_Mask8))) + can.BMS_PARAMETER_1_CANID_BATTERY_PACK_BUS_VOLT_OFFSET);messages.BMS_Board_Temp=(int)(((( data[4] & (can.SIGNLE_READ_Mask8)) << can.BMS_PARAMETER_1_BMS_BOARD_TEMP_MASK0) | ( data[3] & (can.SIGNLE_READ_Mask8))) + can.BMS_PARAMETER_1_CANID_BMS_BOARD_TEMP_OFFSET);messages.BMS_Mode=(int)(((data[5] & (can.SIGNLE_READ_Mask4))) + can.BMS_PARAMETER_1_CANID_BMS_MODE_OFFSET);messages.Battery_Precharge_Failure_Status=(int)(((data[6] & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_1_CANID_BATTERY_PRECHARGE_FAILURE_STATUS_OFFSET);messages.Battery_Charge_Inhibit=(int)((((data[6] >> can.BMS_PARAMETER_1_BATTERY_CHARGE_INHIBIT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_1_CANID_BATTERY_CHARGE_INHIBIT_OFFSET);messages.Battery_Discharge_Inhibit=(int)((((data[6] >> can.BMS_PARAMETER_1_BATTERY_DISCHARGE_INHIBIT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_1_CANID_BATTERY_DISCHARGE_INHIBIT_OFFSET);messages.Battery_Derate_Drive_Curr_Flag=(int)((((data[6] >> can.BMS_PARAMETER_1_BATTERY_DERATE_DRIVE_CURR_FLAG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_1_CANID_BATTERY_DERATE_DRIVE_CURR_FLAG_OFFSET);messages.Battery_Derate_Charge_Curr_Flag=(int)((((data[6] >> can.BMS_PARAMETER_1_BATTERY_DERATE_CHARGE_CURR_FLAG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_1_CANID_BATTERY_DERATE_CHARGE_CURR_FLAG_OFFSET);messages.Battery_Inhibit_Regen_Fault=(int)((((data[6] >> can.BMS_PARAMETER_1_BATTERY_INHIBIT_REGEN_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_1_CANID_BATTERY_INHIBIT_REGEN_FAULT_OFFSET);messages.Battery_Permanant_Fault=(int)((((data[6] >> can.BMS_PARAMETER_1_BATTERY_PERMANANT_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_1_CANID_BATTERY_PERMANANT_FAULT_OFFSET);messages.BMS_Short_Cir_Detection_Error=(int)((((data[6] >> can.BMS_PARAMETER_1_BMS_SHORT_CIR_DETECTION_ERROR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_1_CANID_BMS_SHORT_CIR_DETECTION_ERROR_OFFSET);messages.Reserved=(int)(((data[7] & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_1_CANID_RESERVED_OFFSET);
  return can.BMS_PARAMETER_1_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_PARAMETER_1( CanConverter.BMS_PARAMETER_1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Contactor_State=(int) (messages.Contactor_State - can.BMS_PARAMETER_1_CANID_CONTACTOR_STATE_OFFSET);
messages.Battery_Pack_Bus_Volt=(int) (messages.Battery_Pack_Bus_Volt - can.BMS_PARAMETER_1_CANID_BATTERY_PACK_BUS_VOLT_OFFSET);
messages.BMS_Board_Temp=(int) (messages.BMS_Board_Temp - can.BMS_PARAMETER_1_CANID_BMS_BOARD_TEMP_OFFSET);
messages.BMS_Mode=(int) (messages.BMS_Mode - can.BMS_PARAMETER_1_CANID_BMS_MODE_OFFSET);
messages.Battery_Precharge_Failure_Status=(int) (messages.Battery_Precharge_Failure_Status - can.BMS_PARAMETER_1_CANID_BATTERY_PRECHARGE_FAILURE_STATUS_OFFSET);
messages.Battery_Charge_Inhibit=(int) (messages.Battery_Charge_Inhibit - can.BMS_PARAMETER_1_CANID_BATTERY_CHARGE_INHIBIT_OFFSET);
messages.Battery_Discharge_Inhibit=(int) (messages.Battery_Discharge_Inhibit - can.BMS_PARAMETER_1_CANID_BATTERY_DISCHARGE_INHIBIT_OFFSET);
messages.Battery_Derate_Drive_Curr_Flag=(int) (messages.Battery_Derate_Drive_Curr_Flag - can.BMS_PARAMETER_1_CANID_BATTERY_DERATE_DRIVE_CURR_FLAG_OFFSET);
messages.Battery_Derate_Charge_Curr_Flag=(int) (messages.Battery_Derate_Charge_Curr_Flag - can.BMS_PARAMETER_1_CANID_BATTERY_DERATE_CHARGE_CURR_FLAG_OFFSET);
messages.Battery_Inhibit_Regen_Fault=(int) (messages.Battery_Inhibit_Regen_Fault - can.BMS_PARAMETER_1_CANID_BATTERY_INHIBIT_REGEN_FAULT_OFFSET);
messages.Battery_Permanant_Fault=(int) (messages.Battery_Permanant_Fault - can.BMS_PARAMETER_1_CANID_BATTERY_PERMANANT_FAULT_OFFSET);
messages.BMS_Short_Cir_Detection_Error=(int) (messages.BMS_Short_Cir_Detection_Error - can.BMS_PARAMETER_1_CANID_BMS_SHORT_CIR_DETECTION_ERROR_OFFSET);
messages.Reserved=(int) (messages.Reserved - can.BMS_PARAMETER_1_CANID_RESERVED_OFFSET);
 data[0] = (byte)((messages.Contactor_State & ( can.SIGNLE_READ_Mask4)));
 data[1] = (byte)((messages.Battery_Pack_Bus_Volt & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.Battery_Pack_Bus_Volt >> can.BMS_PARAMETER_1_BATTERY_PACK_BUS_VOLT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)((messages.BMS_Board_Temp & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.BMS_Board_Temp >> can.BMS_PARAMETER_1_BMS_BOARD_TEMP_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)((messages.BMS_Mode & ( can.SIGNLE_READ_Mask4)));
 data[6] = (byte)((messages.Battery_Precharge_Failure_Status & ( can.SIGNLE_READ_Mask1)) | ((messages.Battery_Charge_Inhibit & ( can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_1_BATTERY_CHARGE_INHIBIT_MASK0) | ((messages.Battery_Discharge_Inhibit & ( can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_1_BATTERY_DISCHARGE_INHIBIT_MASK0) | ((messages.Battery_Derate_Drive_Curr_Flag & ( can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_1_BATTERY_DERATE_DRIVE_CURR_FLAG_MASK0) | ((messages.Battery_Derate_Charge_Curr_Flag & ( can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_1_BATTERY_DERATE_CHARGE_CURR_FLAG_MASK0) | ((messages.Battery_Inhibit_Regen_Fault & ( can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_1_BATTERY_INHIBIT_REGEN_FAULT_MASK0) | ((messages.Battery_Permanant_Fault & ( can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_1_BATTERY_PERMANANT_FAULT_MASK0) | ((messages.BMS_Short_Cir_Detection_Error & ( can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_1_BMS_SHORT_CIR_DETECTION_ERROR_MASK0));
 data[7] = (byte)((messages.Reserved & ( can.SIGNLE_READ_Mask1)));
  return can.BMS_PARAMETER_1_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BATTERY_LIMITS( CanConverter.BATTERY_LIMITS_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Charge_Current_Limit=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.BATTERY_LIMITS_CHARGE_CURRENT_LIMIT_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_LIMITS_CANID_CHARGE_CURRENT_LIMIT_OFFSET);messages.Discharge_Current_Limit=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.BATTERY_LIMITS_DISCHARGE_CURRENT_LIMIT_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_LIMITS_CANID_DISCHARGE_CURRENT_LIMIT_OFFSET);
  return can.BATTERY_LIMITS_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BATTERY_LIMITS( CanConverter.BATTERY_LIMITS_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Charge_Current_Limit=(int) (messages.Charge_Current_Limit - can.BATTERY_LIMITS_CANID_CHARGE_CURRENT_LIMIT_OFFSET);
messages.Discharge_Current_Limit=(int) (messages.Discharge_Current_Limit - can.BATTERY_LIMITS_CANID_DISCHARGE_CURRENT_LIMIT_OFFSET);
 data[0] = (byte)((messages.Charge_Current_Limit & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Charge_Current_Limit >> can.BATTERY_LIMITS_CHARGE_CURRENT_LIMIT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Discharge_Current_Limit & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Discharge_Current_Limit >> can.BATTERY_LIMITS_DISCHARGE_CURRENT_LIMIT_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BATTERY_LIMITS_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_PARAMETER_LIMIT_2( CanConverter.BMS_PARAMETER_LIMIT_2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Regen_Current_Limit=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_PARAMETER_LIMIT_2_REGEN_CURRENT_LIMIT_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_PARAMETER_LIMIT_2_CANID_REGEN_CURRENT_LIMIT_OFFSET);messages.Reserved=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_PARAMETER_LIMIT_2_RESERVED_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BMS_PARAMETER_LIMIT_2_CANID_RESERVED_OFFSET);messages.Cell_Aggregate_Voltage=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.BMS_PARAMETER_LIMIT_2_CELL_AGGREGATE_VOLTAGE_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.BMS_PARAMETER_LIMIT_2_CANID_CELL_AGGREGATE_VOLTAGE_OFFSET);
  return can.BMS_PARAMETER_LIMIT_2_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_PARAMETER_LIMIT_2( CanConverter.BMS_PARAMETER_LIMIT_2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Regen_Current_Limit=(int) (messages.Regen_Current_Limit - can.BMS_PARAMETER_LIMIT_2_CANID_REGEN_CURRENT_LIMIT_OFFSET);
messages.Reserved=(int) (messages.Reserved - can.BMS_PARAMETER_LIMIT_2_CANID_RESERVED_OFFSET);
messages.Cell_Aggregate_Voltage=(int) (messages.Cell_Aggregate_Voltage - can.BMS_PARAMETER_LIMIT_2_CANID_CELL_AGGREGATE_VOLTAGE_OFFSET);
 data[0] = (byte)((messages.Regen_Current_Limit & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Regen_Current_Limit >> can.BMS_PARAMETER_LIMIT_2_REGEN_CURRENT_LIMIT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Reserved & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Reserved >> can.BMS_PARAMETER_LIMIT_2_RESERVED_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Cell_Aggregate_Voltage & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Cell_Aggregate_Voltage >> can.BMS_PARAMETER_LIMIT_2_CELL_AGGREGATE_VOLTAGE_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_PARAMETER_LIMIT_2_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Vehicle_Mode( CanConverter.Vehicle_Mode_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Vehicle_Mode_Lvl_1=(int)(((data[0] & (can.SIGNLE_READ_Mask4))) + can.VEHICLE_MODE_CANID_VEHICLE_MODE_LVL_1_OFFSET);messages.Vehcile_Mode_Lvl_2=(int)(((data[1] & (can.SIGNLE_READ_Mask6))) + can.VEHICLE_MODE_CANID_VEHCILE_MODE_LVL_2_OFFSET);messages.Vehicle_Mode_Lvl_3=(int)(((data[2] & (can.SIGNLE_READ_Mask5))) + can.VEHICLE_MODE_CANID_VEHICLE_MODE_LVL_3_OFFSET);messages.Reserved=(int)(((data[3] & (can.SIGNLE_READ_Mask3))) + can.VEHICLE_MODE_CANID_RESERVED_OFFSET);messages.Reserved2=(int)((((data[3] >> can.VEHICLE_MODE_RESERVED2_MASK0) & (can.SIGNLE_READ_Mask2))) + can.VEHICLE_MODE_CANID_RESERVED2_OFFSET);messages.Odometer=(int)(((data[4] & (can.SIGNLE_READ_Mask8))) + can.VEHICLE_MODE_CANID_ODOMETER_OFFSET);messages.HMI_StatusBar_Stt=(int)(((data[5] & (can.SIGNLE_READ_Mask4))) + can.VEHICLE_MODE_CANID_HMI_STATUSBAR_STT_OFFSET);
  return can.VEHICLE_MODE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Vehicle_Mode( CanConverter.Vehicle_Mode_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Vehicle_Mode_Lvl_1=(int) (messages.Vehicle_Mode_Lvl_1 - can.VEHICLE_MODE_CANID_VEHICLE_MODE_LVL_1_OFFSET);
messages.Vehcile_Mode_Lvl_2=(int) (messages.Vehcile_Mode_Lvl_2 - can.VEHICLE_MODE_CANID_VEHCILE_MODE_LVL_2_OFFSET);
messages.Vehicle_Mode_Lvl_3=(int) (messages.Vehicle_Mode_Lvl_3 - can.VEHICLE_MODE_CANID_VEHICLE_MODE_LVL_3_OFFSET);
messages.Reserved=(int) (messages.Reserved - can.VEHICLE_MODE_CANID_RESERVED_OFFSET);
messages.Reserved2=(int) (messages.Reserved2 - can.VEHICLE_MODE_CANID_RESERVED2_OFFSET);
messages.Odometer=(int) (messages.Odometer - can.VEHICLE_MODE_CANID_ODOMETER_OFFSET);
messages.HMI_StatusBar_Stt=(int) (messages.HMI_StatusBar_Stt - can.VEHICLE_MODE_CANID_HMI_STATUSBAR_STT_OFFSET);
 data[0] = (byte)((messages.Vehicle_Mode_Lvl_1 & ( can.SIGNLE_READ_Mask4)));
 data[1] = (byte)((messages.Vehcile_Mode_Lvl_2 & ( can.SIGNLE_READ_Mask6)));
 data[2] = (byte)((messages.Vehicle_Mode_Lvl_3 & ( can.SIGNLE_READ_Mask5)));
 data[3] = (byte)((messages.Reserved & ( can.SIGNLE_READ_Mask3)) | ((messages.Reserved2 & ( can.SIGNLE_READ_Mask2)) << can.VEHICLE_MODE_RESERVED2_MASK0));
 data[4] = (byte)((messages.Odometer & ( can.SIGNLE_READ_Mask8)));
 data[5] = (byte)((messages.HMI_StatusBar_Stt & ( can.SIGNLE_READ_Mask4)));
  return can.VEHICLE_MODE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Traction_Control( CanConverter.Traction_Control_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Traction_Status=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.TRACTION_CONTROL_CANID_TRACTION_STATUS_OFFSET);messages.Lean_angle_right=(int)(((( data[1] & (can.SIGNLE_READ_Mask1)) << can.TRACTION_CONTROL_LEAN_ANGLE_RIGHT_MASK0) | (( data[0] >> can.TRACTION_CONTROL_LEAN_ANGLE_RIGHT_MASK1) & (can.SIGNLE_READ_Mask1))) + can.TRACTION_CONTROL_CANID_LEAN_ANGLE_RIGHT_OFFSET);messages.Lean_angle_left=(int)(((( data[2] & (can.SIGNLE_READ_Mask1)) << can.TRACTION_CONTROL_LEAN_ANGLE_LEFT_MASK0) | (( data[1] >> can.TRACTION_CONTROL_LEAN_ANGLE_LEFT_MASK1) & (can.SIGNLE_READ_Mask1))) + can.TRACTION_CONTROL_CANID_LEAN_ANGLE_LEFT_OFFSET);messages.Throtte_1_Value=(int)(((( data[4] & (can.SIGNLE_READ_Mask1)) << can.TRACTION_CONTROL_THROTTE_1_VALUE_MASK0) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.TRACTION_CONTROL_THROTTE_1_VALUE_MASK1) | (( data[2] >> can.TRACTION_CONTROL_THROTTE_1_VALUE_MASK2) & (can.SIGNLE_READ_Mask2))) + can.TRACTION_CONTROL_CANID_THROTTE_1_VALUE_OFFSET);messages.Throttle_2_Value=(int)(((( data[6] & (can.SIGNLE_READ_Mask1)) << can.TRACTION_CONTROL_THROTTLE_2_VALUE_MASK0) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.TRACTION_CONTROL_THROTTLE_2_VALUE_MASK1) | (( data[4] >> can.TRACTION_CONTROL_THROTTLE_2_VALUE_MASK2) & (can.SIGNLE_READ_Mask2))) + can.TRACTION_CONTROL_CANID_THROTTLE_2_VALUE_OFFSET);messages.Throttle_Percentage=(int)(((( data[7] & (can.SIGNLE_READ_Mask1)) << can.TRACTION_CONTROL_THROTTLE_PERCENTAGE_MASK0) | (( data[6] >> can.TRACTION_CONTROL_THROTTLE_PERCENTAGE_MASK1) & (can.SIGNLE_READ_Mask1))) + can.TRACTION_CONTROL_CANID_THROTTLE_PERCENTAGE_OFFSET);messages.Motor_Cut=(int)((((data[7] >> can.TRACTION_CONTROL_MOTOR_CUT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.TRACTION_CONTROL_CANID_MOTOR_CUT_OFFSET);
  return can.TRACTION_CONTROL_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Traction_Control( CanConverter.Traction_Control_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Traction_Status=(int) (messages.Traction_Status - can.TRACTION_CONTROL_CANID_TRACTION_STATUS_OFFSET);
messages.Lean_angle_right=(int) (messages.Lean_angle_right - can.TRACTION_CONTROL_CANID_LEAN_ANGLE_RIGHT_OFFSET);
messages.Lean_angle_left=(int) (messages.Lean_angle_left - can.TRACTION_CONTROL_CANID_LEAN_ANGLE_LEFT_OFFSET);
messages.Throtte_1_Value=(int) (messages.Throtte_1_Value - can.TRACTION_CONTROL_CANID_THROTTE_1_VALUE_OFFSET);
messages.Throttle_2_Value=(int) (messages.Throttle_2_Value - can.TRACTION_CONTROL_CANID_THROTTLE_2_VALUE_OFFSET);
messages.Throttle_Percentage=(int) (messages.Throttle_Percentage - can.TRACTION_CONTROL_CANID_THROTTLE_PERCENTAGE_OFFSET);
messages.Motor_Cut=(int) (messages.Motor_Cut - can.TRACTION_CONTROL_CANID_MOTOR_CUT_OFFSET);
 data[0] = (byte)((messages.Traction_Status & ( can.SIGNLE_READ_Mask1)) | ((messages.Lean_angle_right & (can.SIGNLE_READ_Mask7)) << can.TRACTION_CONTROL_LEAN_ANGLE_RIGHT_MASK1));
 data[1] = (byte)(((messages.Lean_angle_right >> can.TRACTION_CONTROL_LEAN_ANGLE_RIGHT_MASK0) & (can.SIGNLE_READ_Mask1)) | ((messages.Lean_angle_left & (can.SIGNLE_READ_Mask7)) << can.TRACTION_CONTROL_LEAN_ANGLE_LEFT_MASK1));
 data[2] = (byte)(((messages.Lean_angle_left >> can.TRACTION_CONTROL_LEAN_ANGLE_LEFT_MASK0) & (can.SIGNLE_READ_Mask1)) | ((messages.Throtte_1_Value & (can.SIGNLE_READ_Mask7)) << can.TRACTION_CONTROL_THROTTE_1_VALUE_MASK2));
 data[3] = (byte)(((messages.Throtte_1_Value >> can.TRACTION_CONTROL_THROTTE_1_VALUE_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.Throtte_1_Value >> can.TRACTION_CONTROL_THROTTE_1_VALUE_MASK0) & (can.SIGNLE_READ_Mask1)) | ((messages.Throttle_2_Value & (can.SIGNLE_READ_Mask7)) << can.TRACTION_CONTROL_THROTTLE_2_VALUE_MASK2));
 data[5] = (byte)(((messages.Throttle_2_Value >> can.TRACTION_CONTROL_THROTTLE_2_VALUE_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.Throttle_2_Value >> can.TRACTION_CONTROL_THROTTLE_2_VALUE_MASK0) & (can.SIGNLE_READ_Mask1)) | ((messages.Throttle_Percentage & (can.SIGNLE_READ_Mask7)) << can.TRACTION_CONTROL_THROTTLE_PERCENTAGE_MASK1));
 data[7] = (byte)(((messages.Throttle_Percentage >> can.TRACTION_CONTROL_THROTTLE_PERCENTAGE_MASK0) & (can.SIGNLE_READ_Mask1)) | ((messages.Motor_Cut & ( can.SIGNLE_READ_Mask1)) << can.TRACTION_CONTROL_MOTOR_CUT_MASK0));
  return can.TRACTION_CONTROL_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_SOM_Parameters_1( CanConverter.SOM_Parameters_1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.SOM_HeartBeat_Failure=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.SOM_PARAMETERS_1_CANID_SOM_HEARTBEAT_FAILURE_OFFSET);messages.SOM_Status=(int)((((data[0] >> can.SOM_PARAMETERS_1_SOM_STATUS_MASK0) & (can.SIGNLE_READ_Mask4))) + can.SOM_PARAMETERS_1_CANID_SOM_STATUS_OFFSET);
  return can.SOM_PARAMETERS_1_ID;
}

/*------------------------------------------------------------*/

public long Serialize_SOM_Parameters_1( CanConverter.SOM_Parameters_1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.SOM_HeartBeat_Failure=(int) (messages.SOM_HeartBeat_Failure - can.SOM_PARAMETERS_1_CANID_SOM_HEARTBEAT_FAILURE_OFFSET);
messages.SOM_Status=(int) (messages.SOM_Status - can.SOM_PARAMETERS_1_CANID_SOM_STATUS_OFFSET);
 data[0] = (byte)((messages.SOM_HeartBeat_Failure & ( can.SIGNLE_READ_Mask1)) | ((messages.SOM_Status & ( can.SIGNLE_READ_Mask4)) << can.SOM_PARAMETERS_1_SOM_STATUS_MASK0));
  return can.SOM_PARAMETERS_1_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ABS_Parameters( CanConverter.ABS_Parameters_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ABS_FrontBrake_Status=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.ABS_PARAMETERS_CANID_ABS_FRONTBRAKE_STATUS_OFFSET);messages.ABS_RearBrake_Status=(int)((((data[0] >> can.ABS_PARAMETERS_ABS_REARBRAKE_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ABS_PARAMETERS_CANID_ABS_REARBRAKE_STATUS_OFFSET);messages.ABS_State=(int)((((data[0] >> can.ABS_PARAMETERS_ABS_STATE_MASK0) & (can.SIGNLE_READ_Mask4))) + can.ABS_PARAMETERS_CANID_ABS_STATE_OFFSET);messages.ABS_Faulty=(int)((((data[0] >> can.ABS_PARAMETERS_ABS_FAULTY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ABS_PARAMETERS_CANID_ABS_FAULTY_OFFSET);
  return can.ABS_PARAMETERS_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ABS_Parameters( CanConverter.ABS_Parameters_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ABS_FrontBrake_Status=(int) (messages.ABS_FrontBrake_Status - can.ABS_PARAMETERS_CANID_ABS_FRONTBRAKE_STATUS_OFFSET);
messages.ABS_RearBrake_Status=(int) (messages.ABS_RearBrake_Status - can.ABS_PARAMETERS_CANID_ABS_REARBRAKE_STATUS_OFFSET);
messages.ABS_State=(int) (messages.ABS_State - can.ABS_PARAMETERS_CANID_ABS_STATE_OFFSET);
messages.ABS_Faulty=(int) (messages.ABS_Faulty - can.ABS_PARAMETERS_CANID_ABS_FAULTY_OFFSET);
 data[0] = (byte)((messages.ABS_FrontBrake_Status & ( can.SIGNLE_READ_Mask1)) | ((messages.ABS_RearBrake_Status & ( can.SIGNLE_READ_Mask1)) << can.ABS_PARAMETERS_ABS_REARBRAKE_STATUS_MASK0) | ((messages.ABS_State & ( can.SIGNLE_READ_Mask4)) << can.ABS_PARAMETERS_ABS_STATE_MASK0) | ((messages.ABS_Faulty & ( can.SIGNLE_READ_Mask1)) << can.ABS_PARAMETERS_ABS_FAULTY_MASK0));
  return can.ABS_PARAMETERS_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Traction_Control2( CanConverter.Traction_Control2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Throttle_1_per=(int)(((data[0] & (can.SIGNLE_READ_Mask8))) + can.TRACTION_CONTROL2_CANID_THROTTLE_1_PER_OFFSET);messages.Throttle_2_per=(int)(((data[1] & (can.SIGNLE_READ_Mask8))) + can.TRACTION_CONTROL2_CANID_THROTTLE_2_PER_OFFSET);
  return can.TRACTION_CONTROL2_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Traction_Control2( CanConverter.Traction_Control2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Throttle_1_per=(int) (messages.Throttle_1_per - can.TRACTION_CONTROL2_CANID_THROTTLE_1_PER_OFFSET);
messages.Throttle_2_per=(int) (messages.Throttle_2_per - can.TRACTION_CONTROL2_CANID_THROTTLE_2_PER_OFFSET);
 data[0] = (byte)((messages.Throttle_1_per & ( can.SIGNLE_READ_Mask8)));
 data[1] = (byte)((messages.Throttle_2_per & ( can.SIGNLE_READ_Mask8)));
  return can.TRACTION_CONTROL2_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Vehicle_Func( CanConverter.Vehicle_Func_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Front_Brake_Status=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_FUNC_CANID_FRONT_BRAKE_STATUS_OFFSET);messages.Rear_Brake_Status=(int)((((data[0] >> can.VEHICLE_FUNC_REAR_BRAKE_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_FUNC_CANID_REAR_BRAKE_STATUS_OFFSET);messages.Cruise_Control_Req=(int)((((data[0] >> can.VEHICLE_FUNC_CRUISE_CONTROL_REQ_MASK0) & (can.SIGNLE_READ_Mask3))) + can.VEHICLE_FUNC_CANID_CRUISE_CONTROL_REQ_OFFSET);messages.Hill_Hold_Command=(int)((((data[0] >> can.VEHICLE_FUNC_HILL_HOLD_COMMAND_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_FUNC_CANID_HILL_HOLD_COMMAND_OFFSET);messages.Regeneration_Command=(int)(((( data[1] & (can.SIGNLE_READ_Mask2)) << can.VEHICLE_FUNC_REGENERATION_COMMAND_MASK0) | (( data[0] >> can.VEHICLE_FUNC_REGENERATION_COMMAND_MASK1) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_FUNC_CANID_REGENERATION_COMMAND_OFFSET);messages.Cruise_Set_Speed=(int)(((( data[2] & (can.SIGNLE_READ_Mask5)) << can.VEHICLE_FUNC_CRUISE_SET_SPEED_MASK0) | (( data[1] >> can.VEHICLE_FUNC_CRUISE_SET_SPEED_MASK1) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_FUNC_CANID_CRUISE_SET_SPEED_OFFSET);
  return can.VEHICLE_FUNC_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Vehicle_Func( CanConverter.Vehicle_Func_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Front_Brake_Status=(int) (messages.Front_Brake_Status - can.VEHICLE_FUNC_CANID_FRONT_BRAKE_STATUS_OFFSET);
messages.Rear_Brake_Status=(int) (messages.Rear_Brake_Status - can.VEHICLE_FUNC_CANID_REAR_BRAKE_STATUS_OFFSET);
messages.Cruise_Control_Req=(int) (messages.Cruise_Control_Req - can.VEHICLE_FUNC_CANID_CRUISE_CONTROL_REQ_OFFSET);
messages.Hill_Hold_Command=(int) (messages.Hill_Hold_Command - can.VEHICLE_FUNC_CANID_HILL_HOLD_COMMAND_OFFSET);
messages.Regeneration_Command=(int) (messages.Regeneration_Command - can.VEHICLE_FUNC_CANID_REGENERATION_COMMAND_OFFSET);
messages.Cruise_Set_Speed=(int) (messages.Cruise_Set_Speed - can.VEHICLE_FUNC_CANID_CRUISE_SET_SPEED_OFFSET);
 data[0] = (byte)((messages.Front_Brake_Status & ( can.SIGNLE_READ_Mask1)) | ((messages.Rear_Brake_Status & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_FUNC_REAR_BRAKE_STATUS_MASK0) | ((messages.Cruise_Control_Req & ( can.SIGNLE_READ_Mask3)) << can.VEHICLE_FUNC_CRUISE_CONTROL_REQ_MASK0) | ((messages.Hill_Hold_Command & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_FUNC_HILL_HOLD_COMMAND_MASK0) | ((messages.Regeneration_Command & (can.SIGNLE_READ_Mask1)) << can.VEHICLE_FUNC_REGENERATION_COMMAND_MASK1));
 data[1] = (byte)(((messages.Regeneration_Command >> can.VEHICLE_FUNC_REGENERATION_COMMAND_MASK0) & (can.SIGNLE_READ_Mask2)) | ((messages.Cruise_Set_Speed & (can.SIGNLE_READ_Mask6)) << can.VEHICLE_FUNC_CRUISE_SET_SPEED_MASK1));
 data[2] = (byte)(((messages.Cruise_Set_Speed >> can.VEHICLE_FUNC_CRUISE_SET_SPEED_MASK0) & (can.SIGNLE_READ_Mask5)));
  return can.VEHICLE_FUNC_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_PARAMETER_3( CanConverter.BMS_PARAMETER_3_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Balancing_Status=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_3_CANID_BALANCING_STATUS_OFFSET);messages.Effective_Battery_Temperature=(int)(((( data[1] & (can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_3_EFFECTIVE_BATTERY_TEMPERATURE_MASK0) | (( data[0] >> can.BMS_PARAMETER_3_EFFECTIVE_BATTERY_TEMPERATURE_MASK1) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_3_CANID_EFFECTIVE_BATTERY_TEMPERATURE_OFFSET);messages.Delta_Temp=(int)(((( data[2] & (can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_3_DELTA_TEMP_MASK0) | (( data[1] >> can.BMS_PARAMETER_3_DELTA_TEMP_MASK1) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_3_CANID_DELTA_TEMP_OFFSET);messages.Delta_Voltage=(int)(((( data[4] & (can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_3_DELTA_VOLTAGE_MASK0) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.BMS_PARAMETER_3_DELTA_VOLTAGE_MASK1) | (( data[2] >> can.BMS_PARAMETER_3_DELTA_VOLTAGE_MASK2) & (can.SIGNLE_READ_Mask2))) + can.BMS_PARAMETER_3_CANID_DELTA_VOLTAGE_OFFSET);messages.HVIL_OBC_Req=(int)((((data[4] >> can.BMS_PARAMETER_3_HVIL_OBC_REQ_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_3_CANID_HVIL_OBC_REQ_OFFSET);messages.HVIL_MCU_Req=(int)((((data[4] >> can.BMS_PARAMETER_3_HVIL_MCU_REQ_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_3_CANID_HVIL_MCU_REQ_OFFSET);messages.HVIL_OBC_Status=(int)((((data[4] >> can.BMS_PARAMETER_3_HVIL_OBC_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_3_CANID_HVIL_OBC_STATUS_OFFSET);messages.HVIL_MCU_Status=(int)((((data[4] >> can.BMS_PARAMETER_3_HVIL_MCU_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_PARAMETER_3_CANID_HVIL_MCU_STATUS_OFFSET);messages.Isolation_Resistance=(int)(((( data[6] & (can.SIGNLE_READ_Mask6)) << can.BMS_PARAMETER_3_ISOLATION_RESISTANCE_MASK0) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_PARAMETER_3_ISOLATION_RESISTANCE_MASK1) | (( data[4] >> can.BMS_PARAMETER_3_ISOLATION_RESISTANCE_MASK2) & (can.SIGNLE_READ_Mask2))) + can.BMS_PARAMETER_3_CANID_ISOLATION_RESISTANCE_OFFSET);
  return can.BMS_PARAMETER_3_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_PARAMETER_3( CanConverter.BMS_PARAMETER_3_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Balancing_Status=(int) (messages.Balancing_Status - can.BMS_PARAMETER_3_CANID_BALANCING_STATUS_OFFSET);
messages.Effective_Battery_Temperature=(int) (messages.Effective_Battery_Temperature - can.BMS_PARAMETER_3_CANID_EFFECTIVE_BATTERY_TEMPERATURE_OFFSET);
messages.Delta_Temp=(int) (messages.Delta_Temp - can.BMS_PARAMETER_3_CANID_DELTA_TEMP_OFFSET);
messages.Delta_Voltage=(int) (messages.Delta_Voltage - can.BMS_PARAMETER_3_CANID_DELTA_VOLTAGE_OFFSET);
messages.HVIL_OBC_Req=(int) (messages.HVIL_OBC_Req - can.BMS_PARAMETER_3_CANID_HVIL_OBC_REQ_OFFSET);
messages.HVIL_MCU_Req=(int) (messages.HVIL_MCU_Req - can.BMS_PARAMETER_3_CANID_HVIL_MCU_REQ_OFFSET);
messages.HVIL_OBC_Status=(int) (messages.HVIL_OBC_Status - can.BMS_PARAMETER_3_CANID_HVIL_OBC_STATUS_OFFSET);
messages.HVIL_MCU_Status=(int) (messages.HVIL_MCU_Status - can.BMS_PARAMETER_3_CANID_HVIL_MCU_STATUS_OFFSET);
messages.Isolation_Resistance=(int) (messages.Isolation_Resistance - can.BMS_PARAMETER_3_CANID_ISOLATION_RESISTANCE_OFFSET);
 data[0] = (byte)((messages.Balancing_Status & ( can.SIGNLE_READ_Mask1)) | ((messages.Effective_Battery_Temperature & (can.SIGNLE_READ_Mask7)) << can.BMS_PARAMETER_3_EFFECTIVE_BATTERY_TEMPERATURE_MASK1));
 data[1] = (byte)(((messages.Effective_Battery_Temperature >> can.BMS_PARAMETER_3_EFFECTIVE_BATTERY_TEMPERATURE_MASK0) & (can.SIGNLE_READ_Mask1)) | ((messages.Delta_Temp & (can.SIGNLE_READ_Mask7)) << can.BMS_PARAMETER_3_DELTA_TEMP_MASK1));
 data[2] = (byte)(((messages.Delta_Temp >> can.BMS_PARAMETER_3_DELTA_TEMP_MASK0) & (can.SIGNLE_READ_Mask1)) | ((messages.Delta_Voltage & (can.SIGNLE_READ_Mask7)) << can.BMS_PARAMETER_3_DELTA_VOLTAGE_MASK2));
 data[3] = (byte)(((messages.Delta_Voltage >> can.BMS_PARAMETER_3_DELTA_VOLTAGE_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.Delta_Voltage >> can.BMS_PARAMETER_3_DELTA_VOLTAGE_MASK0) & (can.SIGNLE_READ_Mask1)) | ((messages.HVIL_OBC_Req & ( can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_3_HVIL_OBC_REQ_MASK0) | ((messages.HVIL_MCU_Req & ( can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_3_HVIL_MCU_REQ_MASK0) | ((messages.HVIL_OBC_Status & ( can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_3_HVIL_OBC_STATUS_MASK0) | ((messages.HVIL_MCU_Status & ( can.SIGNLE_READ_Mask1)) << can.BMS_PARAMETER_3_HVIL_MCU_STATUS_MASK0) | ((messages.Isolation_Resistance & (can.SIGNLE_READ_Mask2)) << can.BMS_PARAMETER_3_ISOLATION_RESISTANCE_MASK2));
 data[5] = (byte)(((messages.Isolation_Resistance >> can.BMS_PARAMETER_3_ISOLATION_RESISTANCE_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.Isolation_Resistance >> can.BMS_PARAMETER_3_ISOLATION_RESISTANCE_MASK0) & (can.SIGNLE_READ_Mask6)));
  return can.BMS_PARAMETER_3_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_PARAMETER_4( CanConverter.BMS_PARAMETER_4_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Pack_Internal_Resistance=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_PARAMETER_4_PACK_INTERNAL_RESISTANCE_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_PARAMETER_4_CANID_PACK_INTERNAL_RESISTANCE_OFFSET);messages.Pack_SOH=(int)(((data[2] & (can.SIGNLE_READ_Mask8))) + can.BMS_PARAMETER_4_CANID_PACK_SOH_OFFSET);messages.Pack_SOP=(int)(((data[3] & (can.SIGNLE_READ_Mask8))) + can.BMS_PARAMETER_4_CANID_PACK_SOP_OFFSET);messages.Total_Charge_Cycles=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_PARAMETER_4_TOTAL_CHARGE_CYCLES_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BMS_PARAMETER_4_CANID_TOTAL_CHARGE_CYCLES_OFFSET);messages.Pack_DOD=(int)(((data[6] & (can.SIGNLE_READ_Mask8))) + can.BMS_PARAMETER_4_CANID_PACK_DOD_OFFSET);
  return can.BMS_PARAMETER_4_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_PARAMETER_4( CanConverter.BMS_PARAMETER_4_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Pack_Internal_Resistance=(int) (messages.Pack_Internal_Resistance - can.BMS_PARAMETER_4_CANID_PACK_INTERNAL_RESISTANCE_OFFSET);
messages.Pack_SOH=(int) (messages.Pack_SOH - can.BMS_PARAMETER_4_CANID_PACK_SOH_OFFSET);
messages.Pack_SOP=(int) (messages.Pack_SOP - can.BMS_PARAMETER_4_CANID_PACK_SOP_OFFSET);
messages.Total_Charge_Cycles=(int) (messages.Total_Charge_Cycles - can.BMS_PARAMETER_4_CANID_TOTAL_CHARGE_CYCLES_OFFSET);
messages.Pack_DOD=(int) (messages.Pack_DOD - can.BMS_PARAMETER_4_CANID_PACK_DOD_OFFSET);
 data[0] = (byte)((messages.Pack_Internal_Resistance & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Pack_Internal_Resistance >> can.BMS_PARAMETER_4_PACK_INTERNAL_RESISTANCE_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Pack_SOH & ( can.SIGNLE_READ_Mask8)));
 data[3] = (byte)((messages.Pack_SOP & ( can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Total_Charge_Cycles & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Total_Charge_Cycles >> can.BMS_PARAMETER_4_TOTAL_CHARGE_CYCLES_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Pack_DOD & ( can.SIGNLE_READ_Mask8)));
  return can.BMS_PARAMETER_4_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Battery_Energy_Cycles( CanConverter.Battery_Energy_Cycles_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cycle_Energy_In=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.BATTERY_ENERGY_CYCLES_CYCLE_ENERGY_IN_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_ENERGY_CYCLES_CANID_CYCLE_ENERGY_IN_OFFSET);messages.Cycle_Enegy_Out=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.BATTERY_ENERGY_CYCLES_CYCLE_ENEGY_OUT_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_ENERGY_CYCLES_CANID_CYCLE_ENEGY_OUT_OFFSET);messages.Total_Energy_In=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.BATTERY_ENERGY_CYCLES_TOTAL_ENERGY_IN_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_ENERGY_CYCLES_CANID_TOTAL_ENERGY_IN_OFFSET);messages.Total_Energy_Out=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.BATTERY_ENERGY_CYCLES_TOTAL_ENERGY_OUT_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_ENERGY_CYCLES_CANID_TOTAL_ENERGY_OUT_OFFSET);
  return can.BATTERY_ENERGY_CYCLES_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Battery_Energy_Cycles( CanConverter.Battery_Energy_Cycles_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cycle_Energy_In=(int) (messages.Cycle_Energy_In - can.BATTERY_ENERGY_CYCLES_CANID_CYCLE_ENERGY_IN_OFFSET);
messages.Cycle_Enegy_Out=(int) (messages.Cycle_Enegy_Out - can.BATTERY_ENERGY_CYCLES_CANID_CYCLE_ENEGY_OUT_OFFSET);
messages.Total_Energy_In=(int) (messages.Total_Energy_In - can.BATTERY_ENERGY_CYCLES_CANID_TOTAL_ENERGY_IN_OFFSET);
messages.Total_Energy_Out=(int) (messages.Total_Energy_Out - can.BATTERY_ENERGY_CYCLES_CANID_TOTAL_ENERGY_OUT_OFFSET);
 data[0] = (byte)((messages.Cycle_Energy_In & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Cycle_Energy_In >> can.BATTERY_ENERGY_CYCLES_CYCLE_ENERGY_IN_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Cycle_Enegy_Out & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Cycle_Enegy_Out >> can.BATTERY_ENERGY_CYCLES_CYCLE_ENEGY_OUT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Total_Energy_In & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Total_Energy_In >> can.BATTERY_ENERGY_CYCLES_TOTAL_ENERGY_IN_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Total_Energy_Out & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Total_Energy_Out >> can.BATTERY_ENERGY_CYCLES_TOTAL_ENERGY_OUT_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BATTERY_ENERGY_CYCLES_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_OBC_Wakeup_Info( CanConverter.OBC_Wakeup_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_Wakeup=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.OBC_WAKEUP_INFO_CANID_OBC_WAKEUP_OFFSET);
  return can.OBC_WAKEUP_INFO_ID;
}

/*------------------------------------------------------------*/

public long Serialize_OBC_Wakeup_Info( CanConverter.OBC_Wakeup_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_Wakeup=(int) (messages.OBC_Wakeup - can.OBC_WAKEUP_INFO_CANID_OBC_WAKEUP_OFFSET);
 data[0] = (byte)((messages.OBC_Wakeup & ( can.SIGNLE_READ_Mask1)));
  return can.OBC_WAKEUP_INFO_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BATTERY_TEMPERATURE( CanConverter.BATTERY_TEMPERATURE_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Battery_Temperature_1=(int)(((data[0] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_1_OFFSET);messages.Battery_Temperature_2=(int)(((data[1] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_2_OFFSET);messages.Battery_Temperature_3=(int)(((data[2] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_3_OFFSET);messages.Battery_Temperature_4=(int)(((data[3] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_4_OFFSET);messages.Battery_Temperature_5=(int)(((data[4] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_5_OFFSET);messages.Battery_Temperature_6=(int)(((data[5] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_6_OFFSET);messages.Battery_Temperature_Min=(int)(((data[6] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_MIN_OFFSET);messages.Battery_Temperature_Max=(int)(((data[7] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_MAX_OFFSET);
  return can.BATTERY_TEMPERATURE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BATTERY_TEMPERATURE( CanConverter.BATTERY_TEMPERATURE_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Battery_Temperature_1=(int) (messages.Battery_Temperature_1 - can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_1_OFFSET);
messages.Battery_Temperature_2=(int) (messages.Battery_Temperature_2 - can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_2_OFFSET);
messages.Battery_Temperature_3=(int) (messages.Battery_Temperature_3 - can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_3_OFFSET);
messages.Battery_Temperature_4=(int) (messages.Battery_Temperature_4 - can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_4_OFFSET);
messages.Battery_Temperature_5=(int) (messages.Battery_Temperature_5 - can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_5_OFFSET);
messages.Battery_Temperature_6=(int) (messages.Battery_Temperature_6 - can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_6_OFFSET);
messages.Battery_Temperature_Min=(int) (messages.Battery_Temperature_Min - can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_MIN_OFFSET);
messages.Battery_Temperature_Max=(int) (messages.Battery_Temperature_Max - can.BATTERY_TEMPERATURE_CANID_BATTERY_TEMPERATURE_MAX_OFFSET);
 data[0] = (byte)((messages.Battery_Temperature_1 & ( can.SIGNLE_READ_Mask8)));
 data[1] = (byte)((messages.Battery_Temperature_2 & ( can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Battery_Temperature_3 & ( can.SIGNLE_READ_Mask8)));
 data[3] = (byte)((messages.Battery_Temperature_4 & ( can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Battery_Temperature_5 & ( can.SIGNLE_READ_Mask8)));
 data[5] = (byte)((messages.Battery_Temperature_6 & ( can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Battery_Temperature_Min & ( can.SIGNLE_READ_Mask8)));
 data[7] = (byte)((messages.Battery_Temperature_Max & ( can.SIGNLE_READ_Mask8)));
  return can.BATTERY_TEMPERATURE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Custom_Mode( CanConverter.Custom_Mode_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Custom_Drive_Enable=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.CUSTOM_MODE_CANID_CUSTOM_DRIVE_ENABLE_OFFSET);messages.Power=(int)(((( data[1] & (can.SIGNLE_READ_Mask1)) << can.CUSTOM_MODE_POWER_MASK0) | (( data[0] >> can.CUSTOM_MODE_POWER_MASK1) & (can.SIGNLE_READ_Mask1))) + can.CUSTOM_MODE_CANID_POWER_OFFSET);messages.Throttle_performance=(int)(((( data[2] & (can.SIGNLE_READ_Mask1)) << can.CUSTOM_MODE_THROTTLE_PERFORMANCE_MASK0) | (( data[1] >> can.CUSTOM_MODE_THROTTLE_PERFORMANCE_MASK1) & (can.SIGNLE_READ_Mask1))) + can.CUSTOM_MODE_CANID_THROTTLE_PERFORMANCE_OFFSET);messages.Regen=(int)(((( data[3] & (can.SIGNLE_READ_Mask1)) << can.CUSTOM_MODE_REGEN_MASK0) | (( data[2] >> can.CUSTOM_MODE_REGEN_MASK1) & (can.SIGNLE_READ_Mask1))) + can.CUSTOM_MODE_CANID_REGEN_OFFSET);
  return can.CUSTOM_MODE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Custom_Mode( CanConverter.Custom_Mode_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Custom_Drive_Enable=(int) (messages.Custom_Drive_Enable - can.CUSTOM_MODE_CANID_CUSTOM_DRIVE_ENABLE_OFFSET);
messages.Power=(int) (messages.Power - can.CUSTOM_MODE_CANID_POWER_OFFSET);
messages.Throttle_performance=(int) (messages.Throttle_performance - can.CUSTOM_MODE_CANID_THROTTLE_PERFORMANCE_OFFSET);
messages.Regen=(int) (messages.Regen - can.CUSTOM_MODE_CANID_REGEN_OFFSET);
 data[0] = (byte)((messages.Custom_Drive_Enable & ( can.SIGNLE_READ_Mask1)) | ((messages.Power & (can.SIGNLE_READ_Mask7)) << can.CUSTOM_MODE_POWER_MASK1));
 data[1] = (byte)(((messages.Power >> can.CUSTOM_MODE_POWER_MASK0) & (can.SIGNLE_READ_Mask1)) | ((messages.Throttle_performance & (can.SIGNLE_READ_Mask7)) << can.CUSTOM_MODE_THROTTLE_PERFORMANCE_MASK1));
 data[2] = (byte)(((messages.Throttle_performance >> can.CUSTOM_MODE_THROTTLE_PERFORMANCE_MASK0) & (can.SIGNLE_READ_Mask1)) | ((messages.Regen & (can.SIGNLE_READ_Mask7)) << can.CUSTOM_MODE_REGEN_MASK1));
 data[3] = (byte)(((messages.Regen >> can.CUSTOM_MODE_REGEN_MASK0) & (can.SIGNLE_READ_Mask1)));
  return can.CUSTOM_MODE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_VCU_Data( CanConverter.VCU_Data_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Charger_Plugin=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_CHARGER_PLUGIN_OFFSET);messages.MCU_Power_Supply=(int)((((data[0] >> can.VCU_DATA_MCU_POWER_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_MCU_POWER_SUPPLY_OFFSET);messages.HU_Power_Supply=(int)((((data[0] >> can.VCU_DATA_HU_POWER_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_HU_POWER_SUPPLY_OFFSET);messages.Left_Indicator_Power_Supply=(int)((((data[0] >> can.VCU_DATA_LEFT_INDICATOR_POWER_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_LEFT_INDICATOR_POWER_SUPPLY_OFFSET);messages.Right_Indicator_Power_Supply=(int)((((data[0] >> can.VCU_DATA_RIGHT_INDICATOR_POWER_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_RIGHT_INDICATOR_POWER_SUPPLY_OFFSET);messages.High_Beam_Power_Supply=(int)((((data[0] >> can.VCU_DATA_HIGH_BEAM_POWER_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_HIGH_BEAM_POWER_SUPPLY_OFFSET);messages.Low_Beam_Power_Supply=(int)((((data[0] >> can.VCU_DATA_LOW_BEAM_POWER_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_LOW_BEAM_POWER_SUPPLY_OFFSET);messages.DRL_Power_Supply=(int)((((data[0] >> can.VCU_DATA_DRL_POWER_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_DRL_POWER_SUPPLY_OFFSET);messages.Left_Switch_Cube_Power_Supply=(int)(((data[1] & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_LEFT_SWITCH_CUBE_POWER_SUPPLY_OFFSET);messages.Right_Switch_Cube_Power_Supply=(int)((((data[1] >> can.VCU_DATA_RIGHT_SWITCH_CUBE_POWER_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_RIGHT_SWITCH_CUBE_POWER_SUPPLY_OFFSET);messages.Horn_Power_Supply=(int)((((data[1] >> can.VCU_DATA_HORN_POWER_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_HORN_POWER_SUPPLY_OFFSET);messages.Speaker_Power_Supply=(int)((((data[1] >> can.VCU_DATA_SPEAKER_POWER_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_SPEAKER_POWER_SUPPLY_OFFSET);messages.SOM_Power_Supply=(int)((((data[1] >> can.VCU_DATA_SOM_POWER_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_SOM_POWER_SUPPLY_OFFSET);messages.ESCL_Power_Supply=(int)((((data[1] >> can.VCU_DATA_ESCL_POWER_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_ESCL_POWER_SUPPLY_OFFSET);messages.ESCL_Commands=(int)(((( data[2] & (can.SIGNLE_READ_Mask1)) << can.VCU_DATA_ESCL_COMMANDS_MASK0) | (( data[1] >> can.VCU_DATA_ESCL_COMMANDS_MASK1) & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_ESCL_COMMANDS_OFFSET);messages.Charger_Info=(int)(((data[3] & (can.SIGNLE_READ_Mask1))) + can.VCU_DATA_CANID_CHARGER_INFO_OFFSET);
  return can.VCU_DATA_ID;
}

/*------------------------------------------------------------*/

public long Serialize_VCU_Data( CanConverter.VCU_Data_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Charger_Plugin=(int) (messages.Charger_Plugin - can.VCU_DATA_CANID_CHARGER_PLUGIN_OFFSET);
messages.MCU_Power_Supply=(int) (messages.MCU_Power_Supply - can.VCU_DATA_CANID_MCU_POWER_SUPPLY_OFFSET);
messages.HU_Power_Supply=(int) (messages.HU_Power_Supply - can.VCU_DATA_CANID_HU_POWER_SUPPLY_OFFSET);
messages.Left_Indicator_Power_Supply=(int) (messages.Left_Indicator_Power_Supply - can.VCU_DATA_CANID_LEFT_INDICATOR_POWER_SUPPLY_OFFSET);
messages.Right_Indicator_Power_Supply=(int) (messages.Right_Indicator_Power_Supply - can.VCU_DATA_CANID_RIGHT_INDICATOR_POWER_SUPPLY_OFFSET);
messages.High_Beam_Power_Supply=(int) (messages.High_Beam_Power_Supply - can.VCU_DATA_CANID_HIGH_BEAM_POWER_SUPPLY_OFFSET);
messages.Low_Beam_Power_Supply=(int) (messages.Low_Beam_Power_Supply - can.VCU_DATA_CANID_LOW_BEAM_POWER_SUPPLY_OFFSET);
messages.DRL_Power_Supply=(int) (messages.DRL_Power_Supply - can.VCU_DATA_CANID_DRL_POWER_SUPPLY_OFFSET);
messages.Left_Switch_Cube_Power_Supply=(int) (messages.Left_Switch_Cube_Power_Supply - can.VCU_DATA_CANID_LEFT_SWITCH_CUBE_POWER_SUPPLY_OFFSET);
messages.Right_Switch_Cube_Power_Supply=(int) (messages.Right_Switch_Cube_Power_Supply - can.VCU_DATA_CANID_RIGHT_SWITCH_CUBE_POWER_SUPPLY_OFFSET);
messages.Horn_Power_Supply=(int) (messages.Horn_Power_Supply - can.VCU_DATA_CANID_HORN_POWER_SUPPLY_OFFSET);
messages.Speaker_Power_Supply=(int) (messages.Speaker_Power_Supply - can.VCU_DATA_CANID_SPEAKER_POWER_SUPPLY_OFFSET);
messages.SOM_Power_Supply=(int) (messages.SOM_Power_Supply - can.VCU_DATA_CANID_SOM_POWER_SUPPLY_OFFSET);
messages.ESCL_Power_Supply=(int) (messages.ESCL_Power_Supply - can.VCU_DATA_CANID_ESCL_POWER_SUPPLY_OFFSET);
messages.ESCL_Commands=(int) (messages.ESCL_Commands - can.VCU_DATA_CANID_ESCL_COMMANDS_OFFSET);
messages.Charger_Info=(int) (messages.Charger_Info - can.VCU_DATA_CANID_CHARGER_INFO_OFFSET);
 data[0] = (byte)((messages.Charger_Plugin & ( can.SIGNLE_READ_Mask1)) | ((messages.MCU_Power_Supply & ( can.SIGNLE_READ_Mask1)) << can.VCU_DATA_MCU_POWER_SUPPLY_MASK0) | ((messages.HU_Power_Supply & ( can.SIGNLE_READ_Mask1)) << can.VCU_DATA_HU_POWER_SUPPLY_MASK0) | ((messages.Left_Indicator_Power_Supply & ( can.SIGNLE_READ_Mask1)) << can.VCU_DATA_LEFT_INDICATOR_POWER_SUPPLY_MASK0) | ((messages.Right_Indicator_Power_Supply & ( can.SIGNLE_READ_Mask1)) << can.VCU_DATA_RIGHT_INDICATOR_POWER_SUPPLY_MASK0) | ((messages.High_Beam_Power_Supply & ( can.SIGNLE_READ_Mask1)) << can.VCU_DATA_HIGH_BEAM_POWER_SUPPLY_MASK0) | ((messages.Low_Beam_Power_Supply & ( can.SIGNLE_READ_Mask1)) << can.VCU_DATA_LOW_BEAM_POWER_SUPPLY_MASK0) | ((messages.DRL_Power_Supply & ( can.SIGNLE_READ_Mask1)) << can.VCU_DATA_DRL_POWER_SUPPLY_MASK0));
 data[1] = (byte)((messages.Left_Switch_Cube_Power_Supply & ( can.SIGNLE_READ_Mask1)) | ((messages.Right_Switch_Cube_Power_Supply & ( can.SIGNLE_READ_Mask1)) << can.VCU_DATA_RIGHT_SWITCH_CUBE_POWER_SUPPLY_MASK0) | ((messages.Horn_Power_Supply & ( can.SIGNLE_READ_Mask1)) << can.VCU_DATA_HORN_POWER_SUPPLY_MASK0) | ((messages.Speaker_Power_Supply & ( can.SIGNLE_READ_Mask1)) << can.VCU_DATA_SPEAKER_POWER_SUPPLY_MASK0) | ((messages.SOM_Power_Supply & ( can.SIGNLE_READ_Mask1)) << can.VCU_DATA_SOM_POWER_SUPPLY_MASK0) | ((messages.ESCL_Power_Supply & ( can.SIGNLE_READ_Mask1)) << can.VCU_DATA_ESCL_POWER_SUPPLY_MASK0) | ((messages.ESCL_Commands & (can.SIGNLE_READ_Mask2)) << can.VCU_DATA_ESCL_COMMANDS_MASK1));
 data[2] = (byte)(((messages.ESCL_Commands >> can.VCU_DATA_ESCL_COMMANDS_MASK0) & (can.SIGNLE_READ_Mask1)));
 data[3] = (byte)((messages.Charger_Info & ( can.SIGNLE_READ_Mask1)));
  return can.VCU_DATA_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_CELL_STATUS( CanConverter.BMS_CELL_STATUS_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_Balancing_Status_Cell_1=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_1_OFFSET);messages.BMS_Balancing_Status_Cell_2=(int)((((data[0] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_2_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_2_OFFSET);messages.BMS_Balancing_Status_Cell_3=(int)((((data[0] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_3_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_3_OFFSET);messages.BMS_Balancing_Status_Cell_4=(int)((((data[0] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_4_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_4_OFFSET);messages.BMS_Balancing_Status_Cell_5=(int)((((data[0] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_5_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_5_OFFSET);messages.BMS_Balancing_Status_Cell_6=(int)((((data[0] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_6_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_6_OFFSET);messages.BMS_Balancing_Status_Cell_7=(int)((((data[0] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_7_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_7_OFFSET);messages.BMS_Balancing_Status_Cell_8=(int)((((data[0] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_8_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_8_OFFSET);messages.BMS_Balancing_Status_Cell_9=(int)(((data[1] & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_9_OFFSET);messages.BMS_Balancing_Status_Cell_10=(int)((((data[1] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_10_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_10_OFFSET);messages.BMS_Balancing_Status_Cell_11=(int)((((data[1] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_11_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_11_OFFSET);messages.BMS_Balancing_Status_Cell_12=(int)((((data[1] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_12_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_12_OFFSET);messages.BMS_Balancing_Status_Cell_13=(int)((((data[1] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_13_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_13_OFFSET);messages.BMS_Balancing_Status_Cell_14=(int)((((data[1] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_14_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_14_OFFSET);messages.BMS_Balancing_Status_Cell_15=(int)((((data[1] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_15_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_15_OFFSET);messages.BMS_Balancing_Status_Cell_16=(int)((((data[1] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_16_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_16_OFFSET);messages.BMS_Balancing_Status_Cell_17=(int)(((data[2] & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_17_OFFSET);messages.BMS_Balancing_Status_Cell_18=(int)((((data[2] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_18_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_18_OFFSET);messages.BMS_Balancing_Status_Cell_20=(int)((((data[2] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_20_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_20_OFFSET);messages.BMS_Balancing_Status_Cell_21=(int)((((data[2] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_21_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_21_OFFSET);messages.BMS_Balancing_Status_Cell_22=(int)((((data[2] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_22_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_22_OFFSET);messages.BMS_Balancing_Status_Cell_23=(int)((((data[2] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_23_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_23_OFFSET);messages.BMS_Balancing_Status_Cell_24=(int)((((data[2] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_24_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_24_OFFSET);messages.BMS_Balancing_Status_Cell_25=(int)(((data[3] & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_25_OFFSET);messages.BMS_Balancing_Status_Cell_26=(int)((((data[3] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_26_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_26_OFFSET);messages.BMS_Balancing_Status_Cell_27=(int)((((data[3] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_27_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_27_OFFSET);messages.BMS_Balancing_Status_Cell_28=(int)((((data[3] >> can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_28_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_28_OFFSET);messages.BMS_Cell_Min_Voltage=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_STATUS_BMS_CELL_MIN_VOLTAGE_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_STATUS_CANID_BMS_CELL_MIN_VOLTAGE_OFFSET);messages.BMS_Cell_Max_Voltage=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_STATUS_BMS_CELL_MAX_VOLTAGE_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_STATUS_CANID_BMS_CELL_MAX_VOLTAGE_OFFSET);
  return can.BMS_CELL_STATUS_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_CELL_STATUS( CanConverter.BMS_CELL_STATUS_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_Balancing_Status_Cell_1=(int) (messages.BMS_Balancing_Status_Cell_1 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_1_OFFSET);
messages.BMS_Balancing_Status_Cell_2=(int) (messages.BMS_Balancing_Status_Cell_2 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_2_OFFSET);
messages.BMS_Balancing_Status_Cell_3=(int) (messages.BMS_Balancing_Status_Cell_3 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_3_OFFSET);
messages.BMS_Balancing_Status_Cell_4=(int) (messages.BMS_Balancing_Status_Cell_4 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_4_OFFSET);
messages.BMS_Balancing_Status_Cell_5=(int) (messages.BMS_Balancing_Status_Cell_5 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_5_OFFSET);
messages.BMS_Balancing_Status_Cell_6=(int) (messages.BMS_Balancing_Status_Cell_6 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_6_OFFSET);
messages.BMS_Balancing_Status_Cell_7=(int) (messages.BMS_Balancing_Status_Cell_7 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_7_OFFSET);
messages.BMS_Balancing_Status_Cell_8=(int) (messages.BMS_Balancing_Status_Cell_8 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_8_OFFSET);
messages.BMS_Balancing_Status_Cell_9=(int) (messages.BMS_Balancing_Status_Cell_9 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_9_OFFSET);
messages.BMS_Balancing_Status_Cell_10=(int) (messages.BMS_Balancing_Status_Cell_10 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_10_OFFSET);
messages.BMS_Balancing_Status_Cell_11=(int) (messages.BMS_Balancing_Status_Cell_11 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_11_OFFSET);
messages.BMS_Balancing_Status_Cell_12=(int) (messages.BMS_Balancing_Status_Cell_12 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_12_OFFSET);
messages.BMS_Balancing_Status_Cell_13=(int) (messages.BMS_Balancing_Status_Cell_13 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_13_OFFSET);
messages.BMS_Balancing_Status_Cell_14=(int) (messages.BMS_Balancing_Status_Cell_14 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_14_OFFSET);
messages.BMS_Balancing_Status_Cell_15=(int) (messages.BMS_Balancing_Status_Cell_15 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_15_OFFSET);
messages.BMS_Balancing_Status_Cell_16=(int) (messages.BMS_Balancing_Status_Cell_16 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_16_OFFSET);
messages.BMS_Balancing_Status_Cell_17=(int) (messages.BMS_Balancing_Status_Cell_17 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_17_OFFSET);
messages.BMS_Balancing_Status_Cell_18=(int) (messages.BMS_Balancing_Status_Cell_18 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_18_OFFSET);
messages.BMS_Balancing_Status_Cell_20=(int) (messages.BMS_Balancing_Status_Cell_20 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_20_OFFSET);
messages.BMS_Balancing_Status_Cell_21=(int) (messages.BMS_Balancing_Status_Cell_21 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_21_OFFSET);
messages.BMS_Balancing_Status_Cell_22=(int) (messages.BMS_Balancing_Status_Cell_22 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_22_OFFSET);
messages.BMS_Balancing_Status_Cell_23=(int) (messages.BMS_Balancing_Status_Cell_23 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_23_OFFSET);
messages.BMS_Balancing_Status_Cell_24=(int) (messages.BMS_Balancing_Status_Cell_24 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_24_OFFSET);
messages.BMS_Balancing_Status_Cell_25=(int) (messages.BMS_Balancing_Status_Cell_25 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_25_OFFSET);
messages.BMS_Balancing_Status_Cell_26=(int) (messages.BMS_Balancing_Status_Cell_26 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_26_OFFSET);
messages.BMS_Balancing_Status_Cell_27=(int) (messages.BMS_Balancing_Status_Cell_27 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_27_OFFSET);
messages.BMS_Balancing_Status_Cell_28=(int) (messages.BMS_Balancing_Status_Cell_28 - can.BMS_CELL_STATUS_CANID_BMS_BALANCING_STATUS_CELL_28_OFFSET);
messages.BMS_Cell_Min_Voltage=(int) (messages.BMS_Cell_Min_Voltage - can.BMS_CELL_STATUS_CANID_BMS_CELL_MIN_VOLTAGE_OFFSET);
messages.BMS_Cell_Max_Voltage=(int) (messages.BMS_Cell_Max_Voltage - can.BMS_CELL_STATUS_CANID_BMS_CELL_MAX_VOLTAGE_OFFSET);
 data[0] = (byte)((messages.BMS_Balancing_Status_Cell_1 & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_Balancing_Status_Cell_2 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_2_MASK0) | ((messages.BMS_Balancing_Status_Cell_3 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_3_MASK0) | ((messages.BMS_Balancing_Status_Cell_4 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_4_MASK0) | ((messages.BMS_Balancing_Status_Cell_5 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_5_MASK0) | ((messages.BMS_Balancing_Status_Cell_6 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_6_MASK0) | ((messages.BMS_Balancing_Status_Cell_7 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_7_MASK0) | ((messages.BMS_Balancing_Status_Cell_8 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_8_MASK0));
 data[1] = (byte)((messages.BMS_Balancing_Status_Cell_9 & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_Balancing_Status_Cell_10 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_10_MASK0) | ((messages.BMS_Balancing_Status_Cell_11 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_11_MASK0) | ((messages.BMS_Balancing_Status_Cell_12 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_12_MASK0) | ((messages.BMS_Balancing_Status_Cell_13 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_13_MASK0) | ((messages.BMS_Balancing_Status_Cell_14 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_14_MASK0) | ((messages.BMS_Balancing_Status_Cell_15 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_15_MASK0) | ((messages.BMS_Balancing_Status_Cell_16 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_16_MASK0));
 data[2] = (byte)((messages.BMS_Balancing_Status_Cell_17 & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_Balancing_Status_Cell_18 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_18_MASK0) | ((messages.BMS_Balancing_Status_Cell_20 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_20_MASK0) | ((messages.BMS_Balancing_Status_Cell_21 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_21_MASK0) | ((messages.BMS_Balancing_Status_Cell_22 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_22_MASK0) | ((messages.BMS_Balancing_Status_Cell_23 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_23_MASK0) | ((messages.BMS_Balancing_Status_Cell_24 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_24_MASK0));
 data[3] = (byte)((messages.BMS_Balancing_Status_Cell_25 & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_Balancing_Status_Cell_26 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_26_MASK0) | ((messages.BMS_Balancing_Status_Cell_27 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_27_MASK0) | ((messages.BMS_Balancing_Status_Cell_28 & ( can.SIGNLE_READ_Mask1)) << can.BMS_CELL_STATUS_BMS_BALANCING_STATUS_CELL_28_MASK0));
 data[4] = (byte)((messages.BMS_Cell_Min_Voltage & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.BMS_Cell_Min_Voltage >> can.BMS_CELL_STATUS_BMS_CELL_MIN_VOLTAGE_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.BMS_Cell_Max_Voltage & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.BMS_Cell_Max_Voltage >> can.BMS_CELL_STATUS_BMS_CELL_MAX_VOLTAGE_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_CELL_STATUS_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Charger_Parameter_1( CanConverter.Charger_Parameter_1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Charger_IP_AC_Volt=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.CHARGER_PARAMETER_1_CHARGER_IP_AC_VOLT_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.CHARGER_PARAMETER_1_CANID_CHARGER_IP_AC_VOLT_OFFSET);messages.Charger_IP_AC_Current=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.CHARGER_PARAMETER_1_CHARGER_IP_AC_CURRENT_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.CHARGER_PARAMETER_1_CANID_CHARGER_IP_AC_CURRENT_OFFSET);messages.Charger_OP_DC_Volt=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.CHARGER_PARAMETER_1_CHARGER_OP_DC_VOLT_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.CHARGER_PARAMETER_1_CANID_CHARGER_OP_DC_VOLT_OFFSET);messages.Charger_OP_DC_Current=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.CHARGER_PARAMETER_1_CHARGER_OP_DC_CURRENT_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.CHARGER_PARAMETER_1_CANID_CHARGER_OP_DC_CURRENT_OFFSET);
  return can.CHARGER_PARAMETER_1_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Charger_Parameter_1( CanConverter.Charger_Parameter_1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Charger_IP_AC_Volt=(int) (messages.Charger_IP_AC_Volt - can.CHARGER_PARAMETER_1_CANID_CHARGER_IP_AC_VOLT_OFFSET);
messages.Charger_IP_AC_Current=(int) (messages.Charger_IP_AC_Current - can.CHARGER_PARAMETER_1_CANID_CHARGER_IP_AC_CURRENT_OFFSET);
messages.Charger_OP_DC_Volt=(int) (messages.Charger_OP_DC_Volt - can.CHARGER_PARAMETER_1_CANID_CHARGER_OP_DC_VOLT_OFFSET);
messages.Charger_OP_DC_Current=(int) (messages.Charger_OP_DC_Current - can.CHARGER_PARAMETER_1_CANID_CHARGER_OP_DC_CURRENT_OFFSET);
 data[0] = (byte)((messages.Charger_IP_AC_Volt & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Charger_IP_AC_Volt >> can.CHARGER_PARAMETER_1_CHARGER_IP_AC_VOLT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Charger_IP_AC_Current & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Charger_IP_AC_Current >> can.CHARGER_PARAMETER_1_CHARGER_IP_AC_CURRENT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Charger_OP_DC_Volt & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Charger_OP_DC_Volt >> can.CHARGER_PARAMETER_1_CHARGER_OP_DC_VOLT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Charger_OP_DC_Current & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Charger_OP_DC_Current >> can.CHARGER_PARAMETER_1_CHARGER_OP_DC_CURRENT_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.CHARGER_PARAMETER_1_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_OBC_HP_DCDC_Parameter_2( CanConverter.OBC_HP_DCDC_Parameter_2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_temp=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.OBC_HP_DCDC_PARAMETER_2_OBC_TEMP_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.OBC_HP_DCDC_PARAMETER_2_CANID_OBC_TEMP_OFFSET);messages.HP_DCDC_Temp=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.OBC_HP_DCDC_PARAMETER_2_HP_DCDC_TEMP_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.OBC_HP_DCDC_PARAMETER_2_CANID_HP_DCDC_TEMP_OFFSET);messages.OBC_OP_Enable=(int)(((data[4] & (can.SIGNLE_READ_Mask1))) + can.OBC_HP_DCDC_PARAMETER_2_CANID_OBC_OP_ENABLE_OFFSET);messages.OBC_Coolant_Fan_Status=(int)((((data[4] >> can.OBC_HP_DCDC_PARAMETER_2_OBC_COOLANT_FAN_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.OBC_HP_DCDC_PARAMETER_2_CANID_OBC_COOLANT_FAN_STATUS_OFFSET);messages.Control_Proximity_status=(int)((((data[4] >> can.OBC_HP_DCDC_PARAMETER_2_CONTROL_PROXIMITY_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.OBC_HP_DCDC_PARAMETER_2_CANID_CONTROL_PROXIMITY_STATUS_OFFSET);messages.DCDC_Conv_OP_Enable=(int)((((data[4] >> can.OBC_HP_DCDC_PARAMETER_2_DCDC_CONV_OP_ENABLE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.OBC_HP_DCDC_PARAMETER_2_CANID_DCDC_CONV_OP_ENABLE_OFFSET);
  return can.OBC_HP_DCDC_PARAMETER_2_ID;
}

/*------------------------------------------------------------*/

public long Serialize_OBC_HP_DCDC_Parameter_2( CanConverter.OBC_HP_DCDC_Parameter_2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_temp=(int) (messages.OBC_temp - can.OBC_HP_DCDC_PARAMETER_2_CANID_OBC_TEMP_OFFSET);
messages.HP_DCDC_Temp=(int) (messages.HP_DCDC_Temp - can.OBC_HP_DCDC_PARAMETER_2_CANID_HP_DCDC_TEMP_OFFSET);
messages.OBC_OP_Enable=(int) (messages.OBC_OP_Enable - can.OBC_HP_DCDC_PARAMETER_2_CANID_OBC_OP_ENABLE_OFFSET);
messages.OBC_Coolant_Fan_Status=(int) (messages.OBC_Coolant_Fan_Status - can.OBC_HP_DCDC_PARAMETER_2_CANID_OBC_COOLANT_FAN_STATUS_OFFSET);
messages.Control_Proximity_status=(int) (messages.Control_Proximity_status - can.OBC_HP_DCDC_PARAMETER_2_CANID_CONTROL_PROXIMITY_STATUS_OFFSET);
messages.DCDC_Conv_OP_Enable=(int) (messages.DCDC_Conv_OP_Enable - can.OBC_HP_DCDC_PARAMETER_2_CANID_DCDC_CONV_OP_ENABLE_OFFSET);
 data[0] = (byte)((messages.OBC_temp & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.OBC_temp >> can.OBC_HP_DCDC_PARAMETER_2_OBC_TEMP_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.HP_DCDC_Temp & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.HP_DCDC_Temp >> can.OBC_HP_DCDC_PARAMETER_2_HP_DCDC_TEMP_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.OBC_OP_Enable & ( can.SIGNLE_READ_Mask1)) | ((messages.OBC_Coolant_Fan_Status & ( can.SIGNLE_READ_Mask1)) << can.OBC_HP_DCDC_PARAMETER_2_OBC_COOLANT_FAN_STATUS_MASK0) | ((messages.Control_Proximity_status & ( can.SIGNLE_READ_Mask1)) << can.OBC_HP_DCDC_PARAMETER_2_CONTROL_PROXIMITY_STATUS_MASK0) | ((messages.DCDC_Conv_OP_Enable & ( can.SIGNLE_READ_Mask1)) << can.OBC_HP_DCDC_PARAMETER_2_DCDC_CONV_OP_ENABLE_MASK0));
  return can.OBC_HP_DCDC_PARAMETER_2_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_CELL_VOLTAGE_1( CanConverter.BMS_CELL_VOLTAGE_1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_1=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_1_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_1_OFFSET);messages.Cell_Voltage_Vcell_2=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_2_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_2_OFFSET);messages.Cell_Voltage_Vcell_3=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_3_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_3_OFFSET);messages.Cell_Voltage_Vcell_4=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_4_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_4_OFFSET);
  return can.BMS_CELL_VOLTAGE_1_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_CELL_VOLTAGE_1( CanConverter.BMS_CELL_VOLTAGE_1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_1=(int) (messages.Cell_Voltage_Vcell_1 - can.BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_1_OFFSET);
messages.Cell_Voltage_Vcell_2=(int) (messages.Cell_Voltage_Vcell_2 - can.BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_2_OFFSET);
messages.Cell_Voltage_Vcell_3=(int) (messages.Cell_Voltage_Vcell_3 - can.BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_3_OFFSET);
messages.Cell_Voltage_Vcell_4=(int) (messages.Cell_Voltage_Vcell_4 - can.BMS_CELL_VOLTAGE_1_CANID_CELL_VOLTAGE_VCELL_4_OFFSET);
 data[0] = (byte)((messages.Cell_Voltage_Vcell_1 & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Cell_Voltage_Vcell_1 >> can.BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_1_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Cell_Voltage_Vcell_2 & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Cell_Voltage_Vcell_2 >> can.BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_2_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Cell_Voltage_Vcell_3 & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Cell_Voltage_Vcell_3 >> can.BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_3_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Cell_Voltage_Vcell_4 & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Cell_Voltage_Vcell_4 >> can.BMS_CELL_VOLTAGE_1_CELL_VOLTAGE_VCELL_4_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_CELL_VOLTAGE_1_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_CELL_VOLTAGE_2( CanConverter.BMS_CELL_VOLTAGE_2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_5=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_5_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_5_OFFSET);messages.Cell_Voltage_Vcell_6=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_6_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_6_OFFSET);messages.Cell_Voltage_Vcell_7=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_7_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_7_OFFSET);messages.Cell_Voltage_Vcell_8=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_8_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_8_OFFSET);
  return can.BMS_CELL_VOLTAGE_2_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_CELL_VOLTAGE_2( CanConverter.BMS_CELL_VOLTAGE_2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_5=(int) (messages.Cell_Voltage_Vcell_5 - can.BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_5_OFFSET);
messages.Cell_Voltage_Vcell_6=(int) (messages.Cell_Voltage_Vcell_6 - can.BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_6_OFFSET);
messages.Cell_Voltage_Vcell_7=(int) (messages.Cell_Voltage_Vcell_7 - can.BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_7_OFFSET);
messages.Cell_Voltage_Vcell_8=(int) (messages.Cell_Voltage_Vcell_8 - can.BMS_CELL_VOLTAGE_2_CANID_CELL_VOLTAGE_VCELL_8_OFFSET);
 data[0] = (byte)((messages.Cell_Voltage_Vcell_5 & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Cell_Voltage_Vcell_5 >> can.BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_5_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Cell_Voltage_Vcell_6 & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Cell_Voltage_Vcell_6 >> can.BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_6_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Cell_Voltage_Vcell_7 & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Cell_Voltage_Vcell_7 >> can.BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_7_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Cell_Voltage_Vcell_8 & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Cell_Voltage_Vcell_8 >> can.BMS_CELL_VOLTAGE_2_CELL_VOLTAGE_VCELL_8_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_CELL_VOLTAGE_2_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_CELL_VOLTAGE_3( CanConverter.BMS_CELL_VOLTAGE_3_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_9=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_9_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_9_OFFSET);messages.Cell_Voltage_Vcell_10=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_10_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_10_OFFSET);messages.Cell_Voltage_Vcell_11=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_11_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_11_OFFSET);messages.Cell_Voltage_Vcell_12=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_12_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_12_OFFSET);
  return can.BMS_CELL_VOLTAGE_3_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_CELL_VOLTAGE_3( CanConverter.BMS_CELL_VOLTAGE_3_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_9=(int) (messages.Cell_Voltage_Vcell_9 - can.BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_9_OFFSET);
messages.Cell_Voltage_Vcell_10=(int) (messages.Cell_Voltage_Vcell_10 - can.BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_10_OFFSET);
messages.Cell_Voltage_Vcell_11=(int) (messages.Cell_Voltage_Vcell_11 - can.BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_11_OFFSET);
messages.Cell_Voltage_Vcell_12=(int) (messages.Cell_Voltage_Vcell_12 - can.BMS_CELL_VOLTAGE_3_CANID_CELL_VOLTAGE_VCELL_12_OFFSET);
 data[0] = (byte)((messages.Cell_Voltage_Vcell_9 & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Cell_Voltage_Vcell_9 >> can.BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_9_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Cell_Voltage_Vcell_10 & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Cell_Voltage_Vcell_10 >> can.BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_10_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Cell_Voltage_Vcell_11 & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Cell_Voltage_Vcell_11 >> can.BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_11_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Cell_Voltage_Vcell_12 & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Cell_Voltage_Vcell_12 >> can.BMS_CELL_VOLTAGE_3_CELL_VOLTAGE_VCELL_12_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_CELL_VOLTAGE_3_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_CELL_VOLTAGE_4( CanConverter.BMS_CELL_VOLTAGE_4_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_13=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_13_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_13_OFFSET);messages.Cell_Voltage_Vcell_14=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_14_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_14_OFFSET);messages.Cell_Voltage_Vcell_15=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_15_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_15_OFFSET);messages.Cell_Voltage_Vcell_16=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_16_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_16_OFFSET);
  return can.BMS_CELL_VOLTAGE_4_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_CELL_VOLTAGE_4( CanConverter.BMS_CELL_VOLTAGE_4_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_13=(int) (messages.Cell_Voltage_Vcell_13 - can.BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_13_OFFSET);
messages.Cell_Voltage_Vcell_14=(int) (messages.Cell_Voltage_Vcell_14 - can.BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_14_OFFSET);
messages.Cell_Voltage_Vcell_15=(int) (messages.Cell_Voltage_Vcell_15 - can.BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_15_OFFSET);
messages.Cell_Voltage_Vcell_16=(int) (messages.Cell_Voltage_Vcell_16 - can.BMS_CELL_VOLTAGE_4_CANID_CELL_VOLTAGE_VCELL_16_OFFSET);
 data[0] = (byte)((messages.Cell_Voltage_Vcell_13 & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Cell_Voltage_Vcell_13 >> can.BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_13_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Cell_Voltage_Vcell_14 & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Cell_Voltage_Vcell_14 >> can.BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_14_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Cell_Voltage_Vcell_15 & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Cell_Voltage_Vcell_15 >> can.BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_15_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Cell_Voltage_Vcell_16 & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Cell_Voltage_Vcell_16 >> can.BMS_CELL_VOLTAGE_4_CELL_VOLTAGE_VCELL_16_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_CELL_VOLTAGE_4_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_CELL_VOLTAGE_5( CanConverter.BMS_CELL_VOLTAGE_5_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_17=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_17_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_17_OFFSET);messages.Cell_Voltage_Vcell_18=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_18_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_18_OFFSET);messages.Cell_Voltage_Vcell_19=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_19_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_19_OFFSET);messages.Cell_Voltage_Vcell_20=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_20_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_20_OFFSET);
  return can.BMS_CELL_VOLTAGE_5_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_CELL_VOLTAGE_5( CanConverter.BMS_CELL_VOLTAGE_5_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_17=(int) (messages.Cell_Voltage_Vcell_17 - can.BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_17_OFFSET);
messages.Cell_Voltage_Vcell_18=(int) (messages.Cell_Voltage_Vcell_18 - can.BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_18_OFFSET);
messages.Cell_Voltage_Vcell_19=(int) (messages.Cell_Voltage_Vcell_19 - can.BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_19_OFFSET);
messages.Cell_Voltage_Vcell_20=(int) (messages.Cell_Voltage_Vcell_20 - can.BMS_CELL_VOLTAGE_5_CANID_CELL_VOLTAGE_VCELL_20_OFFSET);
 data[0] = (byte)((messages.Cell_Voltage_Vcell_17 & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Cell_Voltage_Vcell_17 >> can.BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_17_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Cell_Voltage_Vcell_18 & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Cell_Voltage_Vcell_18 >> can.BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_18_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Cell_Voltage_Vcell_19 & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Cell_Voltage_Vcell_19 >> can.BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_19_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Cell_Voltage_Vcell_20 & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Cell_Voltage_Vcell_20 >> can.BMS_CELL_VOLTAGE_5_CELL_VOLTAGE_VCELL_20_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_CELL_VOLTAGE_5_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_CELL_VOLTAGE_6( CanConverter.BMS_CELL_VOLTAGE_6_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_21=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_21_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_21_OFFSET);messages.Cell_Voltage_Vcell_22=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_22_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_22_OFFSET);messages.Cell_Voltage_Vcell_23=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_23_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_23_OFFSET);messages.Cell_Voltage_Vcell_24=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_24_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_24_OFFSET);
  return can.BMS_CELL_VOLTAGE_6_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_CELL_VOLTAGE_6( CanConverter.BMS_CELL_VOLTAGE_6_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_21=(int) (messages.Cell_Voltage_Vcell_21 - can.BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_21_OFFSET);
messages.Cell_Voltage_Vcell_22=(int) (messages.Cell_Voltage_Vcell_22 - can.BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_22_OFFSET);
messages.Cell_Voltage_Vcell_23=(int) (messages.Cell_Voltage_Vcell_23 - can.BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_23_OFFSET);
messages.Cell_Voltage_Vcell_24=(int) (messages.Cell_Voltage_Vcell_24 - can.BMS_CELL_VOLTAGE_6_CANID_CELL_VOLTAGE_VCELL_24_OFFSET);
 data[0] = (byte)((messages.Cell_Voltage_Vcell_21 & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Cell_Voltage_Vcell_21 >> can.BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_21_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Cell_Voltage_Vcell_22 & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Cell_Voltage_Vcell_22 >> can.BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_22_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Cell_Voltage_Vcell_23 & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Cell_Voltage_Vcell_23 >> can.BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_23_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Cell_Voltage_Vcell_24 & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Cell_Voltage_Vcell_24 >> can.BMS_CELL_VOLTAGE_6_CELL_VOLTAGE_VCELL_24_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_CELL_VOLTAGE_6_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_CELL_VOLTAGE_7( CanConverter.BMS_CELL_VOLTAGE_7_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_25=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_25_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_25_OFFSET);messages.Cell_Voltage_Vcell_26=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_26_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_26_OFFSET);messages.Cell_Voltage_Vcell_27=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_27_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_27_OFFSET);messages.Cell_Voltage_Vcell_28=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_28_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_28_OFFSET);
  return can.BMS_CELL_VOLTAGE_7_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_CELL_VOLTAGE_7( CanConverter.BMS_CELL_VOLTAGE_7_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Cell_Voltage_Vcell_25=(int) (messages.Cell_Voltage_Vcell_25 - can.BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_25_OFFSET);
messages.Cell_Voltage_Vcell_26=(int) (messages.Cell_Voltage_Vcell_26 - can.BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_26_OFFSET);
messages.Cell_Voltage_Vcell_27=(int) (messages.Cell_Voltage_Vcell_27 - can.BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_27_OFFSET);
messages.Cell_Voltage_Vcell_28=(int) (messages.Cell_Voltage_Vcell_28 - can.BMS_CELL_VOLTAGE_7_CANID_CELL_VOLTAGE_VCELL_28_OFFSET);
 data[0] = (byte)((messages.Cell_Voltage_Vcell_25 & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Cell_Voltage_Vcell_25 >> can.BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_25_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Cell_Voltage_Vcell_26 & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Cell_Voltage_Vcell_26 >> can.BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_26_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Cell_Voltage_Vcell_27 & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Cell_Voltage_Vcell_27 >> can.BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_27_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Cell_Voltage_Vcell_28 & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Cell_Voltage_Vcell_28 >> can.BMS_CELL_VOLTAGE_7_CELL_VOLTAGE_VCELL_28_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_CELL_VOLTAGE_7_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Charger_status_Info( CanConverter.Charger_status_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Charger_Status_Signal=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.CHARGER_STATUS_INFO_CANID_CHARGER_STATUS_SIGNAL_OFFSET);messages.Charger_Mode=(int)((((data[0] >> can.CHARGER_STATUS_INFO_CHARGER_MODE_MASK0) & (can.SIGNLE_READ_Mask4))) + can.CHARGER_STATUS_INFO_CANID_CHARGER_MODE_OFFSET);
  return can.CHARGER_STATUS_INFO_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Charger_status_Info( CanConverter.Charger_status_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Charger_Status_Signal=(int) (messages.Charger_Status_Signal - can.CHARGER_STATUS_INFO_CANID_CHARGER_STATUS_SIGNAL_OFFSET);
messages.Charger_Mode=(int) (messages.Charger_Mode - can.CHARGER_STATUS_INFO_CANID_CHARGER_MODE_OFFSET);
 data[0] = (byte)((messages.Charger_Status_Signal & ( can.SIGNLE_READ_Mask1)) | ((messages.Charger_Mode & ( can.SIGNLE_READ_Mask4)) << can.CHARGER_STATUS_INFO_CHARGER_MODE_MASK0));
  return can.CHARGER_STATUS_INFO_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_Data3( CanConverter.MCU_Data3_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_DC_current=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA3_MCU_DC_CURRENT_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA3_CANID_MCU_DC_CURRENT_OFFSET);messages.Motor_Torque=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA3_MOTOR_TORQUE_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA3_CANID_MOTOR_TORQUE_OFFSET);messages.Distance_Cuurent_Trip=(int)(((data[4] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA3_CANID_DISTANCE_CUURENT_TRIP_OFFSET);
  return can.MCU_DATA3_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_Data3( CanConverter.MCU_Data3_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_DC_current=(int) (messages.MCU_DC_current - can.MCU_DATA3_CANID_MCU_DC_CURRENT_OFFSET);
messages.Motor_Torque=(int) (messages.Motor_Torque - can.MCU_DATA3_CANID_MOTOR_TORQUE_OFFSET);
messages.Distance_Cuurent_Trip=(int) (messages.Distance_Cuurent_Trip - can.MCU_DATA3_CANID_DISTANCE_CUURENT_TRIP_OFFSET);
 data[0] = (byte)((messages.MCU_DC_current & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.MCU_DC_current >> can.MCU_DATA3_MCU_DC_CURRENT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Motor_Torque & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Motor_Torque >> can.MCU_DATA3_MOTOR_TORQUE_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Distance_Cuurent_Trip & ( can.SIGNLE_READ_Mask8)));
  return can.MCU_DATA3_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_Data4( CanConverter.MCU_Data4_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Motor_BEMF_Frequency=(int)(((( data[1] & (can.SIGNLE_READ_Mask2)) << can.MCU_DATA4_MOTOR_BEMF_FREQUENCY_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA4_CANID_MOTOR_BEMF_FREQUENCY_OFFSET);messages.Position_Counter=(int)(((( data[2] & (can.SIGNLE_READ_Mask5)) << can.MCU_DATA4_POSITION_COUNTER_MASK0) | (( data[1] >> can.MCU_DATA4_POSITION_COUNTER_MASK1) & (can.SIGNLE_READ_Mask1))) + can.MCU_DATA4_CANID_POSITION_COUNTER_OFFSET);messages.Rotor_Angle=(int)(((( data[3] & (can.SIGNLE_READ_Mask6)) << can.MCU_DATA4_ROTOR_ANGLE_MASK0) | (( data[2] >> can.MCU_DATA4_ROTOR_ANGLE_MASK1) & (can.SIGNLE_READ_Mask1))) + can.MCU_DATA4_CANID_ROTOR_ANGLE_OFFSET);messages.Vehicle_Dir_flag=(int)((((data[7] >> can.MCU_DATA4_VEHICLE_DIR_FLAG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_DATA4_CANID_VEHICLE_DIR_FLAG_OFFSET);
  return can.MCU_DATA4_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_Data4( CanConverter.MCU_Data4_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Motor_BEMF_Frequency=(int) (messages.Motor_BEMF_Frequency - can.MCU_DATA4_CANID_MOTOR_BEMF_FREQUENCY_OFFSET);
messages.Position_Counter=(int) (messages.Position_Counter - can.MCU_DATA4_CANID_POSITION_COUNTER_OFFSET);
messages.Rotor_Angle=(int) (messages.Rotor_Angle - can.MCU_DATA4_CANID_ROTOR_ANGLE_OFFSET);
messages.Vehicle_Dir_flag=(int) (messages.Vehicle_Dir_flag - can.MCU_DATA4_CANID_VEHICLE_DIR_FLAG_OFFSET);
 data[0] = (byte)((messages.Motor_BEMF_Frequency & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Motor_BEMF_Frequency >> can.MCU_DATA4_MOTOR_BEMF_FREQUENCY_MASK0) & (can.SIGNLE_READ_Mask2)) | ((messages.Position_Counter & (can.SIGNLE_READ_Mask6)) << can.MCU_DATA4_POSITION_COUNTER_MASK1));
 data[2] = (byte)(((messages.Position_Counter >> can.MCU_DATA4_POSITION_COUNTER_MASK0) & (can.SIGNLE_READ_Mask5)) | ((messages.Rotor_Angle & (can.SIGNLE_READ_Mask3)) << can.MCU_DATA4_ROTOR_ANGLE_MASK1));
 data[3] = (byte)(((messages.Rotor_Angle >> can.MCU_DATA4_ROTOR_ANGLE_MASK0) & (can.SIGNLE_READ_Mask6)));
 data[7] = (byte)(((messages.Vehicle_Dir_flag & ( can.SIGNLE_READ_Mask1)) << can.MCU_DATA4_VEHICLE_DIR_FLAG_MASK0));
  return can.MCU_DATA4_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_Data5( CanConverter.MCU_Data5_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Live_Position_Counter=(int)(((( data[1] & (can.SIGNLE_READ_Mask4)) << can.MCU_DATA5_LIVE_POSITION_COUNTER_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA5_CANID_LIVE_POSITION_COUNTER_OFFSET);messages.Live_PWM_Rotor_Angle=(int)(((( data[2] & (can.SIGNLE_READ_Mask5)) << can.MCU_DATA5_LIVE_PWM_ROTOR_ANGLE_MASK0) | (( data[1] >> can.MCU_DATA5_LIVE_PWM_ROTOR_ANGLE_MASK1) & (can.SIGNLE_READ_Mask1))) + can.MCU_DATA5_CANID_LIVE_PWM_ROTOR_ANGLE_OFFSET);messages.Live_Z_Pulse_Counter=(int)(((( data[5] & (can.SIGNLE_READ_Mask1)) << can.MCU_DATA5_LIVE_Z_PULSE_COUNTER_MASK0) | (( data[4] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA5_LIVE_Z_PULSE_COUNTER_MASK1) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA5_LIVE_Z_PULSE_COUNTER_MASK2) | (( data[2] >> can.MCU_DATA5_LIVE_Z_PULSE_COUNTER_MASK3) & (can.SIGNLE_READ_Mask3))) + can.MCU_DATA5_CANID_LIVE_Z_PULSE_COUNTER_OFFSET);messages.Regen_Torque=(int)(((( data[7] & (can.SIGNLE_READ_Mask1)) << can.MCU_DATA5_REGEN_TORQUE_MASK0) | (( data[6] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA5_REGEN_TORQUE_MASK1) | (( data[5] >> can.MCU_DATA5_REGEN_TORQUE_MASK2) & (can.SIGNLE_READ_Mask2))) + can.MCU_DATA5_CANID_REGEN_TORQUE_OFFSET);
  return can.MCU_DATA5_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_Data5( CanConverter.MCU_Data5_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Live_Position_Counter=(int) (messages.Live_Position_Counter - can.MCU_DATA5_CANID_LIVE_POSITION_COUNTER_OFFSET);
messages.Live_PWM_Rotor_Angle=(int) (messages.Live_PWM_Rotor_Angle - can.MCU_DATA5_CANID_LIVE_PWM_ROTOR_ANGLE_OFFSET);
messages.Live_Z_Pulse_Counter=(int) (messages.Live_Z_Pulse_Counter - can.MCU_DATA5_CANID_LIVE_Z_PULSE_COUNTER_OFFSET);
messages.Regen_Torque=(int) (messages.Regen_Torque - can.MCU_DATA5_CANID_REGEN_TORQUE_OFFSET);
 data[0] = (byte)((messages.Live_Position_Counter & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Live_Position_Counter >> can.MCU_DATA5_LIVE_POSITION_COUNTER_MASK0) & (can.SIGNLE_READ_Mask4)) | ((messages.Live_PWM_Rotor_Angle & (can.SIGNLE_READ_Mask4)) << can.MCU_DATA5_LIVE_PWM_ROTOR_ANGLE_MASK1));
 data[2] = (byte)(((messages.Live_PWM_Rotor_Angle >> can.MCU_DATA5_LIVE_PWM_ROTOR_ANGLE_MASK0) & (can.SIGNLE_READ_Mask5)) | ((messages.Live_Z_Pulse_Counter & (can.SIGNLE_READ_Mask3)) << can.MCU_DATA5_LIVE_Z_PULSE_COUNTER_MASK3));
 data[3] = (byte)(((messages.Live_Z_Pulse_Counter >> can.MCU_DATA5_LIVE_Z_PULSE_COUNTER_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.Live_Z_Pulse_Counter >> can.MCU_DATA5_LIVE_Z_PULSE_COUNTER_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Live_Z_Pulse_Counter >> can.MCU_DATA5_LIVE_Z_PULSE_COUNTER_MASK0) & (can.SIGNLE_READ_Mask1)) | ((messages.Regen_Torque & (can.SIGNLE_READ_Mask7)) << can.MCU_DATA5_REGEN_TORQUE_MASK2));
 data[6] = (byte)(((messages.Regen_Torque >> can.MCU_DATA5_REGEN_TORQUE_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Regen_Torque >> can.MCU_DATA5_REGEN_TORQUE_MASK0) & (can.SIGNLE_READ_Mask1)));
  return can.MCU_DATA5_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_Data6( CanConverter.MCU_Data6_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.R_Phase_Current_MCU=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA6_R_PHASE_CURRENT_MCU_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA6_CANID_R_PHASE_CURRENT_MCU_OFFSET);messages.Y_Phase_Current_MCU=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA6_Y_PHASE_CURRENT_MCU_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA6_CANID_Y_PHASE_CURRENT_MCU_OFFSET);messages.B_Phase_Current_MCU=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA6_B_PHASE_CURRENT_MCU_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA6_CANID_B_PHASE_CURRENT_MCU_OFFSET);
  return can.MCU_DATA6_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_Data6( CanConverter.MCU_Data6_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.R_Phase_Current_MCU=(int) (messages.R_Phase_Current_MCU - can.MCU_DATA6_CANID_R_PHASE_CURRENT_MCU_OFFSET);
messages.Y_Phase_Current_MCU=(int) (messages.Y_Phase_Current_MCU - can.MCU_DATA6_CANID_Y_PHASE_CURRENT_MCU_OFFSET);
messages.B_Phase_Current_MCU=(int) (messages.B_Phase_Current_MCU - can.MCU_DATA6_CANID_B_PHASE_CURRENT_MCU_OFFSET);
 data[0] = (byte)((messages.R_Phase_Current_MCU & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.R_Phase_Current_MCU >> can.MCU_DATA6_R_PHASE_CURRENT_MCU_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Y_Phase_Current_MCU & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Y_Phase_Current_MCU >> can.MCU_DATA6_Y_PHASE_CURRENT_MCU_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.B_Phase_Current_MCU & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.B_Phase_Current_MCU >> can.MCU_DATA6_B_PHASE_CURRENT_MCU_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.MCU_DATA6_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_Data1( CanConverter.MCU_Data1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Vehicle_Speed_kmph=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA1_VEHICLE_SPEED_KMPH_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA1_CANID_VEHICLE_SPEED_KMPH_OFFSET);messages.MCU_temp=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA1_MCU_TEMP_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA1_CANID_MCU_TEMP_OFFSET);messages.Motor_temp=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA1_MOTOR_TEMP_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA1_CANID_MOTOR_TEMP_OFFSET);messages.Motor_rpm=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.MCU_DATA1_MOTOR_RPM_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.MCU_DATA1_CANID_MOTOR_RPM_OFFSET);
  return can.MCU_DATA1_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_Data1( CanConverter.MCU_Data1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Vehicle_Speed_kmph=(int) (messages.Vehicle_Speed_kmph - can.MCU_DATA1_CANID_VEHICLE_SPEED_KMPH_OFFSET);
messages.MCU_temp=(int) (messages.MCU_temp - can.MCU_DATA1_CANID_MCU_TEMP_OFFSET);
messages.Motor_temp=(int) (messages.Motor_temp - can.MCU_DATA1_CANID_MOTOR_TEMP_OFFSET);
messages.Motor_rpm=(int) (messages.Motor_rpm - can.MCU_DATA1_CANID_MOTOR_RPM_OFFSET);
 data[0] = (byte)((messages.Vehicle_Speed_kmph & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Vehicle_Speed_kmph >> can.MCU_DATA1_VEHICLE_SPEED_KMPH_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.MCU_temp & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.MCU_temp >> can.MCU_DATA1_MCU_TEMP_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Motor_temp & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Motor_temp >> can.MCU_DATA1_MOTOR_TEMP_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Motor_rpm & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Motor_rpm >> can.MCU_DATA1_MOTOR_RPM_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.MCU_DATA1_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_Disconnect_ACK( CanConverter.MCU_Disconnect_ACK_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Disconnect_ACK=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.MCU_DISCONNECT_ACK_CANID_DISCONNECT_ACK_OFFSET);
  return can.MCU_DISCONNECT_ACK_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_Disconnect_ACK( CanConverter.MCU_Disconnect_ACK_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Disconnect_ACK=(int) (messages.Disconnect_ACK - can.MCU_DISCONNECT_ACK_CANID_DISCONNECT_ACK_OFFSET);
 data[0] = (byte)((messages.Disconnect_ACK & ( can.SIGNLE_READ_Mask1)));
  return can.MCU_DISCONNECT_ACK_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_Fault_Data( CanConverter.MCU_Fault_Data_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MotorOC_protect_U_ph=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_U_PH_OFFSET);messages.MotorOC_protect_V_ph=(int)((((data[0] >> can.MCU_FAULT_DATA_MOTOROC_PROTECT_V_PH_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_V_PH_OFFSET);messages.MotorOC_protect_W_ph=(int)((((data[0] >> can.MCU_FAULT_DATA_MOTOROC_PROTECT_W_PH_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_W_PH_OFFSET);messages.MotorOV_protect_U_ph=(int)((((data[0] >> can.MCU_FAULT_DATA_MOTOROV_PROTECT_U_PH_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_U_PH_OFFSET);messages.MotorOV_protect_V_ph=(int)((((data[0] >> can.MCU_FAULT_DATA_MOTOROV_PROTECT_V_PH_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_V_PH_OFFSET);messages.MotorOV_protect_W_ph=(int)((((data[0] >> can.MCU_FAULT_DATA_MOTOROV_PROTECT_W_PH_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_W_PH_OFFSET);messages.Encoder_Disconnection=(int)((((data[0] >> can.MCU_FAULT_DATA_ENCODER_DISCONNECTION_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_ENCODER_DISCONNECTION_OFFSET);messages.Encoder_Failure=(int)((((data[0] >> can.MCU_FAULT_DATA_ENCODER_FAILURE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_ENCODER_FAILURE_OFFSET);messages.DCbus_undervoltage=(int)(((data[1] & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_DCBUS_UNDERVOLTAGE_OFFSET);messages.DCbus_overvoltage=(int)((((data[1] >> can.MCU_FAULT_DATA_DCBUS_OVERVOLTAGE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_DCBUS_OVERVOLTAGE_OFFSET);messages.DCbus_overcurrent=(int)((((data[1] >> can.MCU_FAULT_DATA_DCBUS_OVERCURRENT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_DCBUS_OVERCURRENT_OFFSET);messages.DCbus_shortcircuit=(int)((((data[1] >> can.MCU_FAULT_DATA_DCBUS_SHORTCIRCUIT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_DCBUS_SHORTCIRCUIT_OFFSET);messages.DCbus_reversepolarity=(int)((((data[1] >> can.MCU_FAULT_DATA_DCBUS_REVERSEPOLARITY_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_DCBUS_REVERSEPOLARITY_OFFSET);messages.DCbus_HVIL_Fail=(int)((((data[1] >> can.MCU_FAULT_DATA_DCBUS_HVIL_FAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_DCBUS_HVIL_FAIL_OFFSET);messages.Prechrge_fail=(int)((((data[1] >> can.MCU_FAULT_DATA_PRECHRGE_FAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_PRECHRGE_FAIL_OFFSET);messages.Motor_regen_break_fault=(int)((((data[2] >> can.MCU_FAULT_DATA_MOTOR_REGEN_BREAK_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MOTOR_REGEN_BREAK_FAULT_OFFSET);messages.Reserved=(int)((((data[2] >> can.MCU_FAULT_DATA_RESERVED_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_RESERVED_OFFSET);messages.Dc_bus_capacitor_Overtemp=(int)((((data[2] >> can.MCU_FAULT_DATA_DC_BUS_CAPACITOR_OVERTEMP_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_DC_BUS_CAPACITOR_OVERTEMP_OFFSET);messages.LV_supplyOvervoltage=(int)((((data[2] >> can.MCU_FAULT_DATA_LV_SUPPLYOVERVOLTAGE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_LV_SUPPLYOVERVOLTAGE_OFFSET);messages.LV_supplyUndervoltage=(int)((((data[2] >> can.MCU_FAULT_DATA_LV_SUPPLYUNDERVOLTAGE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_LV_SUPPLYUNDERVOLTAGE_OFFSET);messages.LV_supplyOvercurrent=(int)((((data[2] >> can.MCU_FAULT_DATA_LV_SUPPLYOVERCURRENT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_LV_SUPPLYOVERCURRENT_OFFSET);messages.LV_supplyshortcircuit=(int)(((data[3] & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_LV_SUPPLYSHORTCIRCUIT_OFFSET);messages.Motorphasedisconnect_Uphase=(int)((((data[3] >> can.MCU_FAULT_DATA_MOTORPHASEDISCONNECT_UPHASE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_UPHASE_OFFSET);messages.Motorphasedisconnect_Vphase=(int)((((data[3] >> can.MCU_FAULT_DATA_MOTORPHASEDISCONNECT_VPHASE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_VPHASE_OFFSET);messages.Motorphasedisconnect_Wphase=(int)((((data[3] >> can.MCU_FAULT_DATA_MOTORPHASEDISCONNECT_WPHASE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_WPHASE_OFFSET);messages.Motorwinding_temp_sensor_fail=(int)((((data[3] >> can.MCU_FAULT_DATA_MOTORWINDING_TEMP_SENSOR_FAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MOTORWINDING_TEMP_SENSOR_FAIL_OFFSET);messages.MCU_Mosfet_temp_sensor_fail=(int)((((data[3] >> can.MCU_FAULT_DATA_MCU_MOSFET_TEMP_SENSOR_FAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MCU_MOSFET_TEMP_SENSOR_FAIL_OFFSET);messages.MCUDC_bus_C_temp_sens_fail=(int)((((data[3] >> can.MCU_FAULT_DATA_MCUDC_BUS_C_TEMP_SENS_FAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MCUDC_BUS_C_TEMP_SENS_FAIL_OFFSET);messages.MCU_calibration_fail=(int)((((data[3] >> can.MCU_FAULT_DATA_MCU_CALIBRATION_FAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MCU_CALIBRATION_FAIL_OFFSET);messages.MCU_fault_KL30_Fault=(int)((((data[4] >> can.MCU_FAULT_DATA_MCU_FAULT_KL30_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MCU_FAULT_KL30_FAULT_OFFSET);messages.MCU_fault_Machine_temp_low=(int)((((data[4] >> can.MCU_FAULT_DATA_MCU_FAULT_MACHINE_TEMP_LOW_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MCU_FAULT_MACHINE_TEMP_LOW_OFFSET);messages.MCU_fault_Board_temp_low=(int)((((data[4] >> can.MCU_FAULT_DATA_MCU_FAULT_BOARD_TEMP_LOW_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MCU_FAULT_BOARD_TEMP_LOW_OFFSET);messages.MCU_fault_rotor_stall=(int)((((data[4] >> can.MCU_FAULT_DATA_MCU_FAULT_ROTOR_STALL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA_CANID_MCU_FAULT_ROTOR_STALL_OFFSET);
  return can.MCU_FAULT_DATA_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_Fault_Data( CanConverter.MCU_Fault_Data_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MotorOC_protect_U_ph=(int) (messages.MotorOC_protect_U_ph - can.MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_U_PH_OFFSET);
messages.MotorOC_protect_V_ph=(int) (messages.MotorOC_protect_V_ph - can.MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_V_PH_OFFSET);
messages.MotorOC_protect_W_ph=(int) (messages.MotorOC_protect_W_ph - can.MCU_FAULT_DATA_CANID_MOTOROC_PROTECT_W_PH_OFFSET);
messages.MotorOV_protect_U_ph=(int) (messages.MotorOV_protect_U_ph - can.MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_U_PH_OFFSET);
messages.MotorOV_protect_V_ph=(int) (messages.MotorOV_protect_V_ph - can.MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_V_PH_OFFSET);
messages.MotorOV_protect_W_ph=(int) (messages.MotorOV_protect_W_ph - can.MCU_FAULT_DATA_CANID_MOTOROV_PROTECT_W_PH_OFFSET);
messages.Encoder_Disconnection=(int) (messages.Encoder_Disconnection - can.MCU_FAULT_DATA_CANID_ENCODER_DISCONNECTION_OFFSET);
messages.Encoder_Failure=(int) (messages.Encoder_Failure - can.MCU_FAULT_DATA_CANID_ENCODER_FAILURE_OFFSET);
messages.DCbus_undervoltage=(int) (messages.DCbus_undervoltage - can.MCU_FAULT_DATA_CANID_DCBUS_UNDERVOLTAGE_OFFSET);
messages.DCbus_overvoltage=(int) (messages.DCbus_overvoltage - can.MCU_FAULT_DATA_CANID_DCBUS_OVERVOLTAGE_OFFSET);
messages.DCbus_overcurrent=(int) (messages.DCbus_overcurrent - can.MCU_FAULT_DATA_CANID_DCBUS_OVERCURRENT_OFFSET);
messages.DCbus_shortcircuit=(int) (messages.DCbus_shortcircuit - can.MCU_FAULT_DATA_CANID_DCBUS_SHORTCIRCUIT_OFFSET);
messages.DCbus_reversepolarity=(int) (messages.DCbus_reversepolarity - can.MCU_FAULT_DATA_CANID_DCBUS_REVERSEPOLARITY_OFFSET);
messages.DCbus_HVIL_Fail=(int) (messages.DCbus_HVIL_Fail - can.MCU_FAULT_DATA_CANID_DCBUS_HVIL_FAIL_OFFSET);
messages.Prechrge_fail=(int) (messages.Prechrge_fail - can.MCU_FAULT_DATA_CANID_PRECHRGE_FAIL_OFFSET);
messages.Motor_regen_break_fault=(int) (messages.Motor_regen_break_fault - can.MCU_FAULT_DATA_CANID_MOTOR_REGEN_BREAK_FAULT_OFFSET);
messages.Reserved=(int) (messages.Reserved - can.MCU_FAULT_DATA_CANID_RESERVED_OFFSET);
messages.Dc_bus_capacitor_Overtemp=(int) (messages.Dc_bus_capacitor_Overtemp - can.MCU_FAULT_DATA_CANID_DC_BUS_CAPACITOR_OVERTEMP_OFFSET);
messages.LV_supplyOvervoltage=(int) (messages.LV_supplyOvervoltage - can.MCU_FAULT_DATA_CANID_LV_SUPPLYOVERVOLTAGE_OFFSET);
messages.LV_supplyUndervoltage=(int) (messages.LV_supplyUndervoltage - can.MCU_FAULT_DATA_CANID_LV_SUPPLYUNDERVOLTAGE_OFFSET);
messages.LV_supplyOvercurrent=(int) (messages.LV_supplyOvercurrent - can.MCU_FAULT_DATA_CANID_LV_SUPPLYOVERCURRENT_OFFSET);
messages.LV_supplyshortcircuit=(int) (messages.LV_supplyshortcircuit - can.MCU_FAULT_DATA_CANID_LV_SUPPLYSHORTCIRCUIT_OFFSET);
messages.Motorphasedisconnect_Uphase=(int) (messages.Motorphasedisconnect_Uphase - can.MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_UPHASE_OFFSET);
messages.Motorphasedisconnect_Vphase=(int) (messages.Motorphasedisconnect_Vphase - can.MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_VPHASE_OFFSET);
messages.Motorphasedisconnect_Wphase=(int) (messages.Motorphasedisconnect_Wphase - can.MCU_FAULT_DATA_CANID_MOTORPHASEDISCONNECT_WPHASE_OFFSET);
messages.Motorwinding_temp_sensor_fail=(int) (messages.Motorwinding_temp_sensor_fail - can.MCU_FAULT_DATA_CANID_MOTORWINDING_TEMP_SENSOR_FAIL_OFFSET);
messages.MCU_Mosfet_temp_sensor_fail=(int) (messages.MCU_Mosfet_temp_sensor_fail - can.MCU_FAULT_DATA_CANID_MCU_MOSFET_TEMP_SENSOR_FAIL_OFFSET);
messages.MCUDC_bus_C_temp_sens_fail=(int) (messages.MCUDC_bus_C_temp_sens_fail - can.MCU_FAULT_DATA_CANID_MCUDC_BUS_C_TEMP_SENS_FAIL_OFFSET);
messages.MCU_calibration_fail=(int) (messages.MCU_calibration_fail - can.MCU_FAULT_DATA_CANID_MCU_CALIBRATION_FAIL_OFFSET);
messages.MCU_fault_KL30_Fault=(int) (messages.MCU_fault_KL30_Fault - can.MCU_FAULT_DATA_CANID_MCU_FAULT_KL30_FAULT_OFFSET);
messages.MCU_fault_Machine_temp_low=(int) (messages.MCU_fault_Machine_temp_low - can.MCU_FAULT_DATA_CANID_MCU_FAULT_MACHINE_TEMP_LOW_OFFSET);
messages.MCU_fault_Board_temp_low=(int) (messages.MCU_fault_Board_temp_low - can.MCU_FAULT_DATA_CANID_MCU_FAULT_BOARD_TEMP_LOW_OFFSET);
messages.MCU_fault_rotor_stall=(int) (messages.MCU_fault_rotor_stall - can.MCU_FAULT_DATA_CANID_MCU_FAULT_ROTOR_STALL_OFFSET);
 data[0] = (byte)((messages.MotorOC_protect_U_ph & ( can.SIGNLE_READ_Mask1)) | ((messages.MotorOC_protect_V_ph & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MOTOROC_PROTECT_V_PH_MASK0) | ((messages.MotorOC_protect_W_ph & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MOTOROC_PROTECT_W_PH_MASK0) | ((messages.MotorOV_protect_U_ph & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MOTOROV_PROTECT_U_PH_MASK0) | ((messages.MotorOV_protect_V_ph & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MOTOROV_PROTECT_V_PH_MASK0) | ((messages.MotorOV_protect_W_ph & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MOTOROV_PROTECT_W_PH_MASK0) | ((messages.Encoder_Disconnection & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_ENCODER_DISCONNECTION_MASK0) | ((messages.Encoder_Failure & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_ENCODER_FAILURE_MASK0));
 data[1] = (byte)((messages.DCbus_undervoltage & ( can.SIGNLE_READ_Mask1)) | ((messages.DCbus_overvoltage & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_DCBUS_OVERVOLTAGE_MASK0) | ((messages.DCbus_overcurrent & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_DCBUS_OVERCURRENT_MASK0) | ((messages.DCbus_shortcircuit & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_DCBUS_SHORTCIRCUIT_MASK0) | ((messages.DCbus_reversepolarity & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_DCBUS_REVERSEPOLARITY_MASK0) | ((messages.DCbus_HVIL_Fail & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_DCBUS_HVIL_FAIL_MASK0) | ((messages.Prechrge_fail & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_PRECHRGE_FAIL_MASK0));
 data[2] = (byte)(((messages.Motor_regen_break_fault & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MOTOR_REGEN_BREAK_FAULT_MASK0) | ((messages.Reserved & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_RESERVED_MASK0) | ((messages.Dc_bus_capacitor_Overtemp & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_DC_BUS_CAPACITOR_OVERTEMP_MASK0) | ((messages.LV_supplyOvervoltage & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_LV_SUPPLYOVERVOLTAGE_MASK0) | ((messages.LV_supplyUndervoltage & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_LV_SUPPLYUNDERVOLTAGE_MASK0) | ((messages.LV_supplyOvercurrent & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_LV_SUPPLYOVERCURRENT_MASK0));
 data[3] = (byte)((messages.LV_supplyshortcircuit & ( can.SIGNLE_READ_Mask1)) | ((messages.Motorphasedisconnect_Uphase & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MOTORPHASEDISCONNECT_UPHASE_MASK0) | ((messages.Motorphasedisconnect_Vphase & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MOTORPHASEDISCONNECT_VPHASE_MASK0) | ((messages.Motorphasedisconnect_Wphase & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MOTORPHASEDISCONNECT_WPHASE_MASK0) | ((messages.Motorwinding_temp_sensor_fail & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MOTORWINDING_TEMP_SENSOR_FAIL_MASK0) | ((messages.MCU_Mosfet_temp_sensor_fail & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MCU_MOSFET_TEMP_SENSOR_FAIL_MASK0) | ((messages.MCUDC_bus_C_temp_sens_fail & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MCUDC_BUS_C_TEMP_SENS_FAIL_MASK0) | ((messages.MCU_calibration_fail & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MCU_CALIBRATION_FAIL_MASK0));
 data[4] = (byte)(((messages.MCU_fault_KL30_Fault & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MCU_FAULT_KL30_FAULT_MASK0) | ((messages.MCU_fault_Machine_temp_low & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MCU_FAULT_MACHINE_TEMP_LOW_MASK0) | ((messages.MCU_fault_Board_temp_low & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MCU_FAULT_BOARD_TEMP_LOW_MASK0) | ((messages.MCU_fault_rotor_stall & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA_MCU_FAULT_ROTOR_STALL_MASK0));
  return can.MCU_FAULT_DATA_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_Fault_Data2( CanConverter.MCU_Fault_Data2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Over_temp_warning=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_OVER_TEMP_WARNING_OFFSET);messages.Motor_Over_temp_warning=(int)((((data[0] >> can.MCU_FAULT_DATA2_MOTOR_OVER_TEMP_WARNING_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MOTOR_OVER_TEMP_WARNING_OFFSET);messages.MCU_overspeed_fault=(int)((((data[4] >> can.MCU_FAULT_DATA2_MCU_OVERSPEED_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_OVERSPEED_FAULT_OFFSET);messages.Regen_Failure=(int)((((data[4] >> can.MCU_FAULT_DATA2_REGEN_FAILURE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_REGEN_FAILURE_OFFSET);messages.MCU_Flt_DC_bus_V_Sensor_STG=(int)((((data[5] >> can.MCU_FAULT_DATA2_MCU_FLT_DC_BUS_V_SENSOR_STG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_DC_BUS_V_SENSOR_STG_OFFSET);messages.MCU_Flt_DC_bus_V_Sensor_STB=(int)((((data[5] >> can.MCU_FAULT_DATA2_MCU_FLT_DC_BUS_V_SENSOR_STB_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_DC_BUS_V_SENSOR_STB_OFFSET);messages.MCU_Flt_KL30_Sensor_STG=(int)((((data[5] >> can.MCU_FAULT_DATA2_MCU_FLT_KL30_SENSOR_STG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_SENSOR_STG_OFFSET);messages.MCU_Flt_KL30_Sensor_STB=(int)((((data[5] >> can.MCU_FAULT_DATA2_MCU_FLT_KL30_SENSOR_STB_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_SENSOR_STB_OFFSET);messages.MCU_Flt_BoardTemp_Sensor_STG=(int)((((data[5] >> can.MCU_FAULT_DATA2_MCU_FLT_BOARDTEMP_SENSOR_STG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_BOARDTEMP_SENSOR_STG_OFFSET);messages.MCU_Flt_BoardTemp_Sensor_STB=(int)((((data[5] >> can.MCU_FAULT_DATA2_MCU_FLT_BOARDTEMP_SENSOR_STB_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_BOARDTEMP_SENSOR_STB_OFFSET);messages.MCU_Flt_Rphase_STG=(int)(((data[6] & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_RPHASE_STG_OFFSET);messages.MCU_Flt_Rpase_STB=(int)((((data[6] >> can.MCU_FAULT_DATA2_MCU_FLT_RPASE_STB_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_RPASE_STB_OFFSET);messages.MCU_Flt_Yphase_STG=(int)((((data[6] >> can.MCU_FAULT_DATA2_MCU_FLT_YPHASE_STG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_YPHASE_STG_OFFSET);messages.MCU_Flt_Yphase_STB=(int)((((data[6] >> can.MCU_FAULT_DATA2_MCU_FLT_YPHASE_STB_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_YPHASE_STB_OFFSET);messages.MCU_Flt_Bphase_STG=(int)((((data[6] >> can.MCU_FAULT_DATA2_MCU_FLT_BPHASE_STG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_BPHASE_STG_OFFSET);messages.MCU_Flt_Bphase_STB=(int)((((data[6] >> can.MCU_FAULT_DATA2_MCU_FLT_BPHASE_STB_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_BPHASE_STB_OFFSET);messages.MCU_Flt_DC_Current_Sensor_STG=(int)((((data[6] >> can.MCU_FAULT_DATA2_MCU_FLT_DC_CURRENT_SENSOR_STG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_DC_CURRENT_SENSOR_STG_OFFSET);messages.MCU_Flt_DC_Current_Sensor_STB=(int)((((data[6] >> can.MCU_FAULT_DATA2_MCU_FLT_DC_CURRENT_SENSOR_STB_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_DC_CURRENT_SENSOR_STB_OFFSET);messages.MCU_Flt_BuckConverter_12V_STB=(int)(((data[7] & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_BUCKCONVERTER_12V_STB_OFFSET);messages.MCU_Flt_BuckConv_12V_STG=(int)((((data[7] >> can.MCU_FAULT_DATA2_MCU_FLT_BUCKCONV_12V_STG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_BUCKCONV_12V_STG_OFFSET);messages.MCU_BuckConv_5V_overV_Cutoff=(int)((((data[7] >> can.MCU_FAULT_DATA2_MCU_BUCKCONV_5V_OVERV_CUTOFF_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_BUCKCONV_5V_OVERV_CUTOFF_OFFSET);messages.MCU_BuckConv_5V_underV_Cutoff=(int)((((data[7] >> can.MCU_FAULT_DATA2_MCU_BUCKCONV_5V_UNDERV_CUTOFF_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_BUCKCONV_5V_UNDERV_CUTOFF_OFFSET);messages.MCU_Flt_MOSFET_Temp_High=(int)((((data[7] >> can.MCU_FAULT_DATA2_MCU_FLT_MOSFET_TEMP_HIGH_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_TEMP_HIGH_OFFSET);messages.MCU_Flt_MOSFET_STG=(int)((((data[7] >> can.MCU_FAULT_DATA2_MCU_FLT_MOSFET_STG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_STG_OFFSET);messages.MCU_Flt_MOSFET_STB=(int)((((data[7] >> can.MCU_FAULT_DATA2_MCU_FLT_MOSFET_STB_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_STB_OFFSET);messages.MCU_Flt_KL30_high=(int)((((data[7] >> can.MCU_FAULT_DATA2_MCU_FLT_KL30_HIGH_MASK0) & (can.SIGNLE_READ_Mask1))) + can.MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_HIGH_OFFSET);
  return can.MCU_FAULT_DATA2_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_Fault_Data2( CanConverter.MCU_Fault_Data2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Over_temp_warning=(int) (messages.MCU_Over_temp_warning - can.MCU_FAULT_DATA2_CANID_MCU_OVER_TEMP_WARNING_OFFSET);
messages.Motor_Over_temp_warning=(int) (messages.Motor_Over_temp_warning - can.MCU_FAULT_DATA2_CANID_MOTOR_OVER_TEMP_WARNING_OFFSET);
messages.MCU_overspeed_fault=(int) (messages.MCU_overspeed_fault - can.MCU_FAULT_DATA2_CANID_MCU_OVERSPEED_FAULT_OFFSET);
messages.Regen_Failure=(int) (messages.Regen_Failure - can.MCU_FAULT_DATA2_CANID_REGEN_FAILURE_OFFSET);
messages.MCU_Flt_DC_bus_V_Sensor_STG=(int) (messages.MCU_Flt_DC_bus_V_Sensor_STG - can.MCU_FAULT_DATA2_CANID_MCU_FLT_DC_BUS_V_SENSOR_STG_OFFSET);
messages.MCU_Flt_DC_bus_V_Sensor_STB=(int) (messages.MCU_Flt_DC_bus_V_Sensor_STB - can.MCU_FAULT_DATA2_CANID_MCU_FLT_DC_BUS_V_SENSOR_STB_OFFSET);
messages.MCU_Flt_KL30_Sensor_STG=(int) (messages.MCU_Flt_KL30_Sensor_STG - can.MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_SENSOR_STG_OFFSET);
messages.MCU_Flt_KL30_Sensor_STB=(int) (messages.MCU_Flt_KL30_Sensor_STB - can.MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_SENSOR_STB_OFFSET);
messages.MCU_Flt_BoardTemp_Sensor_STG=(int) (messages.MCU_Flt_BoardTemp_Sensor_STG - can.MCU_FAULT_DATA2_CANID_MCU_FLT_BOARDTEMP_SENSOR_STG_OFFSET);
messages.MCU_Flt_BoardTemp_Sensor_STB=(int) (messages.MCU_Flt_BoardTemp_Sensor_STB - can.MCU_FAULT_DATA2_CANID_MCU_FLT_BOARDTEMP_SENSOR_STB_OFFSET);
messages.MCU_Flt_Rphase_STG=(int) (messages.MCU_Flt_Rphase_STG - can.MCU_FAULT_DATA2_CANID_MCU_FLT_RPHASE_STG_OFFSET);
messages.MCU_Flt_Rpase_STB=(int) (messages.MCU_Flt_Rpase_STB - can.MCU_FAULT_DATA2_CANID_MCU_FLT_RPASE_STB_OFFSET);
messages.MCU_Flt_Yphase_STG=(int) (messages.MCU_Flt_Yphase_STG - can.MCU_FAULT_DATA2_CANID_MCU_FLT_YPHASE_STG_OFFSET);
messages.MCU_Flt_Yphase_STB=(int) (messages.MCU_Flt_Yphase_STB - can.MCU_FAULT_DATA2_CANID_MCU_FLT_YPHASE_STB_OFFSET);
messages.MCU_Flt_Bphase_STG=(int) (messages.MCU_Flt_Bphase_STG - can.MCU_FAULT_DATA2_CANID_MCU_FLT_BPHASE_STG_OFFSET);
messages.MCU_Flt_Bphase_STB=(int) (messages.MCU_Flt_Bphase_STB - can.MCU_FAULT_DATA2_CANID_MCU_FLT_BPHASE_STB_OFFSET);
messages.MCU_Flt_DC_Current_Sensor_STG=(int) (messages.MCU_Flt_DC_Current_Sensor_STG - can.MCU_FAULT_DATA2_CANID_MCU_FLT_DC_CURRENT_SENSOR_STG_OFFSET);
messages.MCU_Flt_DC_Current_Sensor_STB=(int) (messages.MCU_Flt_DC_Current_Sensor_STB - can.MCU_FAULT_DATA2_CANID_MCU_FLT_DC_CURRENT_SENSOR_STB_OFFSET);
messages.MCU_Flt_BuckConverter_12V_STB=(int) (messages.MCU_Flt_BuckConverter_12V_STB - can.MCU_FAULT_DATA2_CANID_MCU_FLT_BUCKCONVERTER_12V_STB_OFFSET);
messages.MCU_Flt_BuckConv_12V_STG=(int) (messages.MCU_Flt_BuckConv_12V_STG - can.MCU_FAULT_DATA2_CANID_MCU_FLT_BUCKCONV_12V_STG_OFFSET);
messages.MCU_BuckConv_5V_overV_Cutoff=(int) (messages.MCU_BuckConv_5V_overV_Cutoff - can.MCU_FAULT_DATA2_CANID_MCU_BUCKCONV_5V_OVERV_CUTOFF_OFFSET);
messages.MCU_BuckConv_5V_underV_Cutoff=(int) (messages.MCU_BuckConv_5V_underV_Cutoff - can.MCU_FAULT_DATA2_CANID_MCU_BUCKCONV_5V_UNDERV_CUTOFF_OFFSET);
messages.MCU_Flt_MOSFET_Temp_High=(int) (messages.MCU_Flt_MOSFET_Temp_High - can.MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_TEMP_HIGH_OFFSET);
messages.MCU_Flt_MOSFET_STG=(int) (messages.MCU_Flt_MOSFET_STG - can.MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_STG_OFFSET);
messages.MCU_Flt_MOSFET_STB=(int) (messages.MCU_Flt_MOSFET_STB - can.MCU_FAULT_DATA2_CANID_MCU_FLT_MOSFET_STB_OFFSET);
messages.MCU_Flt_KL30_high=(int) (messages.MCU_Flt_KL30_high - can.MCU_FAULT_DATA2_CANID_MCU_FLT_KL30_HIGH_OFFSET);
 data[0] = (byte)((messages.MCU_Over_temp_warning & ( can.SIGNLE_READ_Mask1)) | ((messages.Motor_Over_temp_warning & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MOTOR_OVER_TEMP_WARNING_MASK0));
 data[4] = (byte)(((messages.MCU_overspeed_fault & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_OVERSPEED_FAULT_MASK0) | ((messages.Regen_Failure & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_REGEN_FAILURE_MASK0));
 data[5] = (byte)(((messages.MCU_Flt_DC_bus_V_Sensor_STG & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_DC_BUS_V_SENSOR_STG_MASK0) | ((messages.MCU_Flt_DC_bus_V_Sensor_STB & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_DC_BUS_V_SENSOR_STB_MASK0) | ((messages.MCU_Flt_KL30_Sensor_STG & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_KL30_SENSOR_STG_MASK0) | ((messages.MCU_Flt_KL30_Sensor_STB & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_KL30_SENSOR_STB_MASK0) | ((messages.MCU_Flt_BoardTemp_Sensor_STG & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_BOARDTEMP_SENSOR_STG_MASK0) | ((messages.MCU_Flt_BoardTemp_Sensor_STB & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_BOARDTEMP_SENSOR_STB_MASK0));
 data[6] = (byte)((messages.MCU_Flt_Rphase_STG & ( can.SIGNLE_READ_Mask1)) | ((messages.MCU_Flt_Rpase_STB & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_RPASE_STB_MASK0) | ((messages.MCU_Flt_Yphase_STG & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_YPHASE_STG_MASK0) | ((messages.MCU_Flt_Yphase_STB & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_YPHASE_STB_MASK0) | ((messages.MCU_Flt_Bphase_STG & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_BPHASE_STG_MASK0) | ((messages.MCU_Flt_Bphase_STB & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_BPHASE_STB_MASK0) | ((messages.MCU_Flt_DC_Current_Sensor_STG & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_DC_CURRENT_SENSOR_STG_MASK0) | ((messages.MCU_Flt_DC_Current_Sensor_STB & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_DC_CURRENT_SENSOR_STB_MASK0));
 data[7] = (byte)((messages.MCU_Flt_BuckConverter_12V_STB & ( can.SIGNLE_READ_Mask1)) | ((messages.MCU_Flt_BuckConv_12V_STG & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_BUCKCONV_12V_STG_MASK0) | ((messages.MCU_BuckConv_5V_overV_Cutoff & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_BUCKCONV_5V_OVERV_CUTOFF_MASK0) | ((messages.MCU_BuckConv_5V_underV_Cutoff & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_BUCKCONV_5V_UNDERV_CUTOFF_MASK0) | ((messages.MCU_Flt_MOSFET_Temp_High & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_MOSFET_TEMP_HIGH_MASK0) | ((messages.MCU_Flt_MOSFET_STG & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_MOSFET_STG_MASK0) | ((messages.MCU_Flt_MOSFET_STB & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_MOSFET_STB_MASK0) | ((messages.MCU_Flt_KL30_high & ( can.SIGNLE_READ_Mask1)) << can.MCU_FAULT_DATA2_MCU_FLT_KL30_HIGH_MASK0));
  return can.MCU_FAULT_DATA2_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Display_info( CanConverter.Display_info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Side_Stand_Status=(int)(((data[0] & (can.SIGNLE_READ_Mask3))) + can.DISPLAY_INFO_CANID_SIDE_STAND_STATUS_OFFSET);messages.Display_SoC=(int)(((( data[1] & (can.SIGNLE_READ_Mask3)) << can.DISPLAY_INFO_DISPLAY_SOC_MASK0) | (( data[0] >> can.DISPLAY_INFO_DISPLAY_SOC_MASK1) & (can.SIGNLE_READ_Mask1))) + can.DISPLAY_INFO_CANID_DISPLAY_SOC_OFFSET);messages.Vehicle_Range=(int)(((( data[2] & (can.SIGNLE_READ_Mask3)) << can.DISPLAY_INFO_VEHICLE_RANGE_MASK0) | (( data[1] >> can.DISPLAY_INFO_VEHICLE_RANGE_MASK1) & (can.SIGNLE_READ_Mask1))) + can.DISPLAY_INFO_CANID_VEHICLE_RANGE_OFFSET);messages.Indicators_TTL=(int)((((data[2] >> can.DISPLAY_INFO_INDICATORS_TTL_MASK0) & (can.SIGNLE_READ_Mask4))) + can.DISPLAY_INFO_CANID_INDICATORS_TTL_OFFSET);messages.FrontLight_TTL=(int)(((( data[3] & (can.SIGNLE_READ_Mask3)) << can.DISPLAY_INFO_FRONTLIGHT_TTL_MASK0) | (( data[2] >> can.DISPLAY_INFO_FRONTLIGHT_TTL_MASK1) & (can.SIGNLE_READ_Mask1))) + can.DISPLAY_INFO_CANID_FRONTLIGHT_TTL_OFFSET);messages.Charge_TTL=(int)((((data[3] >> can.DISPLAY_INFO_CHARGE_TTL_MASK0) & (can.SIGNLE_READ_Mask3))) + can.DISPLAY_INFO_CANID_CHARGE_TTL_OFFSET);messages.DRL_Lamp_TTL=(int)((((data[3] >> can.DISPLAY_INFO_DRL_LAMP_TTL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.DISPLAY_INFO_CANID_DRL_LAMP_TTL_OFFSET);messages.Low_Battery_Alert_TTL=(int)((((data[3] >> can.DISPLAY_INFO_LOW_BATTERY_ALERT_TTL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.DISPLAY_INFO_CANID_LOW_BATTERY_ALERT_TTL_OFFSET);messages.Display_Speed=(int)(((( data[5] & (can.SIGNLE_READ_Mask4)) << can.DISPLAY_INFO_DISPLAY_SPEED_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.DISPLAY_INFO_CANID_DISPLAY_SPEED_OFFSET);
  return can.DISPLAY_INFO_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Display_info( CanConverter.Display_info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Side_Stand_Status=(int) (messages.Side_Stand_Status - can.DISPLAY_INFO_CANID_SIDE_STAND_STATUS_OFFSET);
messages.Display_SoC=(int) (messages.Display_SoC - can.DISPLAY_INFO_CANID_DISPLAY_SOC_OFFSET);
messages.Vehicle_Range=(int) (messages.Vehicle_Range - can.DISPLAY_INFO_CANID_VEHICLE_RANGE_OFFSET);
messages.Indicators_TTL=(int) (messages.Indicators_TTL - can.DISPLAY_INFO_CANID_INDICATORS_TTL_OFFSET);
messages.FrontLight_TTL=(int) (messages.FrontLight_TTL - can.DISPLAY_INFO_CANID_FRONTLIGHT_TTL_OFFSET);
messages.Charge_TTL=(int) (messages.Charge_TTL - can.DISPLAY_INFO_CANID_CHARGE_TTL_OFFSET);
messages.DRL_Lamp_TTL=(int) (messages.DRL_Lamp_TTL - can.DISPLAY_INFO_CANID_DRL_LAMP_TTL_OFFSET);
messages.Low_Battery_Alert_TTL=(int) (messages.Low_Battery_Alert_TTL - can.DISPLAY_INFO_CANID_LOW_BATTERY_ALERT_TTL_OFFSET);
messages.Display_Speed=(int) (messages.Display_Speed - can.DISPLAY_INFO_CANID_DISPLAY_SPEED_OFFSET);
 data[0] = (byte)((messages.Side_Stand_Status & ( can.SIGNLE_READ_Mask3)) | ((messages.Display_SoC & (can.SIGNLE_READ_Mask5)) << can.DISPLAY_INFO_DISPLAY_SOC_MASK1));
 data[1] = (byte)(((messages.Display_SoC >> can.DISPLAY_INFO_DISPLAY_SOC_MASK0) & (can.SIGNLE_READ_Mask3)) | ((messages.Vehicle_Range & (can.SIGNLE_READ_Mask5)) << can.DISPLAY_INFO_VEHICLE_RANGE_MASK1));
 data[2] = (byte)(((messages.Vehicle_Range >> can.DISPLAY_INFO_VEHICLE_RANGE_MASK0) & (can.SIGNLE_READ_Mask3)) | ((messages.Indicators_TTL & ( can.SIGNLE_READ_Mask4)) << can.DISPLAY_INFO_INDICATORS_TTL_MASK0) | ((messages.FrontLight_TTL & (can.SIGNLE_READ_Mask1)) << can.DISPLAY_INFO_FRONTLIGHT_TTL_MASK1));
 data[3] = (byte)(((messages.FrontLight_TTL >> can.DISPLAY_INFO_FRONTLIGHT_TTL_MASK0) & (can.SIGNLE_READ_Mask3)) | ((messages.Charge_TTL & ( can.SIGNLE_READ_Mask3)) << can.DISPLAY_INFO_CHARGE_TTL_MASK0) | ((messages.DRL_Lamp_TTL & ( can.SIGNLE_READ_Mask1)) << can.DISPLAY_INFO_DRL_LAMP_TTL_MASK0) | ((messages.Low_Battery_Alert_TTL & ( can.SIGNLE_READ_Mask1)) << can.DISPLAY_INFO_LOW_BATTERY_ALERT_TTL_MASK0));
 data[4] = (byte)((messages.Display_Speed & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Display_Speed >> can.DISPLAY_INFO_DISPLAY_SPEED_MASK0) & (can.SIGNLE_READ_Mask4)));
  return can.DISPLAY_INFO_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Environment_Data( CanConverter.Environment_Data_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Ambient_Light_Sensor_Value=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.ENVIRONMENT_DATA_AMBIENT_LIGHT_SENSOR_VALUE_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.ENVIRONMENT_DATA_CANID_AMBIENT_LIGHT_SENSOR_VALUE_OFFSET);messages.Ambient_Temp_Sensor_Value=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.ENVIRONMENT_DATA_AMBIENT_TEMP_SENSOR_VALUE_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.ENVIRONMENT_DATA_CANID_AMBIENT_TEMP_SENSOR_VALUE_OFFSET);
  return can.ENVIRONMENT_DATA_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Environment_Data( CanConverter.Environment_Data_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Ambient_Light_Sensor_Value=(int) (messages.Ambient_Light_Sensor_Value - can.ENVIRONMENT_DATA_CANID_AMBIENT_LIGHT_SENSOR_VALUE_OFFSET);
messages.Ambient_Temp_Sensor_Value=(int) (messages.Ambient_Temp_Sensor_Value - can.ENVIRONMENT_DATA_CANID_AMBIENT_TEMP_SENSOR_VALUE_OFFSET);
 data[0] = (byte)((messages.Ambient_Light_Sensor_Value & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Ambient_Light_Sensor_Value >> can.ENVIRONMENT_DATA_AMBIENT_LIGHT_SENSOR_VALUE_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Ambient_Temp_Sensor_Value & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Ambient_Temp_Sensor_Value >> can.ENVIRONMENT_DATA_AMBIENT_TEMP_SENSOR_VALUE_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.ENVIRONMENT_DATA_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_Fault_1( CanConverter.BMS_Fault_1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_V_Sensor_Failure_Cell1=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL1_OFFSET);messages.BMS_V_Sensor_Failure_Cell2=(int)((((data[0] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL2_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL2_OFFSET);messages.BMS_V_Sensor_Failure_Cell3=(int)((((data[0] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL3_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL3_OFFSET);messages.BMS_V_Sensor_Failure_Cell4=(int)((((data[0] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL4_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL4_OFFSET);messages.BMS_V_Sensor_Failure_Cell5=(int)((((data[0] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL5_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL5_OFFSET);messages.BMS_V_Sensor_Failure_Cell6=(int)((((data[0] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL6_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL6_OFFSET);messages.BMS_V_Sensor_Failure_Cell7=(int)((((data[0] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL7_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL7_OFFSET);messages.BMS_V_Sensor_Failure_Cell8=(int)((((data[0] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL8_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL8_OFFSET);messages.BMS_V_Sensor_Failure_Cell9=(int)(((data[1] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL9_OFFSET);messages.BMS_V_Sensor_Failure_Cell10=(int)((((data[1] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL10_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL10_OFFSET);messages.BMS_V_Sensor_Failure_Cell11=(int)((((data[1] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL11_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL11_OFFSET);messages.BMS_V_Sensor_Failure_Cell12=(int)((((data[1] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL12_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL12_OFFSET);messages.BMS_V_Sensor_Failure_Cell13=(int)((((data[1] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL13_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL13_OFFSET);messages.BMS_V_Sensor_Failure_Cell14=(int)((((data[1] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL14_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL14_OFFSET);messages.BMS_V_Sensor_Failure_Cell15=(int)((((data[1] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL15_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL15_OFFSET);messages.BMS_V_Sensor_Failure_Cell16=(int)((((data[1] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL16_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL16_OFFSET);messages.BMS_V_Sensor_Failure_Cell17=(int)(((data[2] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL17_OFFSET);messages.BMS_V_Sensor_Failure_Cell18=(int)((((data[2] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL18_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL18_OFFSET);messages.BMS_V_Sensor_Failure_Cell19=(int)((((data[2] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL19_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL19_OFFSET);messages.BMS_V_Sensor_Failure_Cell20=(int)((((data[2] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL20_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL20_OFFSET);messages.BMS_V_Sensor_Failure_Cell21=(int)((((data[2] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL21_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL21_OFFSET);messages.BMS_V_Sensor_Failure_Cell22=(int)((((data[2] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL22_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL22_OFFSET);messages.BMS_V_Sensor_Failure_Cell23=(int)((((data[2] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL23_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL23_OFFSET);messages.BMS_V_Sensor_Failure_Cell24=(int)((((data[2] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL24_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL24_OFFSET);messages.BMS_V_Sensor_Failure_Cell25=(int)(((data[3] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL25_OFFSET);messages.BMS_V_Sensor_Failure_Cell26=(int)((((data[3] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL26_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL26_OFFSET);messages.BMS_V_Sensor_Failure_Cell27=(int)((((data[3] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL27_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL27_OFFSET);messages.BMS_V_Sensor_Failure_Cell28=(int)((((data[3] >> can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL28_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL28_OFFSET);messages.BMS_V_Out_of_Range_Cell1=(int)((((data[3] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL1_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL1_OFFSET);messages.BMS_V_Out_of_Range_Cell2=(int)((((data[3] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL2_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL2_OFFSET);messages.BMS_V_Out_of_Range_Cell3=(int)((((data[3] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL3_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL3_OFFSET);messages.BMS_V_Out_of_Range_Cell4=(int)((((data[3] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL4_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL4_OFFSET);messages.BMS_V_Out_of_Range_Cell5=(int)(((data[4] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL5_OFFSET);messages.BMS_V_Out_of_Range_Cell6=(int)((((data[4] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL6_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL6_OFFSET);messages.BMS_V_Out_of_Range_Cell7=(int)((((data[4] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL7_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL7_OFFSET);messages.BMS_V_Out_of_Range_Cell8=(int)((((data[4] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL8_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL8_OFFSET);messages.BMS_V_Out_of_Range_Cell9=(int)((((data[4] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL9_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL9_OFFSET);messages.BMS_V_Out_of_Range_Cell10=(int)((((data[4] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL10_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL10_OFFSET);messages.BMS_V_Out_of_Range_Cell11=(int)((((data[4] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL11_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL11_OFFSET);messages.BMS_V_Out_of_Range_Cell12=(int)((((data[4] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL12_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL12_OFFSET);messages.BMS_V_Out_of_Range_Cell13=(int)(((data[5] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL13_OFFSET);messages.BMS_V_Out_of_Range_Cell14=(int)((((data[5] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL14_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL14_OFFSET);messages.BMS_V_Out_of_Range_Cell15=(int)((((data[5] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL15_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL15_OFFSET);messages.BMS_V_Out_of_Range_Cell16=(int)((((data[5] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL16_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL16_OFFSET);messages.BMS_V_Out_of_Range_Cell17=(int)((((data[5] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL17_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL17_OFFSET);messages.BMS_V_Out_of_Range_Cell18=(int)((((data[5] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL18_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL18_OFFSET);messages.BMS_V_Out_of_Range_Cell19=(int)((((data[5] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL19_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL19_OFFSET);messages.BMS_V_Out_of_Range_Cell20=(int)((((data[5] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL20_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL20_OFFSET);messages.BMS_V_Out_of_Range_Cell21=(int)(((data[6] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL21_OFFSET);messages.BMS_V_Out_of_Range_Cell22=(int)((((data[6] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL22_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL22_OFFSET);messages.BMS_V_Out_of_Range_Cell23=(int)((((data[6] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL23_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL23_OFFSET);messages.BMS_V_Out_of_Range_Cell24=(int)((((data[6] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL24_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL24_OFFSET);messages.BMS_V_Out_of_Range_Cell25=(int)((((data[6] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL25_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL25_OFFSET);messages.BMS_V_Out_of_Range_Cell26=(int)((((data[6] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL26_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL26_OFFSET);messages.BMS_V_Out_of_Range_Cell27=(int)((((data[6] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL27_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL27_OFFSET);messages.BMS_V_Out_of_Range_Cell28=(int)((((data[6] >> can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL28_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL28_OFFSET);messages.BMS_BatteryPackTemp_1_SensFail=(int)(((data[7] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_1_SENSFAIL_OFFSET);messages.BMS_BatteryPackTemp_2_SensFail=(int)((((data[7] >> can.BMS_FAULT_1_BMS_BATTERYPACKTEMP_2_SENSFAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_2_SENSFAIL_OFFSET);messages.BMS_BatteryPackTemp_3_SensFail=(int)((((data[7] >> can.BMS_FAULT_1_BMS_BATTERYPACKTEMP_3_SENSFAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_3_SENSFAIL_OFFSET);messages.BMS_BatteryPackTemp_4_SensFail=(int)((((data[7] >> can.BMS_FAULT_1_BMS_BATTERYPACKTEMP_4_SENSFAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_4_SENSFAIL_OFFSET);messages.BMS_BatteryPackTemp_5_SensFail=(int)((((data[7] >> can.BMS_FAULT_1_BMS_BATTERYPACKTEMP_5_SENSFAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_5_SENSFAIL_OFFSET);messages.BMS_BatteryPackTemp_6_SensFail=(int)((((data[7] >> can.BMS_FAULT_1_BMS_BATTERYPACKTEMP_6_SENSFAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_6_SENSFAIL_OFFSET);
  return can.BMS_FAULT_1_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_Fault_1( CanConverter.BMS_Fault_1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_V_Sensor_Failure_Cell1=(int) (messages.BMS_V_Sensor_Failure_Cell1 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL1_OFFSET);
messages.BMS_V_Sensor_Failure_Cell2=(int) (messages.BMS_V_Sensor_Failure_Cell2 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL2_OFFSET);
messages.BMS_V_Sensor_Failure_Cell3=(int) (messages.BMS_V_Sensor_Failure_Cell3 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL3_OFFSET);
messages.BMS_V_Sensor_Failure_Cell4=(int) (messages.BMS_V_Sensor_Failure_Cell4 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL4_OFFSET);
messages.BMS_V_Sensor_Failure_Cell5=(int) (messages.BMS_V_Sensor_Failure_Cell5 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL5_OFFSET);
messages.BMS_V_Sensor_Failure_Cell6=(int) (messages.BMS_V_Sensor_Failure_Cell6 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL6_OFFSET);
messages.BMS_V_Sensor_Failure_Cell7=(int) (messages.BMS_V_Sensor_Failure_Cell7 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL7_OFFSET);
messages.BMS_V_Sensor_Failure_Cell8=(int) (messages.BMS_V_Sensor_Failure_Cell8 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL8_OFFSET);
messages.BMS_V_Sensor_Failure_Cell9=(int) (messages.BMS_V_Sensor_Failure_Cell9 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL9_OFFSET);
messages.BMS_V_Sensor_Failure_Cell10=(int) (messages.BMS_V_Sensor_Failure_Cell10 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL10_OFFSET);
messages.BMS_V_Sensor_Failure_Cell11=(int) (messages.BMS_V_Sensor_Failure_Cell11 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL11_OFFSET);
messages.BMS_V_Sensor_Failure_Cell12=(int) (messages.BMS_V_Sensor_Failure_Cell12 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL12_OFFSET);
messages.BMS_V_Sensor_Failure_Cell13=(int) (messages.BMS_V_Sensor_Failure_Cell13 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL13_OFFSET);
messages.BMS_V_Sensor_Failure_Cell14=(int) (messages.BMS_V_Sensor_Failure_Cell14 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL14_OFFSET);
messages.BMS_V_Sensor_Failure_Cell15=(int) (messages.BMS_V_Sensor_Failure_Cell15 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL15_OFFSET);
messages.BMS_V_Sensor_Failure_Cell16=(int) (messages.BMS_V_Sensor_Failure_Cell16 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL16_OFFSET);
messages.BMS_V_Sensor_Failure_Cell17=(int) (messages.BMS_V_Sensor_Failure_Cell17 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL17_OFFSET);
messages.BMS_V_Sensor_Failure_Cell18=(int) (messages.BMS_V_Sensor_Failure_Cell18 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL18_OFFSET);
messages.BMS_V_Sensor_Failure_Cell19=(int) (messages.BMS_V_Sensor_Failure_Cell19 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL19_OFFSET);
messages.BMS_V_Sensor_Failure_Cell20=(int) (messages.BMS_V_Sensor_Failure_Cell20 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL20_OFFSET);
messages.BMS_V_Sensor_Failure_Cell21=(int) (messages.BMS_V_Sensor_Failure_Cell21 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL21_OFFSET);
messages.BMS_V_Sensor_Failure_Cell22=(int) (messages.BMS_V_Sensor_Failure_Cell22 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL22_OFFSET);
messages.BMS_V_Sensor_Failure_Cell23=(int) (messages.BMS_V_Sensor_Failure_Cell23 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL23_OFFSET);
messages.BMS_V_Sensor_Failure_Cell24=(int) (messages.BMS_V_Sensor_Failure_Cell24 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL24_OFFSET);
messages.BMS_V_Sensor_Failure_Cell25=(int) (messages.BMS_V_Sensor_Failure_Cell25 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL25_OFFSET);
messages.BMS_V_Sensor_Failure_Cell26=(int) (messages.BMS_V_Sensor_Failure_Cell26 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL26_OFFSET);
messages.BMS_V_Sensor_Failure_Cell27=(int) (messages.BMS_V_Sensor_Failure_Cell27 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL27_OFFSET);
messages.BMS_V_Sensor_Failure_Cell28=(int) (messages.BMS_V_Sensor_Failure_Cell28 - can.BMS_FAULT_1_CANID_BMS_V_SENSOR_FAILURE_CELL28_OFFSET);
messages.BMS_V_Out_of_Range_Cell1=(int) (messages.BMS_V_Out_of_Range_Cell1 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL1_OFFSET);
messages.BMS_V_Out_of_Range_Cell2=(int) (messages.BMS_V_Out_of_Range_Cell2 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL2_OFFSET);
messages.BMS_V_Out_of_Range_Cell3=(int) (messages.BMS_V_Out_of_Range_Cell3 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL3_OFFSET);
messages.BMS_V_Out_of_Range_Cell4=(int) (messages.BMS_V_Out_of_Range_Cell4 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL4_OFFSET);
messages.BMS_V_Out_of_Range_Cell5=(int) (messages.BMS_V_Out_of_Range_Cell5 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL5_OFFSET);
messages.BMS_V_Out_of_Range_Cell6=(int) (messages.BMS_V_Out_of_Range_Cell6 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL6_OFFSET);
messages.BMS_V_Out_of_Range_Cell7=(int) (messages.BMS_V_Out_of_Range_Cell7 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL7_OFFSET);
messages.BMS_V_Out_of_Range_Cell8=(int) (messages.BMS_V_Out_of_Range_Cell8 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL8_OFFSET);
messages.BMS_V_Out_of_Range_Cell9=(int) (messages.BMS_V_Out_of_Range_Cell9 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL9_OFFSET);
messages.BMS_V_Out_of_Range_Cell10=(int) (messages.BMS_V_Out_of_Range_Cell10 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL10_OFFSET);
messages.BMS_V_Out_of_Range_Cell11=(int) (messages.BMS_V_Out_of_Range_Cell11 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL11_OFFSET);
messages.BMS_V_Out_of_Range_Cell12=(int) (messages.BMS_V_Out_of_Range_Cell12 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL12_OFFSET);
messages.BMS_V_Out_of_Range_Cell13=(int) (messages.BMS_V_Out_of_Range_Cell13 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL13_OFFSET);
messages.BMS_V_Out_of_Range_Cell14=(int) (messages.BMS_V_Out_of_Range_Cell14 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL14_OFFSET);
messages.BMS_V_Out_of_Range_Cell15=(int) (messages.BMS_V_Out_of_Range_Cell15 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL15_OFFSET);
messages.BMS_V_Out_of_Range_Cell16=(int) (messages.BMS_V_Out_of_Range_Cell16 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL16_OFFSET);
messages.BMS_V_Out_of_Range_Cell17=(int) (messages.BMS_V_Out_of_Range_Cell17 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL17_OFFSET);
messages.BMS_V_Out_of_Range_Cell18=(int) (messages.BMS_V_Out_of_Range_Cell18 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL18_OFFSET);
messages.BMS_V_Out_of_Range_Cell19=(int) (messages.BMS_V_Out_of_Range_Cell19 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL19_OFFSET);
messages.BMS_V_Out_of_Range_Cell20=(int) (messages.BMS_V_Out_of_Range_Cell20 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL20_OFFSET);
messages.BMS_V_Out_of_Range_Cell21=(int) (messages.BMS_V_Out_of_Range_Cell21 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL21_OFFSET);
messages.BMS_V_Out_of_Range_Cell22=(int) (messages.BMS_V_Out_of_Range_Cell22 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL22_OFFSET);
messages.BMS_V_Out_of_Range_Cell23=(int) (messages.BMS_V_Out_of_Range_Cell23 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL23_OFFSET);
messages.BMS_V_Out_of_Range_Cell24=(int) (messages.BMS_V_Out_of_Range_Cell24 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL24_OFFSET);
messages.BMS_V_Out_of_Range_Cell25=(int) (messages.BMS_V_Out_of_Range_Cell25 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL25_OFFSET);
messages.BMS_V_Out_of_Range_Cell26=(int) (messages.BMS_V_Out_of_Range_Cell26 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL26_OFFSET);
messages.BMS_V_Out_of_Range_Cell27=(int) (messages.BMS_V_Out_of_Range_Cell27 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL27_OFFSET);
messages.BMS_V_Out_of_Range_Cell28=(int) (messages.BMS_V_Out_of_Range_Cell28 - can.BMS_FAULT_1_CANID_BMS_V_OUT_OF_RANGE_CELL28_OFFSET);
messages.BMS_BatteryPackTemp_1_SensFail=(int) (messages.BMS_BatteryPackTemp_1_SensFail - can.BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_1_SENSFAIL_OFFSET);
messages.BMS_BatteryPackTemp_2_SensFail=(int) (messages.BMS_BatteryPackTemp_2_SensFail - can.BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_2_SENSFAIL_OFFSET);
messages.BMS_BatteryPackTemp_3_SensFail=(int) (messages.BMS_BatteryPackTemp_3_SensFail - can.BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_3_SENSFAIL_OFFSET);
messages.BMS_BatteryPackTemp_4_SensFail=(int) (messages.BMS_BatteryPackTemp_4_SensFail - can.BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_4_SENSFAIL_OFFSET);
messages.BMS_BatteryPackTemp_5_SensFail=(int) (messages.BMS_BatteryPackTemp_5_SensFail - can.BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_5_SENSFAIL_OFFSET);
messages.BMS_BatteryPackTemp_6_SensFail=(int) (messages.BMS_BatteryPackTemp_6_SensFail - can.BMS_FAULT_1_CANID_BMS_BATTERYPACKTEMP_6_SENSFAIL_OFFSET);
 data[0] = (byte)((messages.BMS_V_Sensor_Failure_Cell1 & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_V_Sensor_Failure_Cell2 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL2_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell3 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL3_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell4 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL4_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell5 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL5_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell6 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL6_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell7 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL7_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell8 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL8_MASK0));
 data[1] = (byte)((messages.BMS_V_Sensor_Failure_Cell9 & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_V_Sensor_Failure_Cell10 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL10_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell11 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL11_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell12 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL12_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell13 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL13_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell14 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL14_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell15 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL15_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell16 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL16_MASK0));
 data[2] = (byte)((messages.BMS_V_Sensor_Failure_Cell17 & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_V_Sensor_Failure_Cell18 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL18_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell19 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL19_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell20 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL20_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell21 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL21_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell22 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL22_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell23 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL23_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell24 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL24_MASK0));
 data[3] = (byte)((messages.BMS_V_Sensor_Failure_Cell25 & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_V_Sensor_Failure_Cell26 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL26_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell27 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL27_MASK0) | ((messages.BMS_V_Sensor_Failure_Cell28 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_SENSOR_FAILURE_CELL28_MASK0) | ((messages.BMS_V_Out_of_Range_Cell1 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL1_MASK0) | ((messages.BMS_V_Out_of_Range_Cell2 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL2_MASK0) | ((messages.BMS_V_Out_of_Range_Cell3 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL3_MASK0) | ((messages.BMS_V_Out_of_Range_Cell4 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL4_MASK0));
 data[4] = (byte)((messages.BMS_V_Out_of_Range_Cell5 & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_V_Out_of_Range_Cell6 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL6_MASK0) | ((messages.BMS_V_Out_of_Range_Cell7 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL7_MASK0) | ((messages.BMS_V_Out_of_Range_Cell8 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL8_MASK0) | ((messages.BMS_V_Out_of_Range_Cell9 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL9_MASK0) | ((messages.BMS_V_Out_of_Range_Cell10 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL10_MASK0) | ((messages.BMS_V_Out_of_Range_Cell11 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL11_MASK0) | ((messages.BMS_V_Out_of_Range_Cell12 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL12_MASK0));
 data[5] = (byte)((messages.BMS_V_Out_of_Range_Cell13 & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_V_Out_of_Range_Cell14 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL14_MASK0) | ((messages.BMS_V_Out_of_Range_Cell15 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL15_MASK0) | ((messages.BMS_V_Out_of_Range_Cell16 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL16_MASK0) | ((messages.BMS_V_Out_of_Range_Cell17 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL17_MASK0) | ((messages.BMS_V_Out_of_Range_Cell18 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL18_MASK0) | ((messages.BMS_V_Out_of_Range_Cell19 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL19_MASK0) | ((messages.BMS_V_Out_of_Range_Cell20 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL20_MASK0));
 data[6] = (byte)((messages.BMS_V_Out_of_Range_Cell21 & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_V_Out_of_Range_Cell22 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL22_MASK0) | ((messages.BMS_V_Out_of_Range_Cell23 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL23_MASK0) | ((messages.BMS_V_Out_of_Range_Cell24 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL24_MASK0) | ((messages.BMS_V_Out_of_Range_Cell25 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL25_MASK0) | ((messages.BMS_V_Out_of_Range_Cell26 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL26_MASK0) | ((messages.BMS_V_Out_of_Range_Cell27 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL27_MASK0) | ((messages.BMS_V_Out_of_Range_Cell28 & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_V_OUT_OF_RANGE_CELL28_MASK0));
 data[7] = (byte)((messages.BMS_BatteryPackTemp_1_SensFail & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_BatteryPackTemp_2_SensFail & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_BATTERYPACKTEMP_2_SENSFAIL_MASK0) | ((messages.BMS_BatteryPackTemp_3_SensFail & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_BATTERYPACKTEMP_3_SENSFAIL_MASK0) | ((messages.BMS_BatteryPackTemp_4_SensFail & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_BATTERYPACKTEMP_4_SENSFAIL_MASK0) | ((messages.BMS_BatteryPackTemp_5_SensFail & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_BATTERYPACKTEMP_5_SENSFAIL_MASK0) | ((messages.BMS_BatteryPackTemp_6_SensFail & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_1_BMS_BATTERYPACKTEMP_6_SENSFAIL_MASK0));
  return can.BMS_FAULT_1_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_Fault_2( CanConverter.BMS_Fault_2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_LowTempCharge_Error=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_LOWTEMPCHARGE_ERROR_OFFSET);messages.BMS_LowTempDrive_Warning=(int)((((data[0] >> can.BMS_FAULT_2_BMS_LOWTEMPDRIVE_WARNING_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_LOWTEMPDRIVE_WARNING_OFFSET);messages.BMS_LowTempDrive_Error=(int)((((data[0] >> can.BMS_FAULT_2_BMS_LOWTEMPDRIVE_ERROR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_LOWTEMPDRIVE_ERROR_OFFSET);messages.OverTimetoFastCharge_Error=(int)((((data[0] >> can.BMS_FAULT_2_OVERTIMETOFASTCHARGE_ERROR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_OVERTIMETOFASTCHARGE_ERROR_OFFSET);messages.Battery_Discharge_Inhibit=(int)((((data[0] >> can.BMS_FAULT_2_BATTERY_DISCHARGE_INHIBIT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BATTERY_DISCHARGE_INHIBIT_OFFSET);messages.Battery_Derate_Drive_Cur_Flag=(int)((((data[0] >> can.BMS_FAULT_2_BATTERY_DERATE_DRIVE_CUR_FLAG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BATTERY_DERATE_DRIVE_CUR_FLAG_OFFSET);messages.Battery_Derate_Charge_Cur_Flag=(int)((((data[0] >> can.BMS_FAULT_2_BATTERY_DERATE_CHARGE_CUR_FLAG_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BATTERY_DERATE_CHARGE_CUR_FLAG_OFFSET);messages.Battery_Inhibit_regen_Fault=(int)((((data[0] >> can.BMS_FAULT_2_BATTERY_INHIBIT_REGEN_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BATTERY_INHIBIT_REGEN_FAULT_OFFSET);messages.Battery_Volt_Deviation_Error=(int)(((data[1] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BATTERY_VOLT_DEVIATION_ERROR_OFFSET);messages.BMS_Batt_PackTemp_1_OutofRange=(int)((((data[1] >> can.BMS_FAULT_2_BMS_BATT_PACKTEMP_1_OUTOFRANGE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_1_OUTOFRANGE_OFFSET);messages.BMS_Batt_PackTemp_2_OutofRange=(int)((((data[1] >> can.BMS_FAULT_2_BMS_BATT_PACKTEMP_2_OUTOFRANGE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_2_OUTOFRANGE_OFFSET);messages.BMS_Batt_PackTemp_3_OutofRange=(int)((((data[1] >> can.BMS_FAULT_2_BMS_BATT_PACKTEMP_3_OUTOFRANGE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_3_OUTOFRANGE_OFFSET);messages.BMS_Batt_PackTemp_4_OutofRange=(int)((((data[1] >> can.BMS_FAULT_2_BMS_BATT_PACKTEMP_4_OUTOFRANGE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_4_OUTOFRANGE_OFFSET);messages.BMS_Batt_PackTemp_5_OutofRange=(int)((((data[1] >> can.BMS_FAULT_2_BMS_BATT_PACKTEMP_5_OUTOFRANGE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_5_OUTOFRANGE_OFFSET);messages.BMS_Batt_PackTemp_6_OutofRange=(int)((((data[1] >> can.BMS_FAULT_2_BMS_BATT_PACKTEMP_6_OUTOFRANGE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_6_OUTOFRANGE_OFFSET);messages.BMS_Curr_Sens_Failure_OpenCir=(int)((((data[1] >> can.BMS_FAULT_2_BMS_CURR_SENS_FAILURE_OPENCIR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_CURR_SENS_FAILURE_OPENCIR_OFFSET);messages.BMS_Curr_Sens_Failure_ShortCir=(int)(((data[2] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_CURR_SENS_FAILURE_SHORTCIR_OFFSET);messages.BMS_OverCurrCharge_Warn=(int)((((data[2] >> can.BMS_FAULT_2_BMS_OVERCURRCHARGE_WARN_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVERCURRCHARGE_WARN_OFFSET);messages.BMS_OverCurrCharge_Error=(int)((((data[2] >> can.BMS_FAULT_2_BMS_OVERCURRCHARGE_ERROR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVERCURRCHARGE_ERROR_OFFSET);messages.BMS_PreChargeTooFast_Info=(int)((((data[2] >> can.BMS_FAULT_2_BMS_PRECHARGETOOFAST_INFO_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_PRECHARGETOOFAST_INFO_OFFSET);messages.BMS_PreChargeTooSlow_Info=(int)((((data[2] >> can.BMS_FAULT_2_BMS_PRECHARGETOOSLOW_INFO_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_PRECHARGETOOSLOW_INFO_OFFSET);messages.BMS_PreChargeFailure=(int)((((data[2] >> can.BMS_FAULT_2_BMS_PRECHARGEFAILURE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_PRECHARGEFAILURE_OFFSET);messages.BMS_MOSFETsConnFailed=(int)((((data[2] >> can.BMS_FAULT_2_BMS_MOSFETSCONNFAILED_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_MOSFETSCONNFAILED_OFFSET);messages.BMS_MOSFETsDisconnFailed=(int)((((data[2] >> can.BMS_FAULT_2_BMS_MOSFETSDISCONNFAILED_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_MOSFETSDISCONNFAILED_OFFSET);messages.BMS_PDU_TempWarn_Info=(int)(((data[3] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_PDU_TEMPWARN_INFO_OFFSET);messages.BMS_PDU_Temp_Error=(int)((((data[3] >> can.BMS_FAULT_2_BMS_PDU_TEMP_ERROR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_PDU_TEMP_ERROR_OFFSET);messages.BMS_OverVChargeWarnInfo=(int)((((data[3] >> can.BMS_FAULT_2_BMS_OVERVCHARGEWARNINFO_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVERVCHARGEWARNINFO_OFFSET);messages.BMS_OverVChargeError=(int)((((data[3] >> can.BMS_FAULT_2_BMS_OVERVCHARGEERROR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVERVCHARGEERROR_OFFSET);messages.BMS_OverVChar_Perm_Fault=(int)((((data[3] >> can.BMS_FAULT_2_BMS_OVERVCHAR_PERM_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVERVCHAR_PERM_FAULT_OFFSET);messages.BMS_OverV_Regen_Warn_Info=(int)((((data[3] >> can.BMS_FAULT_2_BMS_OVERV_REGEN_WARN_INFO_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVERV_REGEN_WARN_INFO_OFFSET);messages.BMS_OverV_Regen_Error=(int)((((data[3] >> can.BMS_FAULT_2_BMS_OVERV_REGEN_ERROR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVERV_REGEN_ERROR_OFFSET);messages.BMS_UndV_Warn_Info=(int)((((data[3] >> can.BMS_FAULT_2_BMS_UNDV_WARN_INFO_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_UNDV_WARN_INFO_OFFSET);messages.BMS_UndV_Error=(int)(((data[4] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_UNDV_ERROR_OFFSET);messages.BMS_UndV_Perm_fault=(int)((((data[4] >> can.BMS_FAULT_2_BMS_UNDV_PERM_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_UNDV_PERM_FAULT_OFFSET);messages.BMS_OverTempCharWarnInfo=(int)((((data[4] >> can.BMS_FAULT_2_BMS_OVERTEMPCHARWARNINFO_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVERTEMPCHARWARNINFO_OFFSET);messages.BMS_OverTempCharError=(int)((((data[4] >> can.BMS_FAULT_2_BMS_OVERTEMPCHARERROR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVERTEMPCHARERROR_OFFSET);messages.BMS_OverTempDriveWarnInfo=(int)((((data[4] >> can.BMS_FAULT_2_BMS_OVERTEMPDRIVEWARNINFO_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVERTEMPDRIVEWARNINFO_OFFSET);messages.BMS_OverTempDriveError=(int)((((data[4] >> can.BMS_FAULT_2_BMS_OVERTEMPDRIVEERROR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVERTEMPDRIVEERROR_OFFSET);messages.BMS_OvTemp_CellVentError=(int)((((data[4] >> can.BMS_FAULT_2_BMS_OVTEMP_CELLVENTERROR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVTEMP_CELLVENTERROR_OFFSET);messages.BMS_OvTemp_CellVentFailure=(int)((((data[4] >> can.BMS_FAULT_2_BMS_OVTEMP_CELLVENTFAILURE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_OVTEMP_CELLVENTFAILURE_OFFSET);messages.BMS_ShortCir_DetectError=(int)(((data[5] & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_SHORTCIR_DETECTERROR_OFFSET);messages.BMS_ShortCir_Detect_PermFault=(int)((((data[5] >> can.BMS_FAULT_2_BMS_SHORTCIR_DETECT_PERMFAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_SHORTCIR_DETECT_PERMFAULT_OFFSET);messages.BMS_Cell_Failure_PermFault=(int)((((data[5] >> can.BMS_FAULT_2_BMS_CELL_FAILURE_PERMFAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_CELL_FAILURE_PERMFAULT_OFFSET);messages.BMS_ParaCell_DisconFault=(int)((((data[5] >> can.BMS_FAULT_2_BMS_PARACELL_DISCONFAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_PARACELL_DISCONFAULT_OFFSET);messages.BMS_LowTemp_CharWarnInfo=(int)((((data[5] >> can.BMS_FAULT_2_BMS_LOWTEMP_CHARWARNINFO_MASK0) & (can.SIGNLE_READ_Mask1))) + can.BMS_FAULT_2_CANID_BMS_LOWTEMP_CHARWARNINFO_OFFSET);
  return can.BMS_FAULT_2_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_Fault_2( CanConverter.BMS_Fault_2_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_LowTempCharge_Error=(int) (messages.BMS_LowTempCharge_Error - can.BMS_FAULT_2_CANID_BMS_LOWTEMPCHARGE_ERROR_OFFSET);
messages.BMS_LowTempDrive_Warning=(int) (messages.BMS_LowTempDrive_Warning - can.BMS_FAULT_2_CANID_BMS_LOWTEMPDRIVE_WARNING_OFFSET);
messages.BMS_LowTempDrive_Error=(int) (messages.BMS_LowTempDrive_Error - can.BMS_FAULT_2_CANID_BMS_LOWTEMPDRIVE_ERROR_OFFSET);
messages.OverTimetoFastCharge_Error=(int) (messages.OverTimetoFastCharge_Error - can.BMS_FAULT_2_CANID_OVERTIMETOFASTCHARGE_ERROR_OFFSET);
messages.Battery_Discharge_Inhibit=(int) (messages.Battery_Discharge_Inhibit - can.BMS_FAULT_2_CANID_BATTERY_DISCHARGE_INHIBIT_OFFSET);
messages.Battery_Derate_Drive_Cur_Flag=(int) (messages.Battery_Derate_Drive_Cur_Flag - can.BMS_FAULT_2_CANID_BATTERY_DERATE_DRIVE_CUR_FLAG_OFFSET);
messages.Battery_Derate_Charge_Cur_Flag=(int) (messages.Battery_Derate_Charge_Cur_Flag - can.BMS_FAULT_2_CANID_BATTERY_DERATE_CHARGE_CUR_FLAG_OFFSET);
messages.Battery_Inhibit_regen_Fault=(int) (messages.Battery_Inhibit_regen_Fault - can.BMS_FAULT_2_CANID_BATTERY_INHIBIT_REGEN_FAULT_OFFSET);
messages.Battery_Volt_Deviation_Error=(int) (messages.Battery_Volt_Deviation_Error - can.BMS_FAULT_2_CANID_BATTERY_VOLT_DEVIATION_ERROR_OFFSET);
messages.BMS_Batt_PackTemp_1_OutofRange=(int) (messages.BMS_Batt_PackTemp_1_OutofRange - can.BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_1_OUTOFRANGE_OFFSET);
messages.BMS_Batt_PackTemp_2_OutofRange=(int) (messages.BMS_Batt_PackTemp_2_OutofRange - can.BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_2_OUTOFRANGE_OFFSET);
messages.BMS_Batt_PackTemp_3_OutofRange=(int) (messages.BMS_Batt_PackTemp_3_OutofRange - can.BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_3_OUTOFRANGE_OFFSET);
messages.BMS_Batt_PackTemp_4_OutofRange=(int) (messages.BMS_Batt_PackTemp_4_OutofRange - can.BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_4_OUTOFRANGE_OFFSET);
messages.BMS_Batt_PackTemp_5_OutofRange=(int) (messages.BMS_Batt_PackTemp_5_OutofRange - can.BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_5_OUTOFRANGE_OFFSET);
messages.BMS_Batt_PackTemp_6_OutofRange=(int) (messages.BMS_Batt_PackTemp_6_OutofRange - can.BMS_FAULT_2_CANID_BMS_BATT_PACKTEMP_6_OUTOFRANGE_OFFSET);
messages.BMS_Curr_Sens_Failure_OpenCir=(int) (messages.BMS_Curr_Sens_Failure_OpenCir - can.BMS_FAULT_2_CANID_BMS_CURR_SENS_FAILURE_OPENCIR_OFFSET);
messages.BMS_Curr_Sens_Failure_ShortCir=(int) (messages.BMS_Curr_Sens_Failure_ShortCir - can.BMS_FAULT_2_CANID_BMS_CURR_SENS_FAILURE_SHORTCIR_OFFSET);
messages.BMS_OverCurrCharge_Warn=(int) (messages.BMS_OverCurrCharge_Warn - can.BMS_FAULT_2_CANID_BMS_OVERCURRCHARGE_WARN_OFFSET);
messages.BMS_OverCurrCharge_Error=(int) (messages.BMS_OverCurrCharge_Error - can.BMS_FAULT_2_CANID_BMS_OVERCURRCHARGE_ERROR_OFFSET);
messages.BMS_PreChargeTooFast_Info=(int) (messages.BMS_PreChargeTooFast_Info - can.BMS_FAULT_2_CANID_BMS_PRECHARGETOOFAST_INFO_OFFSET);
messages.BMS_PreChargeTooSlow_Info=(int) (messages.BMS_PreChargeTooSlow_Info - can.BMS_FAULT_2_CANID_BMS_PRECHARGETOOSLOW_INFO_OFFSET);
messages.BMS_PreChargeFailure=(int) (messages.BMS_PreChargeFailure - can.BMS_FAULT_2_CANID_BMS_PRECHARGEFAILURE_OFFSET);
messages.BMS_MOSFETsConnFailed=(int) (messages.BMS_MOSFETsConnFailed - can.BMS_FAULT_2_CANID_BMS_MOSFETSCONNFAILED_OFFSET);
messages.BMS_MOSFETsDisconnFailed=(int) (messages.BMS_MOSFETsDisconnFailed - can.BMS_FAULT_2_CANID_BMS_MOSFETSDISCONNFAILED_OFFSET);
messages.BMS_PDU_TempWarn_Info=(int) (messages.BMS_PDU_TempWarn_Info - can.BMS_FAULT_2_CANID_BMS_PDU_TEMPWARN_INFO_OFFSET);
messages.BMS_PDU_Temp_Error=(int) (messages.BMS_PDU_Temp_Error - can.BMS_FAULT_2_CANID_BMS_PDU_TEMP_ERROR_OFFSET);
messages.BMS_OverVChargeWarnInfo=(int) (messages.BMS_OverVChargeWarnInfo - can.BMS_FAULT_2_CANID_BMS_OVERVCHARGEWARNINFO_OFFSET);
messages.BMS_OverVChargeError=(int) (messages.BMS_OverVChargeError - can.BMS_FAULT_2_CANID_BMS_OVERVCHARGEERROR_OFFSET);
messages.BMS_OverVChar_Perm_Fault=(int) (messages.BMS_OverVChar_Perm_Fault - can.BMS_FAULT_2_CANID_BMS_OVERVCHAR_PERM_FAULT_OFFSET);
messages.BMS_OverV_Regen_Warn_Info=(int) (messages.BMS_OverV_Regen_Warn_Info - can.BMS_FAULT_2_CANID_BMS_OVERV_REGEN_WARN_INFO_OFFSET);
messages.BMS_OverV_Regen_Error=(int) (messages.BMS_OverV_Regen_Error - can.BMS_FAULT_2_CANID_BMS_OVERV_REGEN_ERROR_OFFSET);
messages.BMS_UndV_Warn_Info=(int) (messages.BMS_UndV_Warn_Info - can.BMS_FAULT_2_CANID_BMS_UNDV_WARN_INFO_OFFSET);
messages.BMS_UndV_Error=(int) (messages.BMS_UndV_Error - can.BMS_FAULT_2_CANID_BMS_UNDV_ERROR_OFFSET);
messages.BMS_UndV_Perm_fault=(int) (messages.BMS_UndV_Perm_fault - can.BMS_FAULT_2_CANID_BMS_UNDV_PERM_FAULT_OFFSET);
messages.BMS_OverTempCharWarnInfo=(int) (messages.BMS_OverTempCharWarnInfo - can.BMS_FAULT_2_CANID_BMS_OVERTEMPCHARWARNINFO_OFFSET);
messages.BMS_OverTempCharError=(int) (messages.BMS_OverTempCharError - can.BMS_FAULT_2_CANID_BMS_OVERTEMPCHARERROR_OFFSET);
messages.BMS_OverTempDriveWarnInfo=(int) (messages.BMS_OverTempDriveWarnInfo - can.BMS_FAULT_2_CANID_BMS_OVERTEMPDRIVEWARNINFO_OFFSET);
messages.BMS_OverTempDriveError=(int) (messages.BMS_OverTempDriveError - can.BMS_FAULT_2_CANID_BMS_OVERTEMPDRIVEERROR_OFFSET);
messages.BMS_OvTemp_CellVentError=(int) (messages.BMS_OvTemp_CellVentError - can.BMS_FAULT_2_CANID_BMS_OVTEMP_CELLVENTERROR_OFFSET);
messages.BMS_OvTemp_CellVentFailure=(int) (messages.BMS_OvTemp_CellVentFailure - can.BMS_FAULT_2_CANID_BMS_OVTEMP_CELLVENTFAILURE_OFFSET);
messages.BMS_ShortCir_DetectError=(int) (messages.BMS_ShortCir_DetectError - can.BMS_FAULT_2_CANID_BMS_SHORTCIR_DETECTERROR_OFFSET);
messages.BMS_ShortCir_Detect_PermFault=(int) (messages.BMS_ShortCir_Detect_PermFault - can.BMS_FAULT_2_CANID_BMS_SHORTCIR_DETECT_PERMFAULT_OFFSET);
messages.BMS_Cell_Failure_PermFault=(int) (messages.BMS_Cell_Failure_PermFault - can.BMS_FAULT_2_CANID_BMS_CELL_FAILURE_PERMFAULT_OFFSET);
messages.BMS_ParaCell_DisconFault=(int) (messages.BMS_ParaCell_DisconFault - can.BMS_FAULT_2_CANID_BMS_PARACELL_DISCONFAULT_OFFSET);
messages.BMS_LowTemp_CharWarnInfo=(int) (messages.BMS_LowTemp_CharWarnInfo - can.BMS_FAULT_2_CANID_BMS_LOWTEMP_CHARWARNINFO_OFFSET);
 data[0] = (byte)((messages.BMS_LowTempCharge_Error & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_LowTempDrive_Warning & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_LOWTEMPDRIVE_WARNING_MASK0) | ((messages.BMS_LowTempDrive_Error & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_LOWTEMPDRIVE_ERROR_MASK0) | ((messages.OverTimetoFastCharge_Error & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_OVERTIMETOFASTCHARGE_ERROR_MASK0) | ((messages.Battery_Discharge_Inhibit & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BATTERY_DISCHARGE_INHIBIT_MASK0) | ((messages.Battery_Derate_Drive_Cur_Flag & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BATTERY_DERATE_DRIVE_CUR_FLAG_MASK0) | ((messages.Battery_Derate_Charge_Cur_Flag & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BATTERY_DERATE_CHARGE_CUR_FLAG_MASK0) | ((messages.Battery_Inhibit_regen_Fault & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BATTERY_INHIBIT_REGEN_FAULT_MASK0));
 data[1] = (byte)((messages.Battery_Volt_Deviation_Error & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_Batt_PackTemp_1_OutofRange & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_BATT_PACKTEMP_1_OUTOFRANGE_MASK0) | ((messages.BMS_Batt_PackTemp_2_OutofRange & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_BATT_PACKTEMP_2_OUTOFRANGE_MASK0) | ((messages.BMS_Batt_PackTemp_3_OutofRange & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_BATT_PACKTEMP_3_OUTOFRANGE_MASK0) | ((messages.BMS_Batt_PackTemp_4_OutofRange & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_BATT_PACKTEMP_4_OUTOFRANGE_MASK0) | ((messages.BMS_Batt_PackTemp_5_OutofRange & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_BATT_PACKTEMP_5_OUTOFRANGE_MASK0) | ((messages.BMS_Batt_PackTemp_6_OutofRange & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_BATT_PACKTEMP_6_OUTOFRANGE_MASK0) | ((messages.BMS_Curr_Sens_Failure_OpenCir & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_CURR_SENS_FAILURE_OPENCIR_MASK0));
 data[2] = (byte)((messages.BMS_Curr_Sens_Failure_ShortCir & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_OverCurrCharge_Warn & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVERCURRCHARGE_WARN_MASK0) | ((messages.BMS_OverCurrCharge_Error & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVERCURRCHARGE_ERROR_MASK0) | ((messages.BMS_PreChargeTooFast_Info & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_PRECHARGETOOFAST_INFO_MASK0) | ((messages.BMS_PreChargeTooSlow_Info & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_PRECHARGETOOSLOW_INFO_MASK0) | ((messages.BMS_PreChargeFailure & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_PRECHARGEFAILURE_MASK0) | ((messages.BMS_MOSFETsConnFailed & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_MOSFETSCONNFAILED_MASK0) | ((messages.BMS_MOSFETsDisconnFailed & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_MOSFETSDISCONNFAILED_MASK0));
 data[3] = (byte)((messages.BMS_PDU_TempWarn_Info & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_PDU_Temp_Error & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_PDU_TEMP_ERROR_MASK0) | ((messages.BMS_OverVChargeWarnInfo & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVERVCHARGEWARNINFO_MASK0) | ((messages.BMS_OverVChargeError & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVERVCHARGEERROR_MASK0) | ((messages.BMS_OverVChar_Perm_Fault & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVERVCHAR_PERM_FAULT_MASK0) | ((messages.BMS_OverV_Regen_Warn_Info & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVERV_REGEN_WARN_INFO_MASK0) | ((messages.BMS_OverV_Regen_Error & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVERV_REGEN_ERROR_MASK0) | ((messages.BMS_UndV_Warn_Info & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_UNDV_WARN_INFO_MASK0));
 data[4] = (byte)((messages.BMS_UndV_Error & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_UndV_Perm_fault & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_UNDV_PERM_FAULT_MASK0) | ((messages.BMS_OverTempCharWarnInfo & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVERTEMPCHARWARNINFO_MASK0) | ((messages.BMS_OverTempCharError & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVERTEMPCHARERROR_MASK0) | ((messages.BMS_OverTempDriveWarnInfo & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVERTEMPDRIVEWARNINFO_MASK0) | ((messages.BMS_OverTempDriveError & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVERTEMPDRIVEERROR_MASK0) | ((messages.BMS_OvTemp_CellVentError & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVTEMP_CELLVENTERROR_MASK0) | ((messages.BMS_OvTemp_CellVentFailure & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_OVTEMP_CELLVENTFAILURE_MASK0));
 data[5] = (byte)((messages.BMS_ShortCir_DetectError & ( can.SIGNLE_READ_Mask1)) | ((messages.BMS_ShortCir_Detect_PermFault & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_SHORTCIR_DETECT_PERMFAULT_MASK0) | ((messages.BMS_Cell_Failure_PermFault & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_CELL_FAILURE_PERMFAULT_MASK0) | ((messages.BMS_ParaCell_DisconFault & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_PARACELL_DISCONFAULT_MASK0) | ((messages.BMS_LowTemp_CharWarnInfo & ( can.SIGNLE_READ_Mask1)) << can.BMS_FAULT_2_BMS_LOWTEMP_CHARWARNINFO_MASK0));
  return can.BMS_FAULT_2_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ESCL_Data( CanConverter.ESCL_Data_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ESCL_Supply_Voltage=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DATA_ESCL_SUPPLY_VOLTAGE_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.ESCL_DATA_CANID_ESCL_SUPPLY_VOLTAGE_OFFSET);messages.Motor_Stall_Current=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DATA_MOTOR_STALL_CURRENT_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.ESCL_DATA_CANID_MOTOR_STALL_CURRENT_OFFSET);messages.ESCL_Status=(int)(((data[4] & (can.SIGNLE_READ_Mask3))) + can.ESCL_DATA_CANID_ESCL_STATUS_OFFSET);messages.ESCL_Hall1_Status=(int)((((data[4] >> can.ESCL_DATA_ESCL_HALL1_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ESCL_DATA_CANID_ESCL_HALL1_STATUS_OFFSET);messages.ESCL_Hall2_Status=(int)((((data[4] >> can.ESCL_DATA_ESCL_HALL2_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ESCL_DATA_CANID_ESCL_HALL2_STATUS_OFFSET);messages.ESCL_Power_Status=(int)((((data[4] >> can.ESCL_DATA_ESCL_POWER_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ESCL_DATA_CANID_ESCL_POWER_STATUS_OFFSET);messages.ESCL_Plunger_Status=(int)((((data[4] >> can.ESCL_DATA_ESCL_PLUNGER_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ESCL_DATA_CANID_ESCL_PLUNGER_STATUS_OFFSET);messages.ESCL_Motor_Temp_Fault=(int)((((data[4] >> can.ESCL_DATA_ESCL_MOTOR_TEMP_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ESCL_DATA_CANID_ESCL_MOTOR_TEMP_FAULT_OFFSET);messages.ESCL_Motor_Open_Fault=(int)(((data[5] & (can.SIGNLE_READ_Mask1))) + can.ESCL_DATA_CANID_ESCL_MOTOR_OPEN_FAULT_OFFSET);messages.ESCL_Motor_Short_Fault=(int)((((data[5] >> can.ESCL_DATA_ESCL_MOTOR_SHORT_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ESCL_DATA_CANID_ESCL_MOTOR_SHORT_FAULT_OFFSET);messages.ESCL_Lock_Unlock_Error=(int)((((data[5] >> can.ESCL_DATA_ESCL_LOCK_UNLOCK_ERROR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ESCL_DATA_CANID_ESCL_LOCK_UNLOCK_ERROR_OFFSET);messages.ESCL_Sleep_Ack=(int)((((data[5] >> can.ESCL_DATA_ESCL_SLEEP_ACK_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ESCL_DATA_CANID_ESCL_SLEEP_ACK_OFFSET);
  return can.ESCL_DATA_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ESCL_Data( CanConverter.ESCL_Data_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ESCL_Supply_Voltage=(int) (messages.ESCL_Supply_Voltage - can.ESCL_DATA_CANID_ESCL_SUPPLY_VOLTAGE_OFFSET);
messages.Motor_Stall_Current=(int) (messages.Motor_Stall_Current - can.ESCL_DATA_CANID_MOTOR_STALL_CURRENT_OFFSET);
messages.ESCL_Status=(int) (messages.ESCL_Status - can.ESCL_DATA_CANID_ESCL_STATUS_OFFSET);
messages.ESCL_Hall1_Status=(int) (messages.ESCL_Hall1_Status - can.ESCL_DATA_CANID_ESCL_HALL1_STATUS_OFFSET);
messages.ESCL_Hall2_Status=(int) (messages.ESCL_Hall2_Status - can.ESCL_DATA_CANID_ESCL_HALL2_STATUS_OFFSET);
messages.ESCL_Power_Status=(int) (messages.ESCL_Power_Status - can.ESCL_DATA_CANID_ESCL_POWER_STATUS_OFFSET);
messages.ESCL_Plunger_Status=(int) (messages.ESCL_Plunger_Status - can.ESCL_DATA_CANID_ESCL_PLUNGER_STATUS_OFFSET);
messages.ESCL_Motor_Temp_Fault=(int) (messages.ESCL_Motor_Temp_Fault - can.ESCL_DATA_CANID_ESCL_MOTOR_TEMP_FAULT_OFFSET);
messages.ESCL_Motor_Open_Fault=(int) (messages.ESCL_Motor_Open_Fault - can.ESCL_DATA_CANID_ESCL_MOTOR_OPEN_FAULT_OFFSET);
messages.ESCL_Motor_Short_Fault=(int) (messages.ESCL_Motor_Short_Fault - can.ESCL_DATA_CANID_ESCL_MOTOR_SHORT_FAULT_OFFSET);
messages.ESCL_Lock_Unlock_Error=(int) (messages.ESCL_Lock_Unlock_Error - can.ESCL_DATA_CANID_ESCL_LOCK_UNLOCK_ERROR_OFFSET);
messages.ESCL_Sleep_Ack=(int) (messages.ESCL_Sleep_Ack - can.ESCL_DATA_CANID_ESCL_SLEEP_ACK_OFFSET);
 data[0] = (byte)((messages.ESCL_Supply_Voltage & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.ESCL_Supply_Voltage >> can.ESCL_DATA_ESCL_SUPPLY_VOLTAGE_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Motor_Stall_Current & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Motor_Stall_Current >> can.ESCL_DATA_MOTOR_STALL_CURRENT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.ESCL_Status & ( can.SIGNLE_READ_Mask3)) | ((messages.ESCL_Hall1_Status & ( can.SIGNLE_READ_Mask1)) << can.ESCL_DATA_ESCL_HALL1_STATUS_MASK0) | ((messages.ESCL_Hall2_Status & ( can.SIGNLE_READ_Mask1)) << can.ESCL_DATA_ESCL_HALL2_STATUS_MASK0) | ((messages.ESCL_Power_Status & ( can.SIGNLE_READ_Mask1)) << can.ESCL_DATA_ESCL_POWER_STATUS_MASK0) | ((messages.ESCL_Plunger_Status & ( can.SIGNLE_READ_Mask1)) << can.ESCL_DATA_ESCL_PLUNGER_STATUS_MASK0) | ((messages.ESCL_Motor_Temp_Fault & ( can.SIGNLE_READ_Mask1)) << can.ESCL_DATA_ESCL_MOTOR_TEMP_FAULT_MASK0));
 data[5] = (byte)((messages.ESCL_Motor_Open_Fault & ( can.SIGNLE_READ_Mask1)) | ((messages.ESCL_Motor_Short_Fault & ( can.SIGNLE_READ_Mask1)) << can.ESCL_DATA_ESCL_MOTOR_SHORT_FAULT_MASK0) | ((messages.ESCL_Lock_Unlock_Error & ( can.SIGNLE_READ_Mask1)) << can.ESCL_DATA_ESCL_LOCK_UNLOCK_ERROR_MASK0) | ((messages.ESCL_Sleep_Ack & ( can.SIGNLE_READ_Mask1)) << can.ESCL_DATA_ESCL_SLEEP_ACK_MASK0));
  return can.ESCL_DATA_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Charger_Fault_Info( CanConverter.Charger_Fault_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_IP_AC_overVoltage=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_IP_AC_OVERVOLTAGE_OFFSET);messages.OBC_IP_AC_UnderV=(int)((((data[0] >> can.CHARGER_FAULT_INFO_OBC_IP_AC_UNDERV_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_IP_AC_UNDERV_OFFSET);messages.OBC_IP_Overcurrent=(int)((((data[0] >> can.CHARGER_FAULT_INFO_OBC_IP_OVERCURRENT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_IP_OVERCURRENT_OFFSET);messages.OBC_OP_Overcurrent=(int)((((data[0] >> can.CHARGER_FAULT_INFO_OBC_OP_OVERCURRENT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_OP_OVERCURRENT_OFFSET);messages.OBC_High_temp=(int)((((data[0] >> can.CHARGER_FAULT_INFO_OBC_HIGH_TEMP_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_HIGH_TEMP_OFFSET);messages.OBC_Low_temp=(int)((((data[0] >> can.CHARGER_FAULT_INFO_OBC_LOW_TEMP_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_LOW_TEMP_OFFSET);messages.OBC_Temp_Sensor_fail=(int)((((data[0] >> can.CHARGER_FAULT_INFO_OBC_TEMP_SENSOR_FAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_TEMP_SENSOR_FAIL_OFFSET);messages.OBC_Current_Sensor_fail=(int)((((data[0] >> can.CHARGER_FAULT_INFO_OBC_CURRENT_SENSOR_FAIL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_CURRENT_SENSOR_FAIL_OFFSET);messages.OBC_ContactorRelay_fail=(int)(((data[1] & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_CONTACTORRELAY_FAIL_OFFSET);messages.OBC_OP_Open_Circuit=(int)((((data[1] >> can.CHARGER_FAULT_INFO_OBC_OP_OPEN_CIRCUIT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_OP_OPEN_CIRCUIT_OFFSET);messages.OBC_OP_Short_Circuit=(int)((((data[1] >> can.CHARGER_FAULT_INFO_OBC_OP_SHORT_CIRCUIT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_OP_SHORT_CIRCUIT_OFFSET);messages.OBC_OP_Over_Vol_flt=(int)((((data[1] >> can.CHARGER_FAULT_INFO_OBC_OP_OVER_VOL_FLT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_OP_OVER_VOL_FLT_OFFSET);messages.OBC_OP_Under_Vol_flt=(int)((((data[1] >> can.CHARGER_FAULT_INFO_OBC_OP_UNDER_VOL_FLT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_OBC_OP_UNDER_VOL_FLT_OFFSET);messages.DCDC_OP_Over_Vol_flt=(int)((((data[1] >> can.CHARGER_FAULT_INFO_DCDC_OP_OVER_VOL_FLT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_OP_OVER_VOL_FLT_OFFSET);messages.DCDC_IP_Over_Voltage=(int)((((data[1] >> can.CHARGER_FAULT_INFO_DCDC_IP_OVER_VOLTAGE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_IP_OVER_VOLTAGE_OFFSET);messages.DCDC_IP_Under_Voltage=(int)((((data[1] >> can.CHARGER_FAULT_INFO_DCDC_IP_UNDER_VOLTAGE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_IP_UNDER_VOLTAGE_OFFSET);messages.DCDC_IP_Over_Current=(int)(((data[2] & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_IP_OVER_CURRENT_OFFSET);messages.DCDC_OP_Over_Current=(int)((((data[2] >> can.CHARGER_FAULT_INFO_DCDC_OP_OVER_CURRENT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_OP_OVER_CURRENT_OFFSET);messages.DCDC_High_Temp=(int)((((data[2] >> can.CHARGER_FAULT_INFO_DCDC_HIGH_TEMP_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_HIGH_TEMP_OFFSET);messages.DCDC_Low_Temp=(int)((((data[2] >> can.CHARGER_FAULT_INFO_DCDC_LOW_TEMP_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_LOW_TEMP_OFFSET);messages.DCDC_TempSensor_Failure=(int)((((data[2] >> can.CHARGER_FAULT_INFO_DCDC_TEMPSENSOR_FAILURE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_TEMPSENSOR_FAILURE_OFFSET);messages.DCDC_Current_Sensor_Failure=(int)((((data[2] >> can.CHARGER_FAULT_INFO_DCDC_CURRENT_SENSOR_FAILURE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_CURRENT_SENSOR_FAILURE_OFFSET);messages.DCDC_Contactor_or_Relay_Failure=(int)((((data[2] >> can.CHARGER_FAULT_INFO_DCDC_CONTACTOR_OR_RELAY_FAILURE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_CONTACTOR_OR_RELAY_FAILURE_OFFSET);messages.DCDC_OP_Open_Circuit=(int)((((data[2] >> can.CHARGER_FAULT_INFO_DCDC_OP_OPEN_CIRCUIT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_OP_OPEN_CIRCUIT_OFFSET);messages.DCDC_OP_Short_Circuit=(int)(((data[3] & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_OP_SHORT_CIRCUIT_OFFSET);messages.DCDC_OP_Under_Vol_flt=(int)((((data[3] >> can.CHARGER_FAULT_INFO_DCDC_OP_UNDER_VOL_FLT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.CHARGER_FAULT_INFO_CANID_DCDC_OP_UNDER_VOL_FLT_OFFSET);
  return can.CHARGER_FAULT_INFO_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Charger_Fault_Info( CanConverter.Charger_Fault_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_IP_AC_overVoltage=(int) (messages.OBC_IP_AC_overVoltage - can.CHARGER_FAULT_INFO_CANID_OBC_IP_AC_OVERVOLTAGE_OFFSET);
messages.OBC_IP_AC_UnderV=(int) (messages.OBC_IP_AC_UnderV - can.CHARGER_FAULT_INFO_CANID_OBC_IP_AC_UNDERV_OFFSET);
messages.OBC_IP_Overcurrent=(int) (messages.OBC_IP_Overcurrent - can.CHARGER_FAULT_INFO_CANID_OBC_IP_OVERCURRENT_OFFSET);
messages.OBC_OP_Overcurrent=(int) (messages.OBC_OP_Overcurrent - can.CHARGER_FAULT_INFO_CANID_OBC_OP_OVERCURRENT_OFFSET);
messages.OBC_High_temp=(int) (messages.OBC_High_temp - can.CHARGER_FAULT_INFO_CANID_OBC_HIGH_TEMP_OFFSET);
messages.OBC_Low_temp=(int) (messages.OBC_Low_temp - can.CHARGER_FAULT_INFO_CANID_OBC_LOW_TEMP_OFFSET);
messages.OBC_Temp_Sensor_fail=(int) (messages.OBC_Temp_Sensor_fail - can.CHARGER_FAULT_INFO_CANID_OBC_TEMP_SENSOR_FAIL_OFFSET);
messages.OBC_Current_Sensor_fail=(int) (messages.OBC_Current_Sensor_fail - can.CHARGER_FAULT_INFO_CANID_OBC_CURRENT_SENSOR_FAIL_OFFSET);
messages.OBC_ContactorRelay_fail=(int) (messages.OBC_ContactorRelay_fail - can.CHARGER_FAULT_INFO_CANID_OBC_CONTACTORRELAY_FAIL_OFFSET);
messages.OBC_OP_Open_Circuit=(int) (messages.OBC_OP_Open_Circuit - can.CHARGER_FAULT_INFO_CANID_OBC_OP_OPEN_CIRCUIT_OFFSET);
messages.OBC_OP_Short_Circuit=(int) (messages.OBC_OP_Short_Circuit - can.CHARGER_FAULT_INFO_CANID_OBC_OP_SHORT_CIRCUIT_OFFSET);
messages.OBC_OP_Over_Vol_flt=(int) (messages.OBC_OP_Over_Vol_flt - can.CHARGER_FAULT_INFO_CANID_OBC_OP_OVER_VOL_FLT_OFFSET);
messages.OBC_OP_Under_Vol_flt=(int) (messages.OBC_OP_Under_Vol_flt - can.CHARGER_FAULT_INFO_CANID_OBC_OP_UNDER_VOL_FLT_OFFSET);
messages.DCDC_OP_Over_Vol_flt=(int) (messages.DCDC_OP_Over_Vol_flt - can.CHARGER_FAULT_INFO_CANID_DCDC_OP_OVER_VOL_FLT_OFFSET);
messages.DCDC_IP_Over_Voltage=(int) (messages.DCDC_IP_Over_Voltage - can.CHARGER_FAULT_INFO_CANID_DCDC_IP_OVER_VOLTAGE_OFFSET);
messages.DCDC_IP_Under_Voltage=(int) (messages.DCDC_IP_Under_Voltage - can.CHARGER_FAULT_INFO_CANID_DCDC_IP_UNDER_VOLTAGE_OFFSET);
messages.DCDC_IP_Over_Current=(int) (messages.DCDC_IP_Over_Current - can.CHARGER_FAULT_INFO_CANID_DCDC_IP_OVER_CURRENT_OFFSET);
messages.DCDC_OP_Over_Current=(int) (messages.DCDC_OP_Over_Current - can.CHARGER_FAULT_INFO_CANID_DCDC_OP_OVER_CURRENT_OFFSET);
messages.DCDC_High_Temp=(int) (messages.DCDC_High_Temp - can.CHARGER_FAULT_INFO_CANID_DCDC_HIGH_TEMP_OFFSET);
messages.DCDC_Low_Temp=(int) (messages.DCDC_Low_Temp - can.CHARGER_FAULT_INFO_CANID_DCDC_LOW_TEMP_OFFSET);
messages.DCDC_TempSensor_Failure=(int) (messages.DCDC_TempSensor_Failure - can.CHARGER_FAULT_INFO_CANID_DCDC_TEMPSENSOR_FAILURE_OFFSET);
messages.DCDC_Current_Sensor_Failure=(int) (messages.DCDC_Current_Sensor_Failure - can.CHARGER_FAULT_INFO_CANID_DCDC_CURRENT_SENSOR_FAILURE_OFFSET);
messages.DCDC_Contactor_or_Relay_Failure=(int) (messages.DCDC_Contactor_or_Relay_Failure - can.CHARGER_FAULT_INFO_CANID_DCDC_CONTACTOR_OR_RELAY_FAILURE_OFFSET);
messages.DCDC_OP_Open_Circuit=(int) (messages.DCDC_OP_Open_Circuit - can.CHARGER_FAULT_INFO_CANID_DCDC_OP_OPEN_CIRCUIT_OFFSET);
messages.DCDC_OP_Short_Circuit=(int) (messages.DCDC_OP_Short_Circuit - can.CHARGER_FAULT_INFO_CANID_DCDC_OP_SHORT_CIRCUIT_OFFSET);
messages.DCDC_OP_Under_Vol_flt=(int) (messages.DCDC_OP_Under_Vol_flt - can.CHARGER_FAULT_INFO_CANID_DCDC_OP_UNDER_VOL_FLT_OFFSET);
 data[0] = (byte)((messages.OBC_IP_AC_overVoltage & ( can.SIGNLE_READ_Mask1)) | ((messages.OBC_IP_AC_UnderV & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_OBC_IP_AC_UNDERV_MASK0) | ((messages.OBC_IP_Overcurrent & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_OBC_IP_OVERCURRENT_MASK0) | ((messages.OBC_OP_Overcurrent & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_OBC_OP_OVERCURRENT_MASK0) | ((messages.OBC_High_temp & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_OBC_HIGH_TEMP_MASK0) | ((messages.OBC_Low_temp & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_OBC_LOW_TEMP_MASK0) | ((messages.OBC_Temp_Sensor_fail & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_OBC_TEMP_SENSOR_FAIL_MASK0) | ((messages.OBC_Current_Sensor_fail & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_OBC_CURRENT_SENSOR_FAIL_MASK0));
 data[1] = (byte)((messages.OBC_ContactorRelay_fail & ( can.SIGNLE_READ_Mask1)) | ((messages.OBC_OP_Open_Circuit & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_OBC_OP_OPEN_CIRCUIT_MASK0) | ((messages.OBC_OP_Short_Circuit & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_OBC_OP_SHORT_CIRCUIT_MASK0) | ((messages.OBC_OP_Over_Vol_flt & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_OBC_OP_OVER_VOL_FLT_MASK0) | ((messages.OBC_OP_Under_Vol_flt & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_OBC_OP_UNDER_VOL_FLT_MASK0) | ((messages.DCDC_OP_Over_Vol_flt & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_DCDC_OP_OVER_VOL_FLT_MASK0) | ((messages.DCDC_IP_Over_Voltage & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_DCDC_IP_OVER_VOLTAGE_MASK0) | ((messages.DCDC_IP_Under_Voltage & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_DCDC_IP_UNDER_VOLTAGE_MASK0));
 data[2] = (byte)((messages.DCDC_IP_Over_Current & ( can.SIGNLE_READ_Mask1)) | ((messages.DCDC_OP_Over_Current & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_DCDC_OP_OVER_CURRENT_MASK0) | ((messages.DCDC_High_Temp & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_DCDC_HIGH_TEMP_MASK0) | ((messages.DCDC_Low_Temp & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_DCDC_LOW_TEMP_MASK0) | ((messages.DCDC_TempSensor_Failure & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_DCDC_TEMPSENSOR_FAILURE_MASK0) | ((messages.DCDC_Current_Sensor_Failure & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_DCDC_CURRENT_SENSOR_FAILURE_MASK0) | ((messages.DCDC_Contactor_or_Relay_Failure & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_DCDC_CONTACTOR_OR_RELAY_FAILURE_MASK0) | ((messages.DCDC_OP_Open_Circuit & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_DCDC_OP_OPEN_CIRCUIT_MASK0));
 data[3] = (byte)((messages.DCDC_OP_Short_Circuit & ( can.SIGNLE_READ_Mask1)) | ((messages.DCDC_OP_Under_Vol_flt & ( can.SIGNLE_READ_Mask1)) << can.CHARGER_FAULT_INFO_DCDC_OP_UNDER_VOL_FLT_MASK0));
  return can.CHARGER_FAULT_INFO_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_HP_DCDC_Parameter1( CanConverter.HP_DCDC_Parameter1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.HP_DCDC_IP_DC_Current=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.HP_DCDC_PARAMETER1_HP_DCDC_IP_DC_CURRENT_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.HP_DCDC_PARAMETER1_CANID_HP_DCDC_IP_DC_CURRENT_OFFSET);messages.HP_DCDC_IP_DC_Voltage=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.HP_DCDC_PARAMETER1_HP_DCDC_IP_DC_VOLTAGE_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.HP_DCDC_PARAMETER1_CANID_HP_DCDC_IP_DC_VOLTAGE_OFFSET);messages.HP_DCDC_OP_DC_Current=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.HP_DCDC_PARAMETER1_HP_DCDC_OP_DC_CURRENT_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.HP_DCDC_PARAMETER1_CANID_HP_DCDC_OP_DC_CURRENT_OFFSET);messages.HP_DCDC_OP_DC_Voltage=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.HP_DCDC_PARAMETER1_HP_DCDC_OP_DC_VOLTAGE_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.HP_DCDC_PARAMETER1_CANID_HP_DCDC_OP_DC_VOLTAGE_OFFSET);
  return can.HP_DCDC_PARAMETER1_ID;
}

/*------------------------------------------------------------*/

public long Serialize_HP_DCDC_Parameter1( CanConverter.HP_DCDC_Parameter1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.HP_DCDC_IP_DC_Current=(int) (messages.HP_DCDC_IP_DC_Current - can.HP_DCDC_PARAMETER1_CANID_HP_DCDC_IP_DC_CURRENT_OFFSET);
messages.HP_DCDC_IP_DC_Voltage=(int) (messages.HP_DCDC_IP_DC_Voltage - can.HP_DCDC_PARAMETER1_CANID_HP_DCDC_IP_DC_VOLTAGE_OFFSET);
messages.HP_DCDC_OP_DC_Current=(int) (messages.HP_DCDC_OP_DC_Current - can.HP_DCDC_PARAMETER1_CANID_HP_DCDC_OP_DC_CURRENT_OFFSET);
messages.HP_DCDC_OP_DC_Voltage=(int) (messages.HP_DCDC_OP_DC_Voltage - can.HP_DCDC_PARAMETER1_CANID_HP_DCDC_OP_DC_VOLTAGE_OFFSET);
 data[0] = (byte)((messages.HP_DCDC_IP_DC_Current & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.HP_DCDC_IP_DC_Current >> can.HP_DCDC_PARAMETER1_HP_DCDC_IP_DC_CURRENT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.HP_DCDC_IP_DC_Voltage & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.HP_DCDC_IP_DC_Voltage >> can.HP_DCDC_PARAMETER1_HP_DCDC_IP_DC_VOLTAGE_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.HP_DCDC_OP_DC_Current & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.HP_DCDC_OP_DC_Current >> can.HP_DCDC_PARAMETER1_HP_DCDC_OP_DC_CURRENT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.HP_DCDC_OP_DC_Voltage & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.HP_DCDC_OP_DC_Voltage >> can.HP_DCDC_PARAMETER1_HP_DCDC_OP_DC_VOLTAGE_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.HP_DCDC_PARAMETER1_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_IMU_Data_X( CanConverter.IMU_Data_X_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Accelerometer_Xaxis=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_X_ACCELEROMETER_XAXIS_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_X_ACCELEROMETER_XAXIS_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_X_ACCELEROMETER_XAXIS_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.IMU_DATA_X_CANID_ACCELEROMETER_XAXIS_OFFSET);messages.Gyroscope_Xaxis=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_X_GYROSCOPE_XAXIS_MASK0) | (( data[6] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_X_GYROSCOPE_XAXIS_MASK1) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_X_GYROSCOPE_XAXIS_MASK2) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.IMU_DATA_X_CANID_GYROSCOPE_XAXIS_OFFSET);
  return can.IMU_DATA_X_ID;
}

/*------------------------------------------------------------*/

public long Serialize_IMU_Data_X( CanConverter.IMU_Data_X_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Accelerometer_Xaxis=(int) (messages.Accelerometer_Xaxis - can.IMU_DATA_X_CANID_ACCELEROMETER_XAXIS_OFFSET);
messages.Gyroscope_Xaxis=(int) (messages.Gyroscope_Xaxis - can.IMU_DATA_X_CANID_GYROSCOPE_XAXIS_OFFSET);
 data[0] = (byte)((messages.Accelerometer_Xaxis & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Accelerometer_Xaxis >> can.IMU_DATA_X_ACCELEROMETER_XAXIS_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.Accelerometer_Xaxis >> can.IMU_DATA_X_ACCELEROMETER_XAXIS_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Accelerometer_Xaxis >> can.IMU_DATA_X_ACCELEROMETER_XAXIS_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Gyroscope_Xaxis & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Gyroscope_Xaxis >> can.IMU_DATA_X_GYROSCOPE_XAXIS_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.Gyroscope_Xaxis >> can.IMU_DATA_X_GYROSCOPE_XAXIS_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Gyroscope_Xaxis >> can.IMU_DATA_X_GYROSCOPE_XAXIS_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.IMU_DATA_X_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_SW_Version( CanConverter.MCU_SW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Bootloader_Version=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.MCU_SW_VERSION_MCU_BOOTLOADER_VERSION_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.MCU_SW_VERSION_MCU_BOOTLOADER_VERSION_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.MCU_SW_VERSION_MCU_BOOTLOADER_VERSION_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.MCU_SW_VERSION_CANID_MCU_BOOTLOADER_VERSION_OFFSET);messages.MCU_Firmware_Version=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.MCU_SW_VERSION_MCU_FIRMWARE_VERSION_MASK0) | (( data[6] & (can.SIGNLE_READ_Mask8)) << can.MCU_SW_VERSION_MCU_FIRMWARE_VERSION_MASK1) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.MCU_SW_VERSION_MCU_FIRMWARE_VERSION_MASK2) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.MCU_SW_VERSION_CANID_MCU_FIRMWARE_VERSION_OFFSET);
  return can.MCU_SW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_SW_Version( CanConverter.MCU_SW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Bootloader_Version=(int) (messages.MCU_Bootloader_Version - can.MCU_SW_VERSION_CANID_MCU_BOOTLOADER_VERSION_OFFSET);
messages.MCU_Firmware_Version=(int) (messages.MCU_Firmware_Version - can.MCU_SW_VERSION_CANID_MCU_FIRMWARE_VERSION_OFFSET);
 data[0] = (byte)((messages.MCU_Bootloader_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.MCU_Bootloader_Version >> can.MCU_SW_VERSION_MCU_BOOTLOADER_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.MCU_Bootloader_Version >> can.MCU_SW_VERSION_MCU_BOOTLOADER_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.MCU_Bootloader_Version >> can.MCU_SW_VERSION_MCU_BOOTLOADER_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.MCU_Firmware_Version & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.MCU_Firmware_Version >> can.MCU_SW_VERSION_MCU_FIRMWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.MCU_Firmware_Version >> can.MCU_SW_VERSION_MCU_FIRMWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.MCU_Firmware_Version >> can.MCU_SW_VERSION_MCU_FIRMWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.MCU_SW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_HW_Version( CanConverter.MCU_HW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Hardware_Version=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.MCU_HW_VERSION_MCU_HARDWARE_VERSION_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.MCU_HW_VERSION_MCU_HARDWARE_VERSION_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.MCU_HW_VERSION_MCU_HARDWARE_VERSION_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.MCU_HW_VERSION_CANID_MCU_HARDWARE_VERSION_OFFSET);
  return can.MCU_HW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_HW_Version( CanConverter.MCU_HW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Hardware_Version=(int) (messages.MCU_Hardware_Version - can.MCU_HW_VERSION_CANID_MCU_HARDWARE_VERSION_OFFSET);
 data[0] = (byte)((messages.MCU_Hardware_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.MCU_Hardware_Version >> can.MCU_HW_VERSION_MCU_HARDWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.MCU_Hardware_Version >> can.MCU_HW_VERSION_MCU_HARDWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.MCU_Hardware_Version >> can.MCU_HW_VERSION_MCU_HARDWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.MCU_HW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ICM_HW_Version_Info( CanConverter.ICM_HW_Version_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ICM_Hardware_Version=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.ICM_HW_VERSION_INFO_CANID_ICM_HARDWARE_VERSION_OFFSET);
  return can.ICM_HW_VERSION_INFO_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ICM_HW_Version_Info( CanConverter.ICM_HW_Version_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ICM_Hardware_Version=(int) (messages.ICM_Hardware_Version - can.ICM_HW_VERSION_INFO_CANID_ICM_HARDWARE_VERSION_OFFSET);
 data[0] = (byte)((messages.ICM_Hardware_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.ICM_Hardware_Version >> can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.ICM_Hardware_Version >> can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.ICM_Hardware_Version >> can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.ICM_Hardware_Version >> can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.ICM_Hardware_Version >> can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.ICM_Hardware_Version >> can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.ICM_Hardware_Version >> can.ICM_HW_VERSION_INFO_ICM_HARDWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.ICM_HW_VERSION_INFO_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ICM_SW_Version( CanConverter.ICM_SW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ICM_Firmware_Version=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.ICM_SW_VERSION_ICM_FIRMWARE_VERSION_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.ICM_SW_VERSION_ICM_FIRMWARE_VERSION_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.ICM_SW_VERSION_ICM_FIRMWARE_VERSION_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.ICM_SW_VERSION_CANID_ICM_FIRMWARE_VERSION_OFFSET);messages.ICM_Bootloader_Version=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.ICM_SW_VERSION_ICM_BOOTLOADER_VERSION_MASK0) | (( data[6] & (can.SIGNLE_READ_Mask8)) << can.ICM_SW_VERSION_ICM_BOOTLOADER_VERSION_MASK1) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.ICM_SW_VERSION_ICM_BOOTLOADER_VERSION_MASK2) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.ICM_SW_VERSION_CANID_ICM_BOOTLOADER_VERSION_OFFSET);
  return can.ICM_SW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ICM_SW_Version( CanConverter.ICM_SW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ICM_Firmware_Version=(int) (messages.ICM_Firmware_Version - can.ICM_SW_VERSION_CANID_ICM_FIRMWARE_VERSION_OFFSET);
messages.ICM_Bootloader_Version=(int) (messages.ICM_Bootloader_Version - can.ICM_SW_VERSION_CANID_ICM_BOOTLOADER_VERSION_OFFSET);
 data[0] = (byte)((messages.ICM_Firmware_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.ICM_Firmware_Version >> can.ICM_SW_VERSION_ICM_FIRMWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.ICM_Firmware_Version >> can.ICM_SW_VERSION_ICM_FIRMWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.ICM_Firmware_Version >> can.ICM_SW_VERSION_ICM_FIRMWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.ICM_Bootloader_Version & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.ICM_Bootloader_Version >> can.ICM_SW_VERSION_ICM_BOOTLOADER_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.ICM_Bootloader_Version >> can.ICM_SW_VERSION_ICM_BOOTLOADER_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.ICM_Bootloader_Version >> can.ICM_SW_VERSION_ICM_BOOTLOADER_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.ICM_SW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ESCL_HW_Version_Info( CanConverter.ESCL_HW_Version_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ESCL_Hardware_Version=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.ESCL_HW_VERSION_INFO_CANID_ESCL_HARDWARE_VERSION_OFFSET);
  return can.ESCL_HW_VERSION_INFO_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ESCL_HW_Version_Info( CanConverter.ESCL_HW_Version_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ESCL_Hardware_Version=(int) (messages.ESCL_Hardware_Version - can.ESCL_HW_VERSION_INFO_CANID_ESCL_HARDWARE_VERSION_OFFSET);
 data[0] = (byte)((messages.ESCL_Hardware_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.ESCL_Hardware_Version >> can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.ESCL_Hardware_Version >> can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.ESCL_Hardware_Version >> can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.ESCL_Hardware_Version >> can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.ESCL_Hardware_Version >> can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.ESCL_Hardware_Version >> can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.ESCL_Hardware_Version >> can.ESCL_HW_VERSION_INFO_ESCL_HARDWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.ESCL_HW_VERSION_INFO_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_OBC_SW_Version( CanConverter.OBC_SW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_Firmware_Version=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.OBC_SW_VERSION_OBC_FIRMWARE_VERSION_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.OBC_SW_VERSION_OBC_FIRMWARE_VERSION_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.OBC_SW_VERSION_OBC_FIRMWARE_VERSION_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.OBC_SW_VERSION_CANID_OBC_FIRMWARE_VERSION_OFFSET);messages.OBC_Bootloader_Version=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.OBC_SW_VERSION_OBC_BOOTLOADER_VERSION_MASK0) | (( data[6] & (can.SIGNLE_READ_Mask8)) << can.OBC_SW_VERSION_OBC_BOOTLOADER_VERSION_MASK1) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.OBC_SW_VERSION_OBC_BOOTLOADER_VERSION_MASK2) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.OBC_SW_VERSION_CANID_OBC_BOOTLOADER_VERSION_OFFSET);
  return can.OBC_SW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Serialize_OBC_SW_Version( CanConverter.OBC_SW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_Firmware_Version=(int) (messages.OBC_Firmware_Version - can.OBC_SW_VERSION_CANID_OBC_FIRMWARE_VERSION_OFFSET);
messages.OBC_Bootloader_Version=(int) (messages.OBC_Bootloader_Version - can.OBC_SW_VERSION_CANID_OBC_BOOTLOADER_VERSION_OFFSET);
 data[0] = (byte)((messages.OBC_Firmware_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.OBC_Firmware_Version >> can.OBC_SW_VERSION_OBC_FIRMWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.OBC_Firmware_Version >> can.OBC_SW_VERSION_OBC_FIRMWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.OBC_Firmware_Version >> can.OBC_SW_VERSION_OBC_FIRMWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.OBC_Bootloader_Version & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.OBC_Bootloader_Version >> can.OBC_SW_VERSION_OBC_BOOTLOADER_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.OBC_Bootloader_Version >> can.OBC_SW_VERSION_OBC_BOOTLOADER_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.OBC_Bootloader_Version >> can.OBC_SW_VERSION_OBC_BOOTLOADER_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.OBC_SW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_OBC_HW_Version( CanConverter.OBC_HW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_Hardware_Version=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.OBC_HW_VERSION_OBC_HARDWARE_VERSION_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.OBC_HW_VERSION_OBC_HARDWARE_VERSION_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.OBC_HW_VERSION_OBC_HARDWARE_VERSION_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.OBC_HW_VERSION_CANID_OBC_HARDWARE_VERSION_OFFSET);
  return can.OBC_HW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Serialize_OBC_HW_Version( CanConverter.OBC_HW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_Hardware_Version=(int) (messages.OBC_Hardware_Version - can.OBC_HW_VERSION_CANID_OBC_HARDWARE_VERSION_OFFSET);
 data[0] = (byte)((messages.OBC_Hardware_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.OBC_Hardware_Version >> can.OBC_HW_VERSION_OBC_HARDWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.OBC_Hardware_Version >> can.OBC_HW_VERSION_OBC_HARDWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.OBC_Hardware_Version >> can.OBC_HW_VERSION_OBC_HARDWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.OBC_HW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ESCL_SW_Version_Info( CanConverter.ESCL_SW_Version_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ESCL_Firmware_version=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.ESCL_SW_VERSION_INFO_ESCL_FIRMWARE_VERSION_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.ESCL_SW_VERSION_INFO_ESCL_FIRMWARE_VERSION_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.ESCL_SW_VERSION_INFO_ESCL_FIRMWARE_VERSION_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.ESCL_SW_VERSION_INFO_CANID_ESCL_FIRMWARE_VERSION_OFFSET);messages.ESCL_Bootloader_version=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.ESCL_SW_VERSION_INFO_ESCL_BOOTLOADER_VERSION_MASK0) | (( data[6] & (can.SIGNLE_READ_Mask8)) << can.ESCL_SW_VERSION_INFO_ESCL_BOOTLOADER_VERSION_MASK1) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.ESCL_SW_VERSION_INFO_ESCL_BOOTLOADER_VERSION_MASK2) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.ESCL_SW_VERSION_INFO_CANID_ESCL_BOOTLOADER_VERSION_OFFSET);
  return can.ESCL_SW_VERSION_INFO_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ESCL_SW_Version_Info( CanConverter.ESCL_SW_Version_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ESCL_Firmware_version=(int) (messages.ESCL_Firmware_version - can.ESCL_SW_VERSION_INFO_CANID_ESCL_FIRMWARE_VERSION_OFFSET);
messages.ESCL_Bootloader_version=(int) (messages.ESCL_Bootloader_version - can.ESCL_SW_VERSION_INFO_CANID_ESCL_BOOTLOADER_VERSION_OFFSET);
 data[0] = (byte)((messages.ESCL_Firmware_version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.ESCL_Firmware_version >> can.ESCL_SW_VERSION_INFO_ESCL_FIRMWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.ESCL_Firmware_version >> can.ESCL_SW_VERSION_INFO_ESCL_FIRMWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.ESCL_Firmware_version >> can.ESCL_SW_VERSION_INFO_ESCL_FIRMWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.ESCL_Bootloader_version & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.ESCL_Bootloader_version >> can.ESCL_SW_VERSION_INFO_ESCL_BOOTLOADER_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.ESCL_Bootloader_version >> can.ESCL_SW_VERSION_INFO_ESCL_BOOTLOADER_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.ESCL_Bootloader_version >> can.ESCL_SW_VERSION_INFO_ESCL_BOOTLOADER_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.ESCL_SW_VERSION_INFO_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_RSC_HW_Version_Info( CanConverter.RSC_HW_Version_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.RSC_Hardware_Version=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.RSC_HW_VERSION_INFO_CANID_RSC_HARDWARE_VERSION_OFFSET);
  return can.RSC_HW_VERSION_INFO_ID;
}

/*------------------------------------------------------------*/

public long Serialize_RSC_HW_Version_Info( CanConverter.RSC_HW_Version_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.RSC_Hardware_Version=(int) (messages.RSC_Hardware_Version - can.RSC_HW_VERSION_INFO_CANID_RSC_HARDWARE_VERSION_OFFSET);
 data[0] = (byte)((messages.RSC_Hardware_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.RSC_Hardware_Version >> can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.RSC_Hardware_Version >> can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.RSC_Hardware_Version >> can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.RSC_Hardware_Version >> can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.RSC_Hardware_Version >> can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.RSC_Hardware_Version >> can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.RSC_Hardware_Version >> can.RSC_HW_VERSION_INFO_RSC_HARDWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.RSC_HW_VERSION_INFO_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_RSC_SW_Version( CanConverter.RSC_SW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.RSC_Firmware_Version=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.RSC_SW_VERSION_RSC_FIRMWARE_VERSION_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.RSC_SW_VERSION_RSC_FIRMWARE_VERSION_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.RSC_SW_VERSION_RSC_FIRMWARE_VERSION_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.RSC_SW_VERSION_CANID_RSC_FIRMWARE_VERSION_OFFSET);messages.RSC_Bootloader_Version=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.RSC_SW_VERSION_RSC_BOOTLOADER_VERSION_MASK0) | (( data[6] & (can.SIGNLE_READ_Mask8)) << can.RSC_SW_VERSION_RSC_BOOTLOADER_VERSION_MASK1) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.RSC_SW_VERSION_RSC_BOOTLOADER_VERSION_MASK2) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.RSC_SW_VERSION_CANID_RSC_BOOTLOADER_VERSION_OFFSET);
  return can.RSC_SW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Serialize_RSC_SW_Version( CanConverter.RSC_SW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.RSC_Firmware_Version=(int) (messages.RSC_Firmware_Version - can.RSC_SW_VERSION_CANID_RSC_FIRMWARE_VERSION_OFFSET);
messages.RSC_Bootloader_Version=(int) (messages.RSC_Bootloader_Version - can.RSC_SW_VERSION_CANID_RSC_BOOTLOADER_VERSION_OFFSET);
 data[0] = (byte)((messages.RSC_Firmware_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.RSC_Firmware_Version >> can.RSC_SW_VERSION_RSC_FIRMWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.RSC_Firmware_Version >> can.RSC_SW_VERSION_RSC_FIRMWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.RSC_Firmware_Version >> can.RSC_SW_VERSION_RSC_FIRMWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.RSC_Bootloader_Version & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.RSC_Bootloader_Version >> can.RSC_SW_VERSION_RSC_BOOTLOADER_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.RSC_Bootloader_Version >> can.RSC_SW_VERSION_RSC_BOOTLOADER_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.RSC_Bootloader_Version >> can.RSC_SW_VERSION_RSC_BOOTLOADER_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.RSC_SW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_LSC_HW_Version_Info( CanConverter.LSC_HW_Version_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.LSC_Hardware_Version=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.LSC_HW_VERSION_INFO_CANID_LSC_HARDWARE_VERSION_OFFSET);
  return can.LSC_HW_VERSION_INFO_ID;
}

/*------------------------------------------------------------*/

public long Serialize_LSC_HW_Version_Info( CanConverter.LSC_HW_Version_Info_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.LSC_Hardware_Version=(int) (messages.LSC_Hardware_Version - can.LSC_HW_VERSION_INFO_CANID_LSC_HARDWARE_VERSION_OFFSET);
 data[0] = (byte)((messages.LSC_Hardware_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.LSC_Hardware_Version >> can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.LSC_Hardware_Version >> can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.LSC_Hardware_Version >> can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.LSC_Hardware_Version >> can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.LSC_Hardware_Version >> can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.LSC_Hardware_Version >> can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.LSC_Hardware_Version >> can.LSC_HW_VERSION_INFO_LSC_HARDWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.LSC_HW_VERSION_INFO_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_LSC_SW_Version( CanConverter.LSC_SW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.LSC_Firmware_Version=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.LSC_SW_VERSION_LSC_FIRMWARE_VERSION_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.LSC_SW_VERSION_LSC_FIRMWARE_VERSION_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.LSC_SW_VERSION_LSC_FIRMWARE_VERSION_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.LSC_SW_VERSION_CANID_LSC_FIRMWARE_VERSION_OFFSET);messages.LSC_Bootloader_Version=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.LSC_SW_VERSION_LSC_BOOTLOADER_VERSION_MASK0) | (( data[6] & (can.SIGNLE_READ_Mask8)) << can.LSC_SW_VERSION_LSC_BOOTLOADER_VERSION_MASK1) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.LSC_SW_VERSION_LSC_BOOTLOADER_VERSION_MASK2) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.LSC_SW_VERSION_CANID_LSC_BOOTLOADER_VERSION_OFFSET);
  return can.LSC_SW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Serialize_LSC_SW_Version( CanConverter.LSC_SW_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.LSC_Firmware_Version=(int) (messages.LSC_Firmware_Version - can.LSC_SW_VERSION_CANID_LSC_FIRMWARE_VERSION_OFFSET);
messages.LSC_Bootloader_Version=(int) (messages.LSC_Bootloader_Version - can.LSC_SW_VERSION_CANID_LSC_BOOTLOADER_VERSION_OFFSET);
 data[0] = (byte)((messages.LSC_Firmware_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.LSC_Firmware_Version >> can.LSC_SW_VERSION_LSC_FIRMWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.LSC_Firmware_Version >> can.LSC_SW_VERSION_LSC_FIRMWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.LSC_Firmware_Version >> can.LSC_SW_VERSION_LSC_FIRMWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.LSC_Bootloader_Version & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.LSC_Bootloader_Version >> can.LSC_SW_VERSION_LSC_BOOTLOADER_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.LSC_Bootloader_Version >> can.LSC_SW_VERSION_LSC_BOOTLOADER_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.LSC_Bootloader_Version >> can.LSC_SW_VERSION_LSC_BOOTLOADER_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.LSC_SW_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_IMU_Data_Y( CanConverter.IMU_Data_Y_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Accelerometer_Yaxis=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_Y_ACCELEROMETER_YAXIS_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_Y_ACCELEROMETER_YAXIS_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_Y_ACCELEROMETER_YAXIS_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.IMU_DATA_Y_CANID_ACCELEROMETER_YAXIS_OFFSET);messages.Gyroscope_Yaxis=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_Y_GYROSCOPE_YAXIS_MASK0) | (( data[6] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_Y_GYROSCOPE_YAXIS_MASK1) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_Y_GYROSCOPE_YAXIS_MASK2) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.IMU_DATA_Y_CANID_GYROSCOPE_YAXIS_OFFSET);
  return can.IMU_DATA_Y_ID;
}

/*------------------------------------------------------------*/

public long Serialize_IMU_Data_Y( CanConverter.IMU_Data_Y_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Accelerometer_Yaxis=(int) (messages.Accelerometer_Yaxis - can.IMU_DATA_Y_CANID_ACCELEROMETER_YAXIS_OFFSET);
messages.Gyroscope_Yaxis=(int) (messages.Gyroscope_Yaxis - can.IMU_DATA_Y_CANID_GYROSCOPE_YAXIS_OFFSET);
 data[0] = (byte)((messages.Accelerometer_Yaxis & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Accelerometer_Yaxis >> can.IMU_DATA_Y_ACCELEROMETER_YAXIS_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.Accelerometer_Yaxis >> can.IMU_DATA_Y_ACCELEROMETER_YAXIS_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Accelerometer_Yaxis >> can.IMU_DATA_Y_ACCELEROMETER_YAXIS_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Gyroscope_Yaxis & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Gyroscope_Yaxis >> can.IMU_DATA_Y_GYROSCOPE_YAXIS_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.Gyroscope_Yaxis >> can.IMU_DATA_Y_GYROSCOPE_YAXIS_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Gyroscope_Yaxis >> can.IMU_DATA_Y_GYROSCOPE_YAXIS_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.IMU_DATA_Y_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_IC_Paramter_1( CanConverter.IC_Paramter_1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.LED_Temp=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.IC_PARAMTER_1_LED_TEMP_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.IC_PARAMTER_1_CANID_LED_TEMP_OFFSET);messages.Temp_Sensor_Input_Controller=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.IC_PARAMTER_1_TEMP_SENSOR_INPUT_CONTROLLER_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.IC_PARAMTER_1_CANID_TEMP_SENSOR_INPUT_CONTROLLER_OFFSET);messages.MAin_Input_Supply=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.IC_PARAMTER_1_MAIN_INPUT_SUPPLY_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.IC_PARAMTER_1_CANID_MAIN_INPUT_SUPPLY_OFFSET);messages.Temp_Sensor_Input_Ambient=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.IC_PARAMTER_1_TEMP_SENSOR_INPUT_AMBIENT_MASK0) | ( data[6] & (can.SIGNLE_READ_Mask8))) + can.IC_PARAMTER_1_CANID_TEMP_SENSOR_INPUT_AMBIENT_OFFSET);
  return can.IC_PARAMTER_1_ID;
}

/*------------------------------------------------------------*/

public long Serialize_IC_Paramter_1( CanConverter.IC_Paramter_1_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.LED_Temp=(int) (messages.LED_Temp - can.IC_PARAMTER_1_CANID_LED_TEMP_OFFSET);
messages.Temp_Sensor_Input_Controller=(int) (messages.Temp_Sensor_Input_Controller - can.IC_PARAMTER_1_CANID_TEMP_SENSOR_INPUT_CONTROLLER_OFFSET);
messages.MAin_Input_Supply=(int) (messages.MAin_Input_Supply - can.IC_PARAMTER_1_CANID_MAIN_INPUT_SUPPLY_OFFSET);
messages.Temp_Sensor_Input_Ambient=(int) (messages.Temp_Sensor_Input_Ambient - can.IC_PARAMTER_1_CANID_TEMP_SENSOR_INPUT_AMBIENT_OFFSET);
 data[0] = (byte)((messages.LED_Temp & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.LED_Temp >> can.IC_PARAMTER_1_LED_TEMP_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Temp_Sensor_Input_Controller & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Temp_Sensor_Input_Controller >> can.IC_PARAMTER_1_TEMP_SENSOR_INPUT_CONTROLLER_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.MAin_Input_Supply & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.MAin_Input_Supply >> can.IC_PARAMTER_1_MAIN_INPUT_SUPPLY_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Temp_Sensor_Input_Ambient & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Temp_Sensor_Input_Ambient >> can.IC_PARAMTER_1_TEMP_SENSOR_INPUT_AMBIENT_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.IC_PARAMTER_1_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ICM_Digital_Input( CanConverter.ICM_Digital_Input_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Backlight_Driver_Fault_Input=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.ICM_DIGITAL_INPUT_CANID_BACKLIGHT_DRIVER_FAULT_INPUT_OFFSET);messages.Ambient_Light_Sensor_Interrupt=(int)((((data[0] >> can.ICM_DIGITAL_INPUT_AMBIENT_LIGHT_SENSOR_INTERRUPT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ICM_DIGITAL_INPUT_CANID_AMBIENT_LIGHT_SENSOR_INTERRUPT_OFFSET);messages.Ambient_Temp_Sensor_Interrupt=(int)((((data[0] >> can.ICM_DIGITAL_INPUT_AMBIENT_TEMP_SENSOR_INTERRUPT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ICM_DIGITAL_INPUT_CANID_AMBIENT_TEMP_SENSOR_INTERRUPT_OFFSET);messages.Warning_Status=(int)((((data[0] >> can.ICM_DIGITAL_INPUT_WARNING_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ICM_DIGITAL_INPUT_CANID_WARNING_STATUS_OFFSET);messages.Error_Status=(int)((((data[0] >> can.ICM_DIGITAL_INPUT_ERROR_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ICM_DIGITAL_INPUT_CANID_ERROR_STATUS_OFFSET);messages.Warning_Counter=(int)(((data[1] & (can.SIGNLE_READ_Mask8))) + can.ICM_DIGITAL_INPUT_CANID_WARNING_COUNTER_OFFSET);messages.Error_Counter=(int)(((data[2] & (can.SIGNLE_READ_Mask8))) + can.ICM_DIGITAL_INPUT_CANID_ERROR_COUNTER_OFFSET);messages.Reset_Counter=(int)(((data[3] & (can.SIGNLE_READ_Mask8))) + can.ICM_DIGITAL_INPUT_CANID_RESET_COUNTER_OFFSET);
  return can.ICM_DIGITAL_INPUT_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ICM_Digital_Input( CanConverter.ICM_Digital_Input_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Backlight_Driver_Fault_Input=(int) (messages.Backlight_Driver_Fault_Input - can.ICM_DIGITAL_INPUT_CANID_BACKLIGHT_DRIVER_FAULT_INPUT_OFFSET);
messages.Ambient_Light_Sensor_Interrupt=(int) (messages.Ambient_Light_Sensor_Interrupt - can.ICM_DIGITAL_INPUT_CANID_AMBIENT_LIGHT_SENSOR_INTERRUPT_OFFSET);
messages.Ambient_Temp_Sensor_Interrupt=(int) (messages.Ambient_Temp_Sensor_Interrupt - can.ICM_DIGITAL_INPUT_CANID_AMBIENT_TEMP_SENSOR_INTERRUPT_OFFSET);
messages.Warning_Status=(int) (messages.Warning_Status - can.ICM_DIGITAL_INPUT_CANID_WARNING_STATUS_OFFSET);
messages.Error_Status=(int) (messages.Error_Status - can.ICM_DIGITAL_INPUT_CANID_ERROR_STATUS_OFFSET);
messages.Warning_Counter=(int) (messages.Warning_Counter - can.ICM_DIGITAL_INPUT_CANID_WARNING_COUNTER_OFFSET);
messages.Error_Counter=(int) (messages.Error_Counter - can.ICM_DIGITAL_INPUT_CANID_ERROR_COUNTER_OFFSET);
messages.Reset_Counter=(int) (messages.Reset_Counter - can.ICM_DIGITAL_INPUT_CANID_RESET_COUNTER_OFFSET);
 data[0] = (byte)((messages.Backlight_Driver_Fault_Input & ( can.SIGNLE_READ_Mask1)) | ((messages.Ambient_Light_Sensor_Interrupt & ( can.SIGNLE_READ_Mask1)) << can.ICM_DIGITAL_INPUT_AMBIENT_LIGHT_SENSOR_INTERRUPT_MASK0) | ((messages.Ambient_Temp_Sensor_Interrupt & ( can.SIGNLE_READ_Mask1)) << can.ICM_DIGITAL_INPUT_AMBIENT_TEMP_SENSOR_INTERRUPT_MASK0) | ((messages.Warning_Status & ( can.SIGNLE_READ_Mask1)) << can.ICM_DIGITAL_INPUT_WARNING_STATUS_MASK0) | ((messages.Error_Status & ( can.SIGNLE_READ_Mask1)) << can.ICM_DIGITAL_INPUT_ERROR_STATUS_MASK0));
 data[1] = (byte)((messages.Warning_Counter & ( can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Error_Counter & ( can.SIGNLE_READ_Mask8)));
 data[3] = (byte)((messages.Reset_Counter & ( can.SIGNLE_READ_Mask8)));
  return can.ICM_DIGITAL_INPUT_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_IMU_Data_Z( CanConverter.IMU_Data_Z_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Accelerometer_Zaxis=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_Z_ACCELEROMETER_ZAXIS_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_Z_ACCELEROMETER_ZAXIS_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_Z_ACCELEROMETER_ZAXIS_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.IMU_DATA_Z_CANID_ACCELEROMETER_ZAXIS_OFFSET);messages.Gyroscope_Zaxis=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_Z_GYROSCOPE_ZAXIS_MASK0) | (( data[6] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_Z_GYROSCOPE_ZAXIS_MASK1) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.IMU_DATA_Z_GYROSCOPE_ZAXIS_MASK2) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.IMU_DATA_Z_CANID_GYROSCOPE_ZAXIS_OFFSET);
  return can.IMU_DATA_Z_ID;
}

/*------------------------------------------------------------*/

public long Serialize_IMU_Data_Z( CanConverter.IMU_Data_Z_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Accelerometer_Zaxis=(int) (messages.Accelerometer_Zaxis - can.IMU_DATA_Z_CANID_ACCELEROMETER_ZAXIS_OFFSET);
messages.Gyroscope_Zaxis=(int) (messages.Gyroscope_Zaxis - can.IMU_DATA_Z_CANID_GYROSCOPE_ZAXIS_OFFSET);
 data[0] = (byte)((messages.Accelerometer_Zaxis & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Accelerometer_Zaxis >> can.IMU_DATA_Z_ACCELEROMETER_ZAXIS_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.Accelerometer_Zaxis >> can.IMU_DATA_Z_ACCELEROMETER_ZAXIS_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Accelerometer_Zaxis >> can.IMU_DATA_Z_ACCELEROMETER_ZAXIS_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Gyroscope_Zaxis & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Gyroscope_Zaxis >> can.IMU_DATA_Z_GYROSCOPE_ZAXIS_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.Gyroscope_Zaxis >> can.IMU_DATA_Z_GYROSCOPE_ZAXIS_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Gyroscope_Zaxis >> can.IMU_DATA_Z_GYROSCOPE_ZAXIS_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.IMU_DATA_Z_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_SOFTWARE_VERSIONS( CanConverter.BMS_SOFTWARE_VERSIONS_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_Firmware_Version=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.BMS_SOFTWARE_VERSIONS_BMS_FIRMWARE_VERSION_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.BMS_SOFTWARE_VERSIONS_BMS_FIRMWARE_VERSION_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_SOFTWARE_VERSIONS_BMS_FIRMWARE_VERSION_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_SOFTWARE_VERSIONS_CANID_BMS_FIRMWARE_VERSION_OFFSET);messages.BMS_Bootloader_Version=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.BMS_SOFTWARE_VERSIONS_BMS_BOOTLOADER_VERSION_MASK0) | (( data[6] & (can.SIGNLE_READ_Mask8)) << can.BMS_SOFTWARE_VERSIONS_BMS_BOOTLOADER_VERSION_MASK1) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_SOFTWARE_VERSIONS_BMS_BOOTLOADER_VERSION_MASK2) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BMS_SOFTWARE_VERSIONS_CANID_BMS_BOOTLOADER_VERSION_OFFSET);
  return can.BMS_SOFTWARE_VERSIONS_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_SOFTWARE_VERSIONS( CanConverter.BMS_SOFTWARE_VERSIONS_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_Firmware_Version=(int) (messages.BMS_Firmware_Version - can.BMS_SOFTWARE_VERSIONS_CANID_BMS_FIRMWARE_VERSION_OFFSET);
messages.BMS_Bootloader_Version=(int) (messages.BMS_Bootloader_Version - can.BMS_SOFTWARE_VERSIONS_CANID_BMS_BOOTLOADER_VERSION_OFFSET);
 data[0] = (byte)((messages.BMS_Firmware_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.BMS_Firmware_Version >> can.BMS_SOFTWARE_VERSIONS_BMS_FIRMWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.BMS_Firmware_Version >> can.BMS_SOFTWARE_VERSIONS_BMS_FIRMWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.BMS_Firmware_Version >> can.BMS_SOFTWARE_VERSIONS_BMS_FIRMWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.BMS_Bootloader_Version & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.BMS_Bootloader_Version >> can.BMS_SOFTWARE_VERSIONS_BMS_BOOTLOADER_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.BMS_Bootloader_Version >> can.BMS_SOFTWARE_VERSIONS_BMS_BOOTLOADER_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.BMS_Bootloader_Version >> can.BMS_SOFTWARE_VERSIONS_BMS_BOOTLOADER_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_SOFTWARE_VERSIONS_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ABS_Software_Version( CanConverter.ABS_Software_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ABS_Firmware_version=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.ABS_SOFTWARE_VERSION_ABS_FIRMWARE_VERSION_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.ABS_SOFTWARE_VERSION_ABS_FIRMWARE_VERSION_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.ABS_SOFTWARE_VERSION_ABS_FIRMWARE_VERSION_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.ABS_SOFTWARE_VERSION_CANID_ABS_FIRMWARE_VERSION_OFFSET);messages.ABS_Bootloader_version=(int)(((( data[7] & (can.SIGNLE_READ_Mask8)) << can.ABS_SOFTWARE_VERSION_ABS_BOOTLOADER_VERSION_MASK0) | (( data[6] & (can.SIGNLE_READ_Mask8)) << can.ABS_SOFTWARE_VERSION_ABS_BOOTLOADER_VERSION_MASK1) | (( data[5] & (can.SIGNLE_READ_Mask8)) << can.ABS_SOFTWARE_VERSION_ABS_BOOTLOADER_VERSION_MASK2) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.ABS_SOFTWARE_VERSION_CANID_ABS_BOOTLOADER_VERSION_OFFSET);
  return can.ABS_SOFTWARE_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ABS_Software_Version( CanConverter.ABS_Software_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ABS_Firmware_version=(int) (messages.ABS_Firmware_version - can.ABS_SOFTWARE_VERSION_CANID_ABS_FIRMWARE_VERSION_OFFSET);
messages.ABS_Bootloader_version=(int) (messages.ABS_Bootloader_version - can.ABS_SOFTWARE_VERSION_CANID_ABS_BOOTLOADER_VERSION_OFFSET);
 data[0] = (byte)((messages.ABS_Firmware_version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.ABS_Firmware_version >> can.ABS_SOFTWARE_VERSION_ABS_FIRMWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.ABS_Firmware_version >> can.ABS_SOFTWARE_VERSION_ABS_FIRMWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.ABS_Firmware_version >> can.ABS_SOFTWARE_VERSION_ABS_FIRMWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.ABS_Bootloader_version & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.ABS_Bootloader_version >> can.ABS_SOFTWARE_VERSION_ABS_BOOTLOADER_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.ABS_Bootloader_version >> can.ABS_SOFTWARE_VERSION_ABS_BOOTLOADER_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.ABS_Bootloader_version >> can.ABS_SOFTWARE_VERSION_ABS_BOOTLOADER_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.ABS_SOFTWARE_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_HARDWARE_VERSION( CanConverter.BMS_HARDWARE_VERSION_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_Hardware_Version=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.BMS_HARDWARE_VERSION_BMS_HARDWARE_VERSION_MASK0) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.BMS_HARDWARE_VERSION_BMS_HARDWARE_VERSION_MASK1) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_HARDWARE_VERSION_BMS_HARDWARE_VERSION_MASK2) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_HARDWARE_VERSION_CANID_BMS_HARDWARE_VERSION_OFFSET);
  return can.BMS_HARDWARE_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_HARDWARE_VERSION( CanConverter.BMS_HARDWARE_VERSION_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_Hardware_Version=(int) (messages.BMS_Hardware_Version - can.BMS_HARDWARE_VERSION_CANID_BMS_HARDWARE_VERSION_OFFSET);
 data[0] = (byte)((messages.BMS_Hardware_Version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.BMS_Hardware_Version >> can.BMS_HARDWARE_VERSION_BMS_HARDWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.BMS_Hardware_Version >> can.BMS_HARDWARE_VERSION_BMS_HARDWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.BMS_Hardware_Version >> can.BMS_HARDWARE_VERSION_BMS_HARDWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_HARDWARE_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ABS_Hardware_Version( CanConverter.ABS_Hardware_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ABS_Hardware_version=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.ABS_HARDWARE_VERSION_CANID_ABS_HARDWARE_VERSION_OFFSET);
  return can.ABS_HARDWARE_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ABS_Hardware_Version( CanConverter.ABS_Hardware_Version_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ABS_Hardware_version=(int) (messages.ABS_Hardware_version - can.ABS_HARDWARE_VERSION_CANID_ABS_HARDWARE_VERSION_OFFSET);
 data[0] = (byte)((messages.ABS_Hardware_version & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.ABS_Hardware_version >> can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.ABS_Hardware_version >> can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.ABS_Hardware_version >> can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.ABS_Hardware_version >> can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.ABS_Hardware_version >> can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.ABS_Hardware_version >> can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.ABS_Hardware_version >> can.ABS_HARDWARE_VERSION_ABS_HARDWARE_VERSION_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.ABS_HARDWARE_VERSION_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_Diagnostic_Request( CanConverter.BMS_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_Diag_Request=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_DIAGNOSTIC_REQUEST_CANID_BMS_DIAG_REQUEST_OFFSET);
  return can.BMS_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_Diagnostic_Request( CanConverter.BMS_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_Diag_Request=(int) (messages.BMS_Diag_Request - can.BMS_DIAGNOSTIC_REQUEST_CANID_BMS_DIAG_REQUEST_OFFSET);
 data[0] = (byte)((messages.BMS_Diag_Request & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.BMS_Diag_Request >> can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.BMS_Diag_Request >> can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.BMS_Diag_Request >> can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.BMS_Diag_Request >> can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.BMS_Diag_Request >> can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.BMS_Diag_Request >> can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.BMS_Diag_Request >> can.BMS_DIAGNOSTIC_REQUEST_BMS_DIAG_REQUEST_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BMS_Diagnostic_Response( CanConverter.BMS_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_Diag_Resp=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BMS_DIAGNOSTIC_RESPONSE_CANID_BMS_DIAG_RESP_OFFSET);
  return can.BMS_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BMS_Diagnostic_Response( CanConverter.BMS_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BMS_Diag_Resp=(int) (messages.BMS_Diag_Resp - can.BMS_DIAGNOSTIC_RESPONSE_CANID_BMS_DIAG_RESP_OFFSET);
 data[0] = (byte)((messages.BMS_Diag_Resp & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.BMS_Diag_Resp >> can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.BMS_Diag_Resp >> can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.BMS_Diag_Resp >> can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.BMS_Diag_Resp >> can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.BMS_Diag_Resp >> can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.BMS_Diag_Resp >> can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.BMS_Diag_Resp >> can.BMS_DIAGNOSTIC_RESPONSE_BMS_DIAG_RESP_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BMS_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_OTA_Status( CanConverter.OTA_Status_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OTA_Status_Info=(int)(((data[0] & (can.SIGNLE_READ_Mask2))) + can.OTA_STATUS_CANID_OTA_STATUS_INFO_OFFSET);
  return can.OTA_STATUS_ID;
}

/*------------------------------------------------------------*/

public long Serialize_OTA_Status( CanConverter.OTA_Status_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OTA_Status_Info=(int) (messages.OTA_Status_Info - can.OTA_STATUS_CANID_OTA_STATUS_INFO_OFFSET);
 data[0] = (byte)((messages.OTA_Status_Info & ( can.SIGNLE_READ_Mask2)));
  return can.OTA_STATUS_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Vehicle_left_SW_Cube( CanConverter.Vehicle_left_SW_Cube_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.High_beam=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_HIGH_BEAM_OFFSET);messages.Low_beam=(int)((((data[0] >> can.VEHICLE_LEFT_SW_CUBE_LOW_BEAM_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_LOW_BEAM_OFFSET);messages.Pass_beam=(int)((((data[0] >> can.VEHICLE_LEFT_SW_CUBE_PASS_BEAM_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_PASS_BEAM_OFFSET);messages.Left_Indicator=(int)((((data[0] >> can.VEHICLE_LEFT_SW_CUBE_LEFT_INDICATOR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_LEFT_INDICATOR_OFFSET);messages.Cruise_Control=(int)((((data[0] >> can.VEHICLE_LEFT_SW_CUBE_CRUISE_CONTROL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_CRUISE_CONTROL_OFFSET);messages.Right_Indicator=(int)((((data[0] >> can.VEHICLE_LEFT_SW_CUBE_RIGHT_INDICATOR_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_RIGHT_INDICATOR_OFFSET);messages.Horn=(int)((((data[0] >> can.VEHICLE_LEFT_SW_CUBE_HORN_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_HORN_OFFSET);messages.Eco_Mode=(int)((((data[0] >> can.VEHICLE_LEFT_SW_CUBE_ECO_MODE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_ECO_MODE_OFFSET);messages.Tour_Mode=(int)(((data[1] & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_TOUR_MODE_OFFSET);messages.Sports_Mode=(int)((((data[1] >> can.VEHICLE_LEFT_SW_CUBE_SPORTS_MODE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_SPORTS_MODE_OFFSET);messages.Turbo_mode=(int)((((data[1] >> can.VEHICLE_LEFT_SW_CUBE_TURBO_MODE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_TURBO_MODE_OFFSET);messages.Neutral=(int)((((data[1] >> can.VEHICLE_LEFT_SW_CUBE_NEUTRAL_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_NEUTRAL_OFFSET);messages.Park_Assist=(int)((((data[1] >> can.VEHICLE_LEFT_SW_CUBE_PARK_ASSIST_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_PARK_ASSIST_OFFSET);messages.Home=(int)((((data[1] >> can.VEHICLE_LEFT_SW_CUBE_HOME_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_HOME_OFFSET);messages.Joystick_Up=(int)(((data[2] & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_UP_OFFSET);messages.Joystick_Down=(int)((((data[2] >> can.VEHICLE_LEFT_SW_CUBE_JOYSTICK_DOWN_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_DOWN_OFFSET);messages.Joystick_Left=(int)((((data[2] >> can.VEHICLE_LEFT_SW_CUBE_JOYSTICK_LEFT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_LEFT_OFFSET);messages.Joystick_Right=(int)((((data[2] >> can.VEHICLE_LEFT_SW_CUBE_JOYSTICK_RIGHT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_RIGHT_OFFSET);messages.Joystick_SET_RST=(int)((((data[2] >> can.VEHICLE_LEFT_SW_CUBE_JOYSTICK_SET_RST_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_SET_RST_OFFSET);messages.LSC_Power_Status=(int)((((data[2] >> can.VEHICLE_LEFT_SW_CUBE_LSC_POWER_STATUS_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_LSC_POWER_STATUS_OFFSET);messages.Joystick_fault=(int)((((data[2] >> can.VEHICLE_LEFT_SW_CUBE_JOYSTICK_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_FAULT_OFFSET);messages.Mode_Selector_Roller_fault=(int)((((data[2] >> can.VEHICLE_LEFT_SW_CUBE_MODE_SELECTOR_ROLLER_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_MODE_SELECTOR_ROLLER_FAULT_OFFSET);messages.Left_Indicator_Button_fault=(int)(((data[3] & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_LEFT_INDICATOR_BUTTON_FAULT_OFFSET);messages.Cruise_Control_Button_fault=(int)((((data[3] >> can.VEHICLE_LEFT_SW_CUBE_CRUISE_CONTROL_BUTTON_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_CRUISE_CONTROL_BUTTON_FAULT_OFFSET);messages.Horn_Button_fault=(int)((((data[3] >> can.VEHICLE_LEFT_SW_CUBE_HORN_BUTTON_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_HORN_BUTTON_FAULT_OFFSET);messages.Home_Button_fault=(int)((((data[3] >> can.VEHICLE_LEFT_SW_CUBE_HOME_BUTTON_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_HOME_BUTTON_FAULT_OFFSET);messages.LSC_System_fault=(int)((((data[3] >> can.VEHICLE_LEFT_SW_CUBE_LSC_SYSTEM_FAULT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_LEFT_SW_CUBE_CANID_LSC_SYSTEM_FAULT_OFFSET);
  return can.VEHICLE_LEFT_SW_CUBE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Vehicle_left_SW_Cube( CanConverter.Vehicle_left_SW_Cube_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.High_beam=(int) (messages.High_beam - can.VEHICLE_LEFT_SW_CUBE_CANID_HIGH_BEAM_OFFSET);
messages.Low_beam=(int) (messages.Low_beam - can.VEHICLE_LEFT_SW_CUBE_CANID_LOW_BEAM_OFFSET);
messages.Pass_beam=(int) (messages.Pass_beam - can.VEHICLE_LEFT_SW_CUBE_CANID_PASS_BEAM_OFFSET);
messages.Left_Indicator=(int) (messages.Left_Indicator - can.VEHICLE_LEFT_SW_CUBE_CANID_LEFT_INDICATOR_OFFSET);
messages.Cruise_Control=(int) (messages.Cruise_Control - can.VEHICLE_LEFT_SW_CUBE_CANID_CRUISE_CONTROL_OFFSET);
messages.Right_Indicator=(int) (messages.Right_Indicator - can.VEHICLE_LEFT_SW_CUBE_CANID_RIGHT_INDICATOR_OFFSET);
messages.Horn=(int) (messages.Horn - can.VEHICLE_LEFT_SW_CUBE_CANID_HORN_OFFSET);
messages.Eco_Mode=(int) (messages.Eco_Mode - can.VEHICLE_LEFT_SW_CUBE_CANID_ECO_MODE_OFFSET);
messages.Tour_Mode=(int) (messages.Tour_Mode - can.VEHICLE_LEFT_SW_CUBE_CANID_TOUR_MODE_OFFSET);
messages.Sports_Mode=(int) (messages.Sports_Mode - can.VEHICLE_LEFT_SW_CUBE_CANID_SPORTS_MODE_OFFSET);
messages.Turbo_mode=(int) (messages.Turbo_mode - can.VEHICLE_LEFT_SW_CUBE_CANID_TURBO_MODE_OFFSET);
messages.Neutral=(int) (messages.Neutral - can.VEHICLE_LEFT_SW_CUBE_CANID_NEUTRAL_OFFSET);
messages.Park_Assist=(int) (messages.Park_Assist - can.VEHICLE_LEFT_SW_CUBE_CANID_PARK_ASSIST_OFFSET);
messages.Home=(int) (messages.Home - can.VEHICLE_LEFT_SW_CUBE_CANID_HOME_OFFSET);
messages.Joystick_Up=(int) (messages.Joystick_Up - can.VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_UP_OFFSET);
messages.Joystick_Down=(int) (messages.Joystick_Down - can.VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_DOWN_OFFSET);
messages.Joystick_Left=(int) (messages.Joystick_Left - can.VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_LEFT_OFFSET);
messages.Joystick_Right=(int) (messages.Joystick_Right - can.VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_RIGHT_OFFSET);
messages.Joystick_SET_RST=(int) (messages.Joystick_SET_RST - can.VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_SET_RST_OFFSET);
messages.LSC_Power_Status=(int) (messages.LSC_Power_Status - can.VEHICLE_LEFT_SW_CUBE_CANID_LSC_POWER_STATUS_OFFSET);
messages.Joystick_fault=(int) (messages.Joystick_fault - can.VEHICLE_LEFT_SW_CUBE_CANID_JOYSTICK_FAULT_OFFSET);
messages.Mode_Selector_Roller_fault=(int) (messages.Mode_Selector_Roller_fault - can.VEHICLE_LEFT_SW_CUBE_CANID_MODE_SELECTOR_ROLLER_FAULT_OFFSET);
messages.Left_Indicator_Button_fault=(int) (messages.Left_Indicator_Button_fault - can.VEHICLE_LEFT_SW_CUBE_CANID_LEFT_INDICATOR_BUTTON_FAULT_OFFSET);
messages.Cruise_Control_Button_fault=(int) (messages.Cruise_Control_Button_fault - can.VEHICLE_LEFT_SW_CUBE_CANID_CRUISE_CONTROL_BUTTON_FAULT_OFFSET);
messages.Horn_Button_fault=(int) (messages.Horn_Button_fault - can.VEHICLE_LEFT_SW_CUBE_CANID_HORN_BUTTON_FAULT_OFFSET);
messages.Home_Button_fault=(int) (messages.Home_Button_fault - can.VEHICLE_LEFT_SW_CUBE_CANID_HOME_BUTTON_FAULT_OFFSET);
messages.LSC_System_fault=(int) (messages.LSC_System_fault - can.VEHICLE_LEFT_SW_CUBE_CANID_LSC_SYSTEM_FAULT_OFFSET);
 data[0] = (byte)((messages.High_beam & ( can.SIGNLE_READ_Mask1)) | ((messages.Low_beam & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_LOW_BEAM_MASK0) | ((messages.Pass_beam & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_PASS_BEAM_MASK0) | ((messages.Left_Indicator & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_LEFT_INDICATOR_MASK0) | ((messages.Cruise_Control & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_CRUISE_CONTROL_MASK0) | ((messages.Right_Indicator & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_RIGHT_INDICATOR_MASK0) | ((messages.Horn & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_HORN_MASK0) | ((messages.Eco_Mode & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_ECO_MODE_MASK0));
 data[1] = (byte)((messages.Tour_Mode & ( can.SIGNLE_READ_Mask1)) | ((messages.Sports_Mode & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_SPORTS_MODE_MASK0) | ((messages.Turbo_mode & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_TURBO_MODE_MASK0) | ((messages.Neutral & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_NEUTRAL_MASK0) | ((messages.Park_Assist & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_PARK_ASSIST_MASK0) | ((messages.Home & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_HOME_MASK0));
 data[2] = (byte)((messages.Joystick_Up & ( can.SIGNLE_READ_Mask1)) | ((messages.Joystick_Down & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_JOYSTICK_DOWN_MASK0) | ((messages.Joystick_Left & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_JOYSTICK_LEFT_MASK0) | ((messages.Joystick_Right & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_JOYSTICK_RIGHT_MASK0) | ((messages.Joystick_SET_RST & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_JOYSTICK_SET_RST_MASK0) | ((messages.LSC_Power_Status & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_LSC_POWER_STATUS_MASK0) | ((messages.Joystick_fault & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_JOYSTICK_FAULT_MASK0) | ((messages.Mode_Selector_Roller_fault & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_MODE_SELECTOR_ROLLER_FAULT_MASK0));
 data[3] = (byte)((messages.Left_Indicator_Button_fault & ( can.SIGNLE_READ_Mask1)) | ((messages.Cruise_Control_Button_fault & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_CRUISE_CONTROL_BUTTON_FAULT_MASK0) | ((messages.Horn_Button_fault & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_HORN_BUTTON_FAULT_MASK0) | ((messages.Home_Button_fault & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_HOME_BUTTON_FAULT_MASK0) | ((messages.LSC_System_fault & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_LEFT_SW_CUBE_LSC_SYSTEM_FAULT_MASK0));
  return can.VEHICLE_LEFT_SW_CUBE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Vehicle_Right_SW_Cube( CanConverter.Vehicle_Right_SW_Cube_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Voice_Assist=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_RIGHT_SW_CUBE_CANID_VOICE_ASSIST_OFFSET);messages.Regen=(int)((((data[0] >> can.VEHICLE_RIGHT_SW_CUBE_REGEN_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_RIGHT_SW_CUBE_CANID_REGEN_OFFSET);messages.Key_Ignition=(int)((((data[0] >> can.VEHICLE_RIGHT_SW_CUBE_KEY_IGNITION_MASK0) & (can.SIGNLE_READ_Mask1))) + can.VEHICLE_RIGHT_SW_CUBE_CANID_KEY_IGNITION_OFFSET);
  return can.VEHICLE_RIGHT_SW_CUBE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Vehicle_Right_SW_Cube( CanConverter.Vehicle_Right_SW_Cube_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Voice_Assist=(int) (messages.Voice_Assist - can.VEHICLE_RIGHT_SW_CUBE_CANID_VOICE_ASSIST_OFFSET);
messages.Regen=(int) (messages.Regen - can.VEHICLE_RIGHT_SW_CUBE_CANID_REGEN_OFFSET);
messages.Key_Ignition=(int) (messages.Key_Ignition - can.VEHICLE_RIGHT_SW_CUBE_CANID_KEY_IGNITION_OFFSET);
 data[0] = (byte)((messages.Voice_Assist & ( can.SIGNLE_READ_Mask1)) | ((messages.Regen & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_RIGHT_SW_CUBE_REGEN_MASK0) | ((messages.Key_Ignition & ( can.SIGNLE_READ_Mask1)) << can.VEHICLE_RIGHT_SW_CUBE_KEY_IGNITION_MASK0));
  return can.VEHICLE_RIGHT_SW_CUBE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ICM_Error( CanConverter.ICM_Error_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Input_OverVoltage=(int)(((data[0] & (can.SIGNLE_READ_Mask1))) + can.ICM_ERROR_CANID_INPUT_OVERVOLTAGE_OFFSET);messages.Input_UncerVoltage=(int)((((data[0] >> can.ICM_ERROR_INPUT_UNCERVOLTAGE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ICM_ERROR_CANID_INPUT_UNCERVOLTAGE_OFFSET);messages.Input_OverCurrent=(int)((((data[0] >> can.ICM_ERROR_INPUT_OVERCURRENT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ICM_ERROR_CANID_INPUT_OVERCURRENT_OFFSET);messages.Output_OverCurrent=(int)((((data[0] >> can.ICM_ERROR_OUTPUT_OVERCURRENT_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ICM_ERROR_CANID_OUTPUT_OVERCURRENT_OFFSET);messages.High_Temp=(int)((((data[0] >> can.ICM_ERROR_HIGH_TEMP_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ICM_ERROR_CANID_HIGH_TEMP_OFFSET);messages.Low_Temp=(int)((((data[0] >> can.ICM_ERROR_LOW_TEMP_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ICM_ERROR_CANID_LOW_TEMP_OFFSET);messages.Temp_Sensor_Failure=(int)((((data[0] >> can.ICM_ERROR_TEMP_SENSOR_FAILURE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ICM_ERROR_CANID_TEMP_SENSOR_FAILURE_OFFSET);messages.Output_Short_Circuit_Failure=(int)((((data[0] >> can.ICM_ERROR_OUTPUT_SHORT_CIRCUIT_FAILURE_MASK0) & (can.SIGNLE_READ_Mask1))) + can.ICM_ERROR_CANID_OUTPUT_SHORT_CIRCUIT_FAILURE_OFFSET);messages.Reserved=(int)(((data[1] & (can.SIGNLE_READ_Mask1))) + can.ICM_ERROR_CANID_RESERVED_OFFSET);
  return can.ICM_ERROR_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ICM_Error( CanConverter.ICM_Error_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Input_OverVoltage=(int) (messages.Input_OverVoltage - can.ICM_ERROR_CANID_INPUT_OVERVOLTAGE_OFFSET);
messages.Input_UncerVoltage=(int) (messages.Input_UncerVoltage - can.ICM_ERROR_CANID_INPUT_UNCERVOLTAGE_OFFSET);
messages.Input_OverCurrent=(int) (messages.Input_OverCurrent - can.ICM_ERROR_CANID_INPUT_OVERCURRENT_OFFSET);
messages.Output_OverCurrent=(int) (messages.Output_OverCurrent - can.ICM_ERROR_CANID_OUTPUT_OVERCURRENT_OFFSET);
messages.High_Temp=(int) (messages.High_Temp - can.ICM_ERROR_CANID_HIGH_TEMP_OFFSET);
messages.Low_Temp=(int) (messages.Low_Temp - can.ICM_ERROR_CANID_LOW_TEMP_OFFSET);
messages.Temp_Sensor_Failure=(int) (messages.Temp_Sensor_Failure - can.ICM_ERROR_CANID_TEMP_SENSOR_FAILURE_OFFSET);
messages.Output_Short_Circuit_Failure=(int) (messages.Output_Short_Circuit_Failure - can.ICM_ERROR_CANID_OUTPUT_SHORT_CIRCUIT_FAILURE_OFFSET);
messages.Reserved=(int) (messages.Reserved - can.ICM_ERROR_CANID_RESERVED_OFFSET);
 data[0] = (byte)((messages.Input_OverVoltage & ( can.SIGNLE_READ_Mask1)) | ((messages.Input_UncerVoltage & ( can.SIGNLE_READ_Mask1)) << can.ICM_ERROR_INPUT_UNCERVOLTAGE_MASK0) | ((messages.Input_OverCurrent & ( can.SIGNLE_READ_Mask1)) << can.ICM_ERROR_INPUT_OVERCURRENT_MASK0) | ((messages.Output_OverCurrent & ( can.SIGNLE_READ_Mask1)) << can.ICM_ERROR_OUTPUT_OVERCURRENT_MASK0) | ((messages.High_Temp & ( can.SIGNLE_READ_Mask1)) << can.ICM_ERROR_HIGH_TEMP_MASK0) | ((messages.Low_Temp & ( can.SIGNLE_READ_Mask1)) << can.ICM_ERROR_LOW_TEMP_MASK0) | ((messages.Temp_Sensor_Failure & ( can.SIGNLE_READ_Mask1)) << can.ICM_ERROR_TEMP_SENSOR_FAILURE_MASK0) | ((messages.Output_Short_Circuit_Failure & ( can.SIGNLE_READ_Mask1)) << can.ICM_ERROR_OUTPUT_SHORT_CIRCUIT_FAILURE_MASK0));
 data[1] = (byte)((messages.Reserved & ( can.SIGNLE_READ_Mask1)));
  return can.ICM_ERROR_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_TimeStamp_Sync_Message( CanConverter.TimeStamp_Sync_Message_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.VCU_TimeStamp=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.TIMESTAMP_SYNC_MESSAGE_CANID_VCU_TIMESTAMP_OFFSET);
  return can.TIMESTAMP_SYNC_MESSAGE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_TimeStamp_Sync_Message( CanConverter.TimeStamp_Sync_Message_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.VCU_TimeStamp=(int) (messages.VCU_TimeStamp - can.TIMESTAMP_SYNC_MESSAGE_CANID_VCU_TIMESTAMP_OFFSET);
 data[0] = (byte)((messages.VCU_TimeStamp & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.VCU_TimeStamp >> can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.VCU_TimeStamp >> can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.VCU_TimeStamp >> can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.VCU_TimeStamp >> can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.VCU_TimeStamp >> can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.VCU_TimeStamp >> can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.VCU_TimeStamp >> can.TIMESTAMP_SYNC_MESSAGE_VCU_TIMESTAMP_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.TIMESTAMP_SYNC_MESSAGE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_RSC_Diagnostic_Request( CanConverter.RSC_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.RSC_Diag_Req=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.RSC_DIAGNOSTIC_REQUEST_CANID_RSC_DIAG_REQ_OFFSET);
  return can.RSC_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Serialize_RSC_Diagnostic_Request( CanConverter.RSC_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.RSC_Diag_Req=(int) (messages.RSC_Diag_Req - can.RSC_DIAGNOSTIC_REQUEST_CANID_RSC_DIAG_REQ_OFFSET);
 data[0] = (byte)((messages.RSC_Diag_Req & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.RSC_Diag_Req >> can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.RSC_Diag_Req >> can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.RSC_Diag_Req >> can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.RSC_Diag_Req >> can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.RSC_Diag_Req >> can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.RSC_Diag_Req >> can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.RSC_Diag_Req >> can.RSC_DIAGNOSTIC_REQUEST_RSC_DIAG_REQ_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.RSC_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_RSC_Diagnostic_Response( CanConverter.RSC_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.RSC_Diag_Resp=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.RSC_DIAGNOSTIC_RESPONSE_CANID_RSC_DIAG_RESP_OFFSET);
  return can.RSC_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_RSC_Diagnostic_Response( CanConverter.RSC_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.RSC_Diag_Resp=(int) (messages.RSC_Diag_Resp - can.RSC_DIAGNOSTIC_RESPONSE_CANID_RSC_DIAG_RESP_OFFSET);
 data[0] = (byte)((messages.RSC_Diag_Resp & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.RSC_Diag_Resp >> can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.RSC_Diag_Resp >> can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.RSC_Diag_Resp >> can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.RSC_Diag_Resp >> can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.RSC_Diag_Resp >> can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.RSC_Diag_Resp >> can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.RSC_Diag_Resp >> can.RSC_DIAGNOSTIC_RESPONSE_RSC_DIAG_RESP_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.RSC_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_LSC_Diagnostic_Request( CanConverter.LSC_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.LSC_Diag_Req=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.LSC_DIAGNOSTIC_REQUEST_CANID_LSC_DIAG_REQ_OFFSET);
  return can.LSC_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Serialize_LSC_Diagnostic_Request( CanConverter.LSC_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.LSC_Diag_Req=(int) (messages.LSC_Diag_Req - can.LSC_DIAGNOSTIC_REQUEST_CANID_LSC_DIAG_REQ_OFFSET);
 data[0] = (byte)((messages.LSC_Diag_Req & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.LSC_Diag_Req >> can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.LSC_Diag_Req >> can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.LSC_Diag_Req >> can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.LSC_Diag_Req >> can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.LSC_Diag_Req >> can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.LSC_Diag_Req >> can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.LSC_Diag_Req >> can.LSC_DIAGNOSTIC_REQUEST_LSC_DIAG_REQ_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.LSC_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_LSC_Diagnostic_Response( CanConverter.LSC_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.LSC_Diagnostic_Response=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.LSC_DIAGNOSTIC_RESPONSE_CANID_LSC_DIAGNOSTIC_RESPONSE_OFFSET);
  return can.LSC_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_LSC_Diagnostic_Response( CanConverter.LSC_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.LSC_Diagnostic_Response=(int) (messages.LSC_Diagnostic_Response - can.LSC_DIAGNOSTIC_RESPONSE_CANID_LSC_DIAGNOSTIC_RESPONSE_OFFSET);
 data[0] = (byte)((messages.LSC_Diagnostic_Response & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.LSC_Diagnostic_Response >> can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.LSC_Diagnostic_Response >> can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.LSC_Diagnostic_Response >> can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.LSC_Diagnostic_Response >> can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.LSC_Diagnostic_Response >> can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.LSC_Diagnostic_Response >> can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.LSC_Diagnostic_Response >> can.LSC_DIAGNOSTIC_RESPONSE_LSC_DIAGNOSTIC_RESPONSE_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.LSC_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_Diagnostic_Request( CanConverter.MCU_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Diag_Request=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.MCU_DIAGNOSTIC_REQUEST_CANID_MCU_DIAG_REQUEST_OFFSET);
  return can.MCU_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_Diagnostic_Request( CanConverter.MCU_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Diag_Request=(int) (messages.MCU_Diag_Request - can.MCU_DIAGNOSTIC_REQUEST_CANID_MCU_DIAG_REQUEST_OFFSET);
 data[0] = (byte)((messages.MCU_Diag_Request & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.MCU_Diag_Request >> can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.MCU_Diag_Request >> can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.MCU_Diag_Request >> can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.MCU_Diag_Request >> can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.MCU_Diag_Request >> can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.MCU_Diag_Request >> can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.MCU_Diag_Request >> can.MCU_DIAGNOSTIC_REQUEST_MCU_DIAG_REQUEST_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.MCU_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_MCU_Diagnostic_Response( CanConverter.MCU_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Diagnostic_Response=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.MCU_DIAGNOSTIC_RESPONSE_CANID_MCU_DIAGNOSTIC_RESPONSE_OFFSET);
  return can.MCU_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_MCU_Diagnostic_Response( CanConverter.MCU_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.MCU_Diagnostic_Response=(int) (messages.MCU_Diagnostic_Response - can.MCU_DIAGNOSTIC_RESPONSE_CANID_MCU_DIAGNOSTIC_RESPONSE_OFFSET);
 data[0] = (byte)((messages.MCU_Diagnostic_Response & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.MCU_Diagnostic_Response >> can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.MCU_Diagnostic_Response >> can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.MCU_Diagnostic_Response >> can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.MCU_Diagnostic_Response >> can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.MCU_Diagnostic_Response >> can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.MCU_Diagnostic_Response >> can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.MCU_Diagnostic_Response >> can.MCU_DIAGNOSTIC_RESPONSE_MCU_DIAGNOSTIC_RESPONSE_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.MCU_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_OBC_Diagnostic_Response( CanConverter.OBC_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_Diag_Resp=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.OBC_DIAGNOSTIC_RESPONSE_CANID_OBC_DIAG_RESP_OFFSET);
  return can.OBC_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_OBC_Diagnostic_Response( CanConverter.OBC_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_Diag_Resp=(int) (messages.OBC_Diag_Resp - can.OBC_DIAGNOSTIC_RESPONSE_CANID_OBC_DIAG_RESP_OFFSET);
 data[0] = (byte)((messages.OBC_Diag_Resp & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.OBC_Diag_Resp >> can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.OBC_Diag_Resp >> can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.OBC_Diag_Resp >> can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.OBC_Diag_Resp >> can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.OBC_Diag_Resp >> can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.OBC_Diag_Resp >> can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.OBC_Diag_Resp >> can.OBC_DIAGNOSTIC_RESPONSE_OBC_DIAG_RESP_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.OBC_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ABS_Diag_Request( CanConverter.ABS_Diag_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ABS_Diag_Request=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.ABS_DIAG_REQUEST_CANID_ABS_DIAG_REQUEST_OFFSET);
  return can.ABS_DIAG_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ABS_Diag_Request( CanConverter.ABS_Diag_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ABS_Diag_Request=(int) (messages.ABS_Diag_Request - can.ABS_DIAG_REQUEST_CANID_ABS_DIAG_REQUEST_OFFSET);
 data[0] = (byte)((messages.ABS_Diag_Request & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.ABS_Diag_Request >> can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.ABS_Diag_Request >> can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.ABS_Diag_Request >> can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.ABS_Diag_Request >> can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.ABS_Diag_Request >> can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.ABS_Diag_Request >> can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.ABS_Diag_Request >> can.ABS_DIAG_REQUEST_ABS_DIAG_REQUEST_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.ABS_DIAG_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ABS_Diag_Response( CanConverter.ABS_Diag_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ABS_Diag_Response=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.ABS_DIAG_RESPONSE_CANID_ABS_DIAG_RESPONSE_OFFSET);
  return can.ABS_DIAG_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ABS_Diag_Response( CanConverter.ABS_Diag_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ABS_Diag_Response=(int) (messages.ABS_Diag_Response - can.ABS_DIAG_RESPONSE_CANID_ABS_DIAG_RESPONSE_OFFSET);
 data[0] = (byte)((messages.ABS_Diag_Response & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.ABS_Diag_Response >> can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.ABS_Diag_Response >> can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.ABS_Diag_Response >> can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.ABS_Diag_Response >> can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.ABS_Diag_Response >> can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.ABS_Diag_Response >> can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.ABS_Diag_Response >> can.ABS_DIAG_RESPONSE_ABS_DIAG_RESPONSE_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.ABS_DIAG_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_OBC_Diagnostic_Request( CanConverter.OBC_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_Diag_Request=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.OBC_DIAGNOSTIC_REQUEST_CANID_OBC_DIAG_REQUEST_OFFSET);
  return can.OBC_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Serialize_OBC_Diagnostic_Request( CanConverter.OBC_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.OBC_Diag_Request=(int) (messages.OBC_Diag_Request - can.OBC_DIAGNOSTIC_REQUEST_CANID_OBC_DIAG_REQUEST_OFFSET);
 data[0] = (byte)((messages.OBC_Diag_Request & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.OBC_Diag_Request >> can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.OBC_Diag_Request >> can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.OBC_Diag_Request >> can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.OBC_Diag_Request >> can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.OBC_Diag_Request >> can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.OBC_Diag_Request >> can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.OBC_Diag_Request >> can.OBC_DIAGNOSTIC_REQUEST_OBC_DIAG_REQUEST_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.OBC_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_HU_Diagnostic_Response( CanConverter.HU_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.HU_Diagnostic_Response=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.HU_DIAGNOSTIC_RESPONSE_CANID_HU_DIAGNOSTIC_RESPONSE_OFFSET);
  return can.HU_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_HU_Diagnostic_Response( CanConverter.HU_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.HU_Diagnostic_Response=(int) (messages.HU_Diagnostic_Response - can.HU_DIAGNOSTIC_RESPONSE_CANID_HU_DIAGNOSTIC_RESPONSE_OFFSET);
 data[0] = (byte)((messages.HU_Diagnostic_Response & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.HU_Diagnostic_Response >> can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.HU_Diagnostic_Response >> can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.HU_Diagnostic_Response >> can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.HU_Diagnostic_Response >> can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.HU_Diagnostic_Response >> can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.HU_Diagnostic_Response >> can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.HU_Diagnostic_Response >> can.HU_DIAGNOSTIC_RESPONSE_HU_DIAGNOSTIC_RESPONSE_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.HU_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_HU_Diagnostic_Request( CanConverter.HU_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.HU_Diag_Req=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.HU_DIAGNOSTIC_REQUEST_CANID_HU_DIAG_REQ_OFFSET);
  return can.HU_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Serialize_HU_Diagnostic_Request( CanConverter.HU_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.HU_Diag_Req=(int) (messages.HU_Diag_Req - can.HU_DIAGNOSTIC_REQUEST_CANID_HU_DIAG_REQ_OFFSET);
 data[0] = (byte)((messages.HU_Diag_Req & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.HU_Diag_Req >> can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.HU_Diag_Req >> can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.HU_Diag_Req >> can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.HU_Diag_Req >> can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.HU_Diag_Req >> can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.HU_Diag_Req >> can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.HU_Diag_Req >> can.HU_DIAGNOSTIC_REQUEST_HU_DIAG_REQ_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.HU_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ESCL_Diagnostic_Response( CanConverter.ESCL_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ESCL_Diagnostic_Response=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.ESCL_DIAGNOSTIC_RESPONSE_CANID_ESCL_DIAGNOSTIC_RESPONSE_OFFSET);
  return can.ESCL_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ESCL_Diagnostic_Response( CanConverter.ESCL_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ESCL_Diagnostic_Response=(int) (messages.ESCL_Diagnostic_Response - can.ESCL_DIAGNOSTIC_RESPONSE_CANID_ESCL_DIAGNOSTIC_RESPONSE_OFFSET);
 data[0] = (byte)((messages.ESCL_Diagnostic_Response & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.ESCL_Diagnostic_Response >> can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.ESCL_Diagnostic_Response >> can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.ESCL_Diagnostic_Response >> can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.ESCL_Diagnostic_Response >> can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.ESCL_Diagnostic_Response >> can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.ESCL_Diagnostic_Response >> can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.ESCL_Diagnostic_Response >> can.ESCL_DIAGNOSTIC_RESPONSE_ESCL_DIAGNOSTIC_RESPONSE_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.ESCL_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_ESCL_Diagnostic_Request( CanConverter.ESCL_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ESCL_Diag_Req=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.ESCL_DIAGNOSTIC_REQUEST_CANID_ESCL_DIAG_REQ_OFFSET);
  return can.ESCL_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Serialize_ESCL_Diagnostic_Request( CanConverter.ESCL_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.ESCL_Diag_Req=(int) (messages.ESCL_Diag_Req - can.ESCL_DIAGNOSTIC_REQUEST_CANID_ESCL_DIAG_REQ_OFFSET);
 data[0] = (byte)((messages.ESCL_Diag_Req & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.ESCL_Diag_Req >> can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.ESCL_Diag_Req >> can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.ESCL_Diag_Req >> can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.ESCL_Diag_Req >> can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.ESCL_Diag_Req >> can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.ESCL_Diag_Req >> can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.ESCL_Diag_Req >> can.ESCL_DIAGNOSTIC_REQUEST_ESCL_DIAG_REQ_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.ESCL_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BCM_Diagnostic_Response( CanConverter.BCM_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BCM_Diag_Response=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BCM_DIAGNOSTIC_RESPONSE_CANID_BCM_DIAG_RESPONSE_OFFSET);
  return can.BCM_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BCM_Diagnostic_Response( CanConverter.BCM_Diagnostic_Response_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BCM_Diag_Response=(int) (messages.BCM_Diag_Response - can.BCM_DIAGNOSTIC_RESPONSE_CANID_BCM_DIAG_RESPONSE_OFFSET);
 data[0] = (byte)((messages.BCM_Diag_Response & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.BCM_Diag_Response >> can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.BCM_Diag_Response >> can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.BCM_Diag_Response >> can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.BCM_Diag_Response >> can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.BCM_Diag_Response >> can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.BCM_Diag_Response >> can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.BCM_Diag_Response >> can.BCM_DIAGNOSTIC_RESPONSE_BCM_DIAG_RESPONSE_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BCM_DIAGNOSTIC_RESPONSE_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BCM_Diagnostic_Request( CanConverter.BCM_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BCM_Diag_Request=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BCM_DIAGNOSTIC_REQUEST_CANID_BCM_DIAG_REQUEST_OFFSET);
  return can.BCM_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BCM_Diagnostic_Request( CanConverter.BCM_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.BCM_Diag_Request=(int) (messages.BCM_Diag_Request - can.BCM_DIAGNOSTIC_REQUEST_CANID_BCM_DIAG_REQUEST_OFFSET);
 data[0] = (byte)((messages.BCM_Diag_Request & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.BCM_Diag_Request >> can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.BCM_Diag_Request >> can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.BCM_Diag_Request >> can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.BCM_Diag_Request >> can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.BCM_Diag_Request >> can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.BCM_Diag_Request >> can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.BCM_Diag_Request >> can.BCM_DIAGNOSTIC_REQUEST_BCM_DIAG_REQUEST_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.BCM_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_Func_Diagnostic_Request( CanConverter.Func_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Functional_Diag_Request=(int)(((/*(long)*/( data[7] & (can.SIGNLE_READ_Mask8)) << can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK0) | (/*(long)*/( data[6] & (can.SIGNLE_READ_Mask8)) << can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK1) | (/*(long)*/( data[5] & (can.SIGNLE_READ_Mask8)) << can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK2) | (/*(long)*/( data[4] & (can.SIGNLE_READ_Mask8)) << can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK3) | (( data[3] & (can.SIGNLE_READ_Mask8)) << can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK4) | (( data[2] & (can.SIGNLE_READ_Mask8)) << can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK5) | (( data[1] & (can.SIGNLE_READ_Mask8)) << can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK6) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.FUNC_DIAGNOSTIC_REQUEST_CANID_FUNCTIONAL_DIAG_REQUEST_OFFSET);
  return can.FUNC_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Serialize_Func_Diagnostic_Request( CanConverter.Func_Diagnostic_Request_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Functional_Diag_Request=(int) (messages.Functional_Diag_Request - can.FUNC_DIAGNOSTIC_REQUEST_CANID_FUNCTIONAL_DIAG_REQUEST_OFFSET);
 data[0] = (byte)((messages.Functional_Diag_Request & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Functional_Diag_Request >> can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK6) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)(((messages.Functional_Diag_Request >> can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK5) & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Functional_Diag_Request >> can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK4) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)(((messages.Functional_Diag_Request >> can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK3) & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Functional_Diag_Request >> can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK2) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)(((messages.Functional_Diag_Request >> can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK1) & (can.SIGNLE_READ_Mask8)));
 data[7] = (byte)(((messages.Functional_Diag_Request >> can.FUNC_DIAGNOSTIC_REQUEST_FUNCTIONAL_DIAG_REQUEST_MASK0) & (can.SIGNLE_READ_Mask8)));
  return can.FUNC_DIAGNOSTIC_REQUEST_ID;
}

/*------------------------------------------------------------*/

public long Deserialize_BATTERY_STATUS_INFO( CanConverter.BATTERY_STATUS_INFO_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Battery_Current=(int)(((( data[1] & (can.SIGNLE_READ_Mask8)) << can.BATTERY_STATUS_INFO_BATTERY_CURRENT_MASK0) | ( data[0] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_STATUS_INFO_CANID_BATTERY_CURRENT_OFFSET);messages.Battery_Pack_SoC=(int)(((( data[3] & (can.SIGNLE_READ_Mask8)) << can.BATTERY_STATUS_INFO_BATTERY_PACK_SOC_MASK0) | ( data[2] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_STATUS_INFO_CANID_BATTERY_PACK_SOC_OFFSET);messages.Charge_Voltage_limit=(int)(((( data[5] & (can.SIGNLE_READ_Mask8)) << can.BATTERY_STATUS_INFO_CHARGE_VOLTAGE_LIMIT_MASK0) | ( data[4] & (can.SIGNLE_READ_Mask8))) + can.BATTERY_STATUS_INFO_CANID_CHARGE_VOLTAGE_LIMIT_OFFSET);messages.Charger_Mode_Request=(int)(((data[6] & (can.SIGNLE_READ_Mask3))) + can.BATTERY_STATUS_INFO_CANID_CHARGER_MODE_REQUEST_OFFSET);
  return can.BATTERY_STATUS_INFO_ID;
}

/*------------------------------------------------------------*/

public long Serialize_BATTERY_STATUS_INFO( CanConverter.BATTERY_STATUS_INFO_t messages, byte[] data)
{
 CanConverter can = new CanConverter();
messages.Battery_Current=(int) (messages.Battery_Current - can.BATTERY_STATUS_INFO_CANID_BATTERY_CURRENT_OFFSET);
messages.Battery_Pack_SoC=(int) (messages.Battery_Pack_SoC - can.BATTERY_STATUS_INFO_CANID_BATTERY_PACK_SOC_OFFSET);
messages.Charge_Voltage_limit=(int) (messages.Charge_Voltage_limit - can.BATTERY_STATUS_INFO_CANID_CHARGE_VOLTAGE_LIMIT_OFFSET);
messages.Charger_Mode_Request=(int) (messages.Charger_Mode_Request - can.BATTERY_STATUS_INFO_CANID_CHARGER_MODE_REQUEST_OFFSET);
 data[0] = (byte)((messages.Battery_Current & (can.SIGNLE_READ_Mask8)));
 data[1] = (byte)(((messages.Battery_Current >> can.BATTERY_STATUS_INFO_BATTERY_CURRENT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[2] = (byte)((messages.Battery_Pack_SoC & (can.SIGNLE_READ_Mask8)));
 data[3] = (byte)(((messages.Battery_Pack_SoC >> can.BATTERY_STATUS_INFO_BATTERY_PACK_SOC_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[4] = (byte)((messages.Charge_Voltage_limit & (can.SIGNLE_READ_Mask8)));
 data[5] = (byte)(((messages.Charge_Voltage_limit >> can.BATTERY_STATUS_INFO_CHARGE_VOLTAGE_LIMIT_MASK0) & (can.SIGNLE_READ_Mask8)));
 data[6] = (byte)((messages.Charger_Mode_Request & ( can.SIGNLE_READ_Mask3)));
  return can.BATTERY_STATUS_INFO_ID;
}

/*------------------------------------------------------------*/

}
public class MainClassConverter {
public static void main(String[] args) {
can_Converter canconvert = new Converter();
byte[] data = new byte[255];

CanConverter.VCU_to_OBC_Auth_Req_t vcuMessages_deserialize_vcu_to_obc_auth_req = new CanConverter.VCU_to_OBC_Auth_Req_t();
canconvert.Deserialize_VCU_to_OBC_Auth_Req( vcuMessages_deserialize_vcu_to_obc_auth_req, data);

CanConverter.VCU_to_OBC_Auth_Req_t vcuMessages_serialize_vcu_to_obc_auth_req = new CanConverter.VCU_to_OBC_Auth_Req_t();
canconvert.Serialize_VCU_to_OBC_Auth_Req( vcuMessages_serialize_vcu_to_obc_auth_req, data);

CanConverter.VCU_to_OBC_Auth_Stat_t vcuMessages_deserialize_vcu_to_obc_auth_stat = new CanConverter.VCU_to_OBC_Auth_Stat_t();
canconvert.Deserialize_VCU_to_OBC_Auth_Stat( vcuMessages_deserialize_vcu_to_obc_auth_stat, data);

CanConverter.VCU_to_OBC_Auth_Stat_t vcuMessages_serialize_vcu_to_obc_auth_stat = new CanConverter.VCU_to_OBC_Auth_Stat_t();
canconvert.Serialize_VCU_to_OBC_Auth_Stat( vcuMessages_serialize_vcu_to_obc_auth_stat, data);

CanConverter.OBC_to_VCU_Auth_Resp_t vcuMessages_deserialize_obc_to_vcu_auth_resp = new CanConverter.OBC_to_VCU_Auth_Resp_t();
canconvert.Deserialize_OBC_to_VCU_Auth_Resp( vcuMessages_deserialize_obc_to_vcu_auth_resp, data);

CanConverter.OBC_to_VCU_Auth_Resp_t vcuMessages_serialize_obc_to_vcu_auth_resp = new CanConverter.OBC_to_VCU_Auth_Resp_t();
canconvert.Serialize_OBC_to_VCU_Auth_Resp( vcuMessages_serialize_obc_to_vcu_auth_resp, data);

CanConverter.VCU_to_MCU_Auth_Req_t vcuMessages_deserialize_vcu_to_mcu_auth_req = new CanConverter.VCU_to_MCU_Auth_Req_t();
canconvert.Deserialize_VCU_to_MCU_Auth_Req( vcuMessages_deserialize_vcu_to_mcu_auth_req, data);

CanConverter.VCU_to_MCU_Auth_Req_t vcuMessages_serialize_vcu_to_mcu_auth_req = new CanConverter.VCU_to_MCU_Auth_Req_t();
canconvert.Serialize_VCU_to_MCU_Auth_Req( vcuMessages_serialize_vcu_to_mcu_auth_req, data);

CanConverter.MCU_to_VCU_Auth_Resp_t vcuMessages_deserialize_mcu_to_vcu_auth_resp = new CanConverter.MCU_to_VCU_Auth_Resp_t();
canconvert.Deserialize_MCU_to_VCU_Auth_Resp( vcuMessages_deserialize_mcu_to_vcu_auth_resp, data);

CanConverter.MCU_to_VCU_Auth_Resp_t vcuMessages_serialize_mcu_to_vcu_auth_resp = new CanConverter.MCU_to_VCU_Auth_Resp_t();
canconvert.Serialize_MCU_to_VCU_Auth_Resp( vcuMessages_serialize_mcu_to_vcu_auth_resp, data);

CanConverter.VCU_to_MCU_Auth_Stat_t vcuMessages_deserialize_vcu_to_mcu_auth_stat = new CanConverter.VCU_to_MCU_Auth_Stat_t();
canconvert.Deserialize_VCU_to_MCU_Auth_Stat( vcuMessages_deserialize_vcu_to_mcu_auth_stat, data);

CanConverter.VCU_to_MCU_Auth_Stat_t vcuMessages_serialize_vcu_to_mcu_auth_stat = new CanConverter.VCU_to_MCU_Auth_Stat_t();
canconvert.Serialize_VCU_to_MCU_Auth_Stat( vcuMessages_serialize_vcu_to_mcu_auth_stat, data);

CanConverter.MCU_Data2_t vcuMessages_deserialize_mcu_data2 = new CanConverter.MCU_Data2_t();
canconvert.Deserialize_MCU_Data2( vcuMessages_deserialize_mcu_data2, data);

CanConverter.MCU_Data2_t vcuMessages_serialize_mcu_data2 = new CanConverter.MCU_Data2_t();
canconvert.Serialize_MCU_Data2( vcuMessages_serialize_mcu_data2, data);

CanConverter.Regen_Set_Percentage_t vcuMessages_deserialize_regen_set_percentage = new CanConverter.Regen_Set_Percentage_t();
canconvert.Deserialize_Regen_Set_Percentage( vcuMessages_deserialize_regen_set_percentage, data);

CanConverter.Regen_Set_Percentage_t vcuMessages_serialize_regen_set_percentage = new CanConverter.Regen_Set_Percentage_t();
canconvert.Serialize_Regen_Set_Percentage( vcuMessages_serialize_regen_set_percentage, data);

CanConverter.BMS_PARAMETER_1_t vcuMessages_deserialize_bms_parameter_1 = new CanConverter.BMS_PARAMETER_1_t();
canconvert.Deserialize_BMS_PARAMETER_1( vcuMessages_deserialize_bms_parameter_1, data);

CanConverter.BMS_PARAMETER_1_t vcuMessages_serialize_bms_parameter_1 = new CanConverter.BMS_PARAMETER_1_t();
canconvert.Serialize_BMS_PARAMETER_1( vcuMessages_serialize_bms_parameter_1, data);

CanConverter.BATTERY_LIMITS_t vcuMessages_deserialize_battery_limits = new CanConverter.BATTERY_LIMITS_t();
canconvert.Deserialize_BATTERY_LIMITS( vcuMessages_deserialize_battery_limits, data);

CanConverter.BATTERY_LIMITS_t vcuMessages_serialize_battery_limits = new CanConverter.BATTERY_LIMITS_t();
canconvert.Serialize_BATTERY_LIMITS( vcuMessages_serialize_battery_limits, data);

CanConverter.BMS_PARAMETER_LIMIT_2_t vcuMessages_deserialize_bms_parameter_limit_2 = new CanConverter.BMS_PARAMETER_LIMIT_2_t();
canconvert.Deserialize_BMS_PARAMETER_LIMIT_2( vcuMessages_deserialize_bms_parameter_limit_2, data);

CanConverter.BMS_PARAMETER_LIMIT_2_t vcuMessages_serialize_bms_parameter_limit_2 = new CanConverter.BMS_PARAMETER_LIMIT_2_t();
canconvert.Serialize_BMS_PARAMETER_LIMIT_2( vcuMessages_serialize_bms_parameter_limit_2, data);

CanConverter.Vehicle_Mode_t vcuMessages_deserialize_vehicle_mode = new CanConverter.Vehicle_Mode_t();
canconvert.Deserialize_Vehicle_Mode( vcuMessages_deserialize_vehicle_mode, data);

CanConverter.Vehicle_Mode_t vcuMessages_serialize_vehicle_mode = new CanConverter.Vehicle_Mode_t();
canconvert.Serialize_Vehicle_Mode( vcuMessages_serialize_vehicle_mode, data);

CanConverter.Traction_Control_t vcuMessages_deserialize_traction_control = new CanConverter.Traction_Control_t();
canconvert.Deserialize_Traction_Control( vcuMessages_deserialize_traction_control, data);

CanConverter.Traction_Control_t vcuMessages_serialize_traction_control = new CanConverter.Traction_Control_t();
canconvert.Serialize_Traction_Control( vcuMessages_serialize_traction_control, data);

CanConverter.SOM_Parameters_1_t vcuMessages_deserialize_som_parameters_1 = new CanConverter.SOM_Parameters_1_t();
canconvert.Deserialize_SOM_Parameters_1( vcuMessages_deserialize_som_parameters_1, data);

CanConverter.SOM_Parameters_1_t vcuMessages_serialize_som_parameters_1 = new CanConverter.SOM_Parameters_1_t();
canconvert.Serialize_SOM_Parameters_1( vcuMessages_serialize_som_parameters_1, data);

CanConverter.ABS_Parameters_t vcuMessages_deserialize_abs_parameters = new CanConverter.ABS_Parameters_t();
canconvert.Deserialize_ABS_Parameters( vcuMessages_deserialize_abs_parameters, data);

CanConverter.ABS_Parameters_t vcuMessages_serialize_abs_parameters = new CanConverter.ABS_Parameters_t();
canconvert.Serialize_ABS_Parameters( vcuMessages_serialize_abs_parameters, data);

CanConverter.Traction_Control2_t vcuMessages_deserialize_traction_control2 = new CanConverter.Traction_Control2_t();
canconvert.Deserialize_Traction_Control2( vcuMessages_deserialize_traction_control2, data);

CanConverter.Traction_Control2_t vcuMessages_serialize_traction_control2 = new CanConverter.Traction_Control2_t();
canconvert.Serialize_Traction_Control2( vcuMessages_serialize_traction_control2, data);

CanConverter.Vehicle_Func_t vcuMessages_deserialize_vehicle_func = new CanConverter.Vehicle_Func_t();
canconvert.Deserialize_Vehicle_Func( vcuMessages_deserialize_vehicle_func, data);

CanConverter.Vehicle_Func_t vcuMessages_serialize_vehicle_func = new CanConverter.Vehicle_Func_t();
canconvert.Serialize_Vehicle_Func( vcuMessages_serialize_vehicle_func, data);

CanConverter.BMS_PARAMETER_3_t vcuMessages_deserialize_bms_parameter_3 = new CanConverter.BMS_PARAMETER_3_t();
canconvert.Deserialize_BMS_PARAMETER_3( vcuMessages_deserialize_bms_parameter_3, data);

CanConverter.BMS_PARAMETER_3_t vcuMessages_serialize_bms_parameter_3 = new CanConverter.BMS_PARAMETER_3_t();
canconvert.Serialize_BMS_PARAMETER_3( vcuMessages_serialize_bms_parameter_3, data);

CanConverter.BMS_PARAMETER_4_t vcuMessages_deserialize_bms_parameter_4 = new CanConverter.BMS_PARAMETER_4_t();
canconvert.Deserialize_BMS_PARAMETER_4( vcuMessages_deserialize_bms_parameter_4, data);

CanConverter.BMS_PARAMETER_4_t vcuMessages_serialize_bms_parameter_4 = new CanConverter.BMS_PARAMETER_4_t();
canconvert.Serialize_BMS_PARAMETER_4( vcuMessages_serialize_bms_parameter_4, data);

CanConverter.Battery_Energy_Cycles_t vcuMessages_deserialize_battery_energy_cycles = new CanConverter.Battery_Energy_Cycles_t();
canconvert.Deserialize_Battery_Energy_Cycles( vcuMessages_deserialize_battery_energy_cycles, data);

CanConverter.Battery_Energy_Cycles_t vcuMessages_serialize_battery_energy_cycles = new CanConverter.Battery_Energy_Cycles_t();
canconvert.Serialize_Battery_Energy_Cycles( vcuMessages_serialize_battery_energy_cycles, data);

CanConverter.OBC_Wakeup_Info_t vcuMessages_deserialize_obc_wakeup_info = new CanConverter.OBC_Wakeup_Info_t();
canconvert.Deserialize_OBC_Wakeup_Info( vcuMessages_deserialize_obc_wakeup_info, data);

CanConverter.OBC_Wakeup_Info_t vcuMessages_serialize_obc_wakeup_info = new CanConverter.OBC_Wakeup_Info_t();
canconvert.Serialize_OBC_Wakeup_Info( vcuMessages_serialize_obc_wakeup_info, data);

CanConverter.BATTERY_TEMPERATURE_t vcuMessages_deserialize_battery_temperature = new CanConverter.BATTERY_TEMPERATURE_t();
canconvert.Deserialize_BATTERY_TEMPERATURE( vcuMessages_deserialize_battery_temperature, data);

CanConverter.BATTERY_TEMPERATURE_t vcuMessages_serialize_battery_temperature = new CanConverter.BATTERY_TEMPERATURE_t();
canconvert.Serialize_BATTERY_TEMPERATURE( vcuMessages_serialize_battery_temperature, data);

CanConverter.Custom_Mode_t vcuMessages_deserialize_custom_mode = new CanConverter.Custom_Mode_t();
canconvert.Deserialize_Custom_Mode( vcuMessages_deserialize_custom_mode, data);

CanConverter.Custom_Mode_t vcuMessages_serialize_custom_mode = new CanConverter.Custom_Mode_t();
canconvert.Serialize_Custom_Mode( vcuMessages_serialize_custom_mode, data);

CanConverter.VCU_Data_t vcuMessages_deserialize_vcu_data = new CanConverter.VCU_Data_t();
canconvert.Deserialize_VCU_Data( vcuMessages_deserialize_vcu_data, data);

CanConverter.VCU_Data_t vcuMessages_serialize_vcu_data = new CanConverter.VCU_Data_t();
canconvert.Serialize_VCU_Data( vcuMessages_serialize_vcu_data, data);

CanConverter.BMS_CELL_STATUS_t vcuMessages_deserialize_bms_cell_status = new CanConverter.BMS_CELL_STATUS_t();
canconvert.Deserialize_BMS_CELL_STATUS( vcuMessages_deserialize_bms_cell_status, data);

CanConverter.BMS_CELL_STATUS_t vcuMessages_serialize_bms_cell_status = new CanConverter.BMS_CELL_STATUS_t();
canconvert.Serialize_BMS_CELL_STATUS( vcuMessages_serialize_bms_cell_status, data);

CanConverter.Charger_Parameter_1_t vcuMessages_deserialize_charger_parameter_1 = new CanConverter.Charger_Parameter_1_t();
canconvert.Deserialize_Charger_Parameter_1( vcuMessages_deserialize_charger_parameter_1, data);

CanConverter.Charger_Parameter_1_t vcuMessages_serialize_charger_parameter_1 = new CanConverter.Charger_Parameter_1_t();
canconvert.Serialize_Charger_Parameter_1( vcuMessages_serialize_charger_parameter_1, data);

CanConverter.OBC_HP_DCDC_Parameter_2_t vcuMessages_deserialize_obc_hp_dcdc_parameter_2 = new CanConverter.OBC_HP_DCDC_Parameter_2_t();
canconvert.Deserialize_OBC_HP_DCDC_Parameter_2( vcuMessages_deserialize_obc_hp_dcdc_parameter_2, data);

CanConverter.OBC_HP_DCDC_Parameter_2_t vcuMessages_serialize_obc_hp_dcdc_parameter_2 = new CanConverter.OBC_HP_DCDC_Parameter_2_t();
canconvert.Serialize_OBC_HP_DCDC_Parameter_2( vcuMessages_serialize_obc_hp_dcdc_parameter_2, data);

CanConverter.BMS_CELL_VOLTAGE_1_t vcuMessages_deserialize_bms_cell_voltage_1 = new CanConverter.BMS_CELL_VOLTAGE_1_t();
canconvert.Deserialize_BMS_CELL_VOLTAGE_1( vcuMessages_deserialize_bms_cell_voltage_1, data);

CanConverter.BMS_CELL_VOLTAGE_1_t vcuMessages_serialize_bms_cell_voltage_1 = new CanConverter.BMS_CELL_VOLTAGE_1_t();
canconvert.Serialize_BMS_CELL_VOLTAGE_1( vcuMessages_serialize_bms_cell_voltage_1, data);

CanConverter.BMS_CELL_VOLTAGE_2_t vcuMessages_deserialize_bms_cell_voltage_2 = new CanConverter.BMS_CELL_VOLTAGE_2_t();
canconvert.Deserialize_BMS_CELL_VOLTAGE_2( vcuMessages_deserialize_bms_cell_voltage_2, data);

CanConverter.BMS_CELL_VOLTAGE_2_t vcuMessages_serialize_bms_cell_voltage_2 = new CanConverter.BMS_CELL_VOLTAGE_2_t();
canconvert.Serialize_BMS_CELL_VOLTAGE_2( vcuMessages_serialize_bms_cell_voltage_2, data);

CanConverter.BMS_CELL_VOLTAGE_3_t vcuMessages_deserialize_bms_cell_voltage_3 = new CanConverter.BMS_CELL_VOLTAGE_3_t();
canconvert.Deserialize_BMS_CELL_VOLTAGE_3( vcuMessages_deserialize_bms_cell_voltage_3, data);

CanConverter.BMS_CELL_VOLTAGE_3_t vcuMessages_serialize_bms_cell_voltage_3 = new CanConverter.BMS_CELL_VOLTAGE_3_t();
canconvert.Serialize_BMS_CELL_VOLTAGE_3( vcuMessages_serialize_bms_cell_voltage_3, data);

CanConverter.BMS_CELL_VOLTAGE_4_t vcuMessages_deserialize_bms_cell_voltage_4 = new CanConverter.BMS_CELL_VOLTAGE_4_t();
canconvert.Deserialize_BMS_CELL_VOLTAGE_4( vcuMessages_deserialize_bms_cell_voltage_4, data);

CanConverter.BMS_CELL_VOLTAGE_4_t vcuMessages_serialize_bms_cell_voltage_4 = new CanConverter.BMS_CELL_VOLTAGE_4_t();
canconvert.Serialize_BMS_CELL_VOLTAGE_4( vcuMessages_serialize_bms_cell_voltage_4, data);

CanConverter.BMS_CELL_VOLTAGE_5_t vcuMessages_deserialize_bms_cell_voltage_5 = new CanConverter.BMS_CELL_VOLTAGE_5_t();
canconvert.Deserialize_BMS_CELL_VOLTAGE_5( vcuMessages_deserialize_bms_cell_voltage_5, data);

CanConverter.BMS_CELL_VOLTAGE_5_t vcuMessages_serialize_bms_cell_voltage_5 = new CanConverter.BMS_CELL_VOLTAGE_5_t();
canconvert.Serialize_BMS_CELL_VOLTAGE_5( vcuMessages_serialize_bms_cell_voltage_5, data);

CanConverter.BMS_CELL_VOLTAGE_6_t vcuMessages_deserialize_bms_cell_voltage_6 = new CanConverter.BMS_CELL_VOLTAGE_6_t();
canconvert.Deserialize_BMS_CELL_VOLTAGE_6( vcuMessages_deserialize_bms_cell_voltage_6, data);

CanConverter.BMS_CELL_VOLTAGE_6_t vcuMessages_serialize_bms_cell_voltage_6 = new CanConverter.BMS_CELL_VOLTAGE_6_t();
canconvert.Serialize_BMS_CELL_VOLTAGE_6( vcuMessages_serialize_bms_cell_voltage_6, data);

CanConverter.BMS_CELL_VOLTAGE_7_t vcuMessages_deserialize_bms_cell_voltage_7 = new CanConverter.BMS_CELL_VOLTAGE_7_t();
canconvert.Deserialize_BMS_CELL_VOLTAGE_7( vcuMessages_deserialize_bms_cell_voltage_7, data);

CanConverter.BMS_CELL_VOLTAGE_7_t vcuMessages_serialize_bms_cell_voltage_7 = new CanConverter.BMS_CELL_VOLTAGE_7_t();
canconvert.Serialize_BMS_CELL_VOLTAGE_7( vcuMessages_serialize_bms_cell_voltage_7, data);

CanConverter.Charger_status_Info_t vcuMessages_deserialize_charger_status_info = new CanConverter.Charger_status_Info_t();
canconvert.Deserialize_Charger_status_Info( vcuMessages_deserialize_charger_status_info, data);

CanConverter.Charger_status_Info_t vcuMessages_serialize_charger_status_info = new CanConverter.Charger_status_Info_t();
canconvert.Serialize_Charger_status_Info( vcuMessages_serialize_charger_status_info, data);

CanConverter.MCU_Data3_t vcuMessages_deserialize_mcu_data3 = new CanConverter.MCU_Data3_t();
canconvert.Deserialize_MCU_Data3( vcuMessages_deserialize_mcu_data3, data);

CanConverter.MCU_Data3_t vcuMessages_serialize_mcu_data3 = new CanConverter.MCU_Data3_t();
canconvert.Serialize_MCU_Data3( vcuMessages_serialize_mcu_data3, data);

CanConverter.MCU_Data4_t vcuMessages_deserialize_mcu_data4 = new CanConverter.MCU_Data4_t();
canconvert.Deserialize_MCU_Data4( vcuMessages_deserialize_mcu_data4, data);

CanConverter.MCU_Data4_t vcuMessages_serialize_mcu_data4 = new CanConverter.MCU_Data4_t();
canconvert.Serialize_MCU_Data4( vcuMessages_serialize_mcu_data4, data);

CanConverter.MCU_Data5_t vcuMessages_deserialize_mcu_data5 = new CanConverter.MCU_Data5_t();
canconvert.Deserialize_MCU_Data5( vcuMessages_deserialize_mcu_data5, data);

CanConverter.MCU_Data5_t vcuMessages_serialize_mcu_data5 = new CanConverter.MCU_Data5_t();
canconvert.Serialize_MCU_Data5( vcuMessages_serialize_mcu_data5, data);

CanConverter.MCU_Data6_t vcuMessages_deserialize_mcu_data6 = new CanConverter.MCU_Data6_t();
canconvert.Deserialize_MCU_Data6( vcuMessages_deserialize_mcu_data6, data);

CanConverter.MCU_Data6_t vcuMessages_serialize_mcu_data6 = new CanConverter.MCU_Data6_t();
canconvert.Serialize_MCU_Data6( vcuMessages_serialize_mcu_data6, data);

CanConverter.MCU_Data1_t vcuMessages_deserialize_mcu_data1 = new CanConverter.MCU_Data1_t();
canconvert.Deserialize_MCU_Data1( vcuMessages_deserialize_mcu_data1, data);

CanConverter.MCU_Data1_t vcuMessages_serialize_mcu_data1 = new CanConverter.MCU_Data1_t();
canconvert.Serialize_MCU_Data1( vcuMessages_serialize_mcu_data1, data);

CanConverter.MCU_Disconnect_ACK_t vcuMessages_deserialize_mcu_disconnect_ack = new CanConverter.MCU_Disconnect_ACK_t();
canconvert.Deserialize_MCU_Disconnect_ACK( vcuMessages_deserialize_mcu_disconnect_ack, data);

CanConverter.MCU_Disconnect_ACK_t vcuMessages_serialize_mcu_disconnect_ack = new CanConverter.MCU_Disconnect_ACK_t();
canconvert.Serialize_MCU_Disconnect_ACK( vcuMessages_serialize_mcu_disconnect_ack, data);

CanConverter.MCU_Fault_Data_t vcuMessages_deserialize_mcu_fault_data = new CanConverter.MCU_Fault_Data_t();
canconvert.Deserialize_MCU_Fault_Data( vcuMessages_deserialize_mcu_fault_data, data);

CanConverter.MCU_Fault_Data_t vcuMessages_serialize_mcu_fault_data = new CanConverter.MCU_Fault_Data_t();
canconvert.Serialize_MCU_Fault_Data( vcuMessages_serialize_mcu_fault_data, data);

CanConverter.MCU_Fault_Data2_t vcuMessages_deserialize_mcu_fault_data2 = new CanConverter.MCU_Fault_Data2_t();
canconvert.Deserialize_MCU_Fault_Data2( vcuMessages_deserialize_mcu_fault_data2, data);

CanConverter.MCU_Fault_Data2_t vcuMessages_serialize_mcu_fault_data2 = new CanConverter.MCU_Fault_Data2_t();
canconvert.Serialize_MCU_Fault_Data2( vcuMessages_serialize_mcu_fault_data2, data);

CanConverter.Display_info_t vcuMessages_deserialize_display_info = new CanConverter.Display_info_t();
canconvert.Deserialize_Display_info( vcuMessages_deserialize_display_info, data);

CanConverter.Display_info_t vcuMessages_serialize_display_info = new CanConverter.Display_info_t();
canconvert.Serialize_Display_info( vcuMessages_serialize_display_info, data);

CanConverter.Environment_Data_t vcuMessages_deserialize_environment_data = new CanConverter.Environment_Data_t();
canconvert.Deserialize_Environment_Data( vcuMessages_deserialize_environment_data, data);

CanConverter.Environment_Data_t vcuMessages_serialize_environment_data = new CanConverter.Environment_Data_t();
canconvert.Serialize_Environment_Data( vcuMessages_serialize_environment_data, data);

CanConverter.BMS_Fault_1_t vcuMessages_deserialize_bms_fault_1 = new CanConverter.BMS_Fault_1_t();
canconvert.Deserialize_BMS_Fault_1( vcuMessages_deserialize_bms_fault_1, data);

CanConverter.BMS_Fault_1_t vcuMessages_serialize_bms_fault_1 = new CanConverter.BMS_Fault_1_t();
canconvert.Serialize_BMS_Fault_1( vcuMessages_serialize_bms_fault_1, data);

CanConverter.BMS_Fault_2_t vcuMessages_deserialize_bms_fault_2 = new CanConverter.BMS_Fault_2_t();
canconvert.Deserialize_BMS_Fault_2( vcuMessages_deserialize_bms_fault_2, data);

CanConverter.BMS_Fault_2_t vcuMessages_serialize_bms_fault_2 = new CanConverter.BMS_Fault_2_t();
canconvert.Serialize_BMS_Fault_2( vcuMessages_serialize_bms_fault_2, data);

CanConverter.ESCL_Data_t vcuMessages_deserialize_escl_data = new CanConverter.ESCL_Data_t();
canconvert.Deserialize_ESCL_Data( vcuMessages_deserialize_escl_data, data);

CanConverter.ESCL_Data_t vcuMessages_serialize_escl_data = new CanConverter.ESCL_Data_t();
canconvert.Serialize_ESCL_Data( vcuMessages_serialize_escl_data, data);

CanConverter.Charger_Fault_Info_t vcuMessages_deserialize_charger_fault_info = new CanConverter.Charger_Fault_Info_t();
canconvert.Deserialize_Charger_Fault_Info( vcuMessages_deserialize_charger_fault_info, data);

CanConverter.Charger_Fault_Info_t vcuMessages_serialize_charger_fault_info = new CanConverter.Charger_Fault_Info_t();
canconvert.Serialize_Charger_Fault_Info( vcuMessages_serialize_charger_fault_info, data);

CanConverter.HP_DCDC_Parameter1_t vcuMessages_deserialize_hp_dcdc_parameter1 = new CanConverter.HP_DCDC_Parameter1_t();
canconvert.Deserialize_HP_DCDC_Parameter1( vcuMessages_deserialize_hp_dcdc_parameter1, data);

CanConverter.HP_DCDC_Parameter1_t vcuMessages_serialize_hp_dcdc_parameter1 = new CanConverter.HP_DCDC_Parameter1_t();
canconvert.Serialize_HP_DCDC_Parameter1( vcuMessages_serialize_hp_dcdc_parameter1, data);

CanConverter.IMU_Data_X_t vcuMessages_deserialize_imu_data_x = new CanConverter.IMU_Data_X_t();
canconvert.Deserialize_IMU_Data_X( vcuMessages_deserialize_imu_data_x, data);

CanConverter.IMU_Data_X_t vcuMessages_serialize_imu_data_x = new CanConverter.IMU_Data_X_t();
canconvert.Serialize_IMU_Data_X( vcuMessages_serialize_imu_data_x, data);

CanConverter.MCU_SW_Version_t vcuMessages_deserialize_mcu_sw_version = new CanConverter.MCU_SW_Version_t();
canconvert.Deserialize_MCU_SW_Version( vcuMessages_deserialize_mcu_sw_version, data);

CanConverter.MCU_SW_Version_t vcuMessages_serialize_mcu_sw_version = new CanConverter.MCU_SW_Version_t();
canconvert.Serialize_MCU_SW_Version( vcuMessages_serialize_mcu_sw_version, data);

CanConverter.MCU_HW_Version_t vcuMessages_deserialize_mcu_hw_version = new CanConverter.MCU_HW_Version_t();
canconvert.Deserialize_MCU_HW_Version( vcuMessages_deserialize_mcu_hw_version, data);

CanConverter.MCU_HW_Version_t vcuMessages_serialize_mcu_hw_version = new CanConverter.MCU_HW_Version_t();
canconvert.Serialize_MCU_HW_Version( vcuMessages_serialize_mcu_hw_version, data);

CanConverter.ICM_HW_Version_Info_t vcuMessages_deserialize_icm_hw_version_info = new CanConverter.ICM_HW_Version_Info_t();
canconvert.Deserialize_ICM_HW_Version_Info( vcuMessages_deserialize_icm_hw_version_info, data);

CanConverter.ICM_HW_Version_Info_t vcuMessages_serialize_icm_hw_version_info = new CanConverter.ICM_HW_Version_Info_t();
canconvert.Serialize_ICM_HW_Version_Info( vcuMessages_serialize_icm_hw_version_info, data);

CanConverter.ICM_SW_Version_t vcuMessages_deserialize_icm_sw_version = new CanConverter.ICM_SW_Version_t();
canconvert.Deserialize_ICM_SW_Version( vcuMessages_deserialize_icm_sw_version, data);

CanConverter.ICM_SW_Version_t vcuMessages_serialize_icm_sw_version = new CanConverter.ICM_SW_Version_t();
canconvert.Serialize_ICM_SW_Version( vcuMessages_serialize_icm_sw_version, data);

CanConverter.ESCL_HW_Version_Info_t vcuMessages_deserialize_escl_hw_version_info = new CanConverter.ESCL_HW_Version_Info_t();
canconvert.Deserialize_ESCL_HW_Version_Info( vcuMessages_deserialize_escl_hw_version_info, data);

CanConverter.ESCL_HW_Version_Info_t vcuMessages_serialize_escl_hw_version_info = new CanConverter.ESCL_HW_Version_Info_t();
canconvert.Serialize_ESCL_HW_Version_Info( vcuMessages_serialize_escl_hw_version_info, data);

CanConverter.OBC_SW_Version_t vcuMessages_deserialize_obc_sw_version = new CanConverter.OBC_SW_Version_t();
canconvert.Deserialize_OBC_SW_Version( vcuMessages_deserialize_obc_sw_version, data);

CanConverter.OBC_SW_Version_t vcuMessages_serialize_obc_sw_version = new CanConverter.OBC_SW_Version_t();
canconvert.Serialize_OBC_SW_Version( vcuMessages_serialize_obc_sw_version, data);

CanConverter.OBC_HW_Version_t vcuMessages_deserialize_obc_hw_version = new CanConverter.OBC_HW_Version_t();
canconvert.Deserialize_OBC_HW_Version( vcuMessages_deserialize_obc_hw_version, data);

CanConverter.OBC_HW_Version_t vcuMessages_serialize_obc_hw_version = new CanConverter.OBC_HW_Version_t();
canconvert.Serialize_OBC_HW_Version( vcuMessages_serialize_obc_hw_version, data);

CanConverter.ESCL_SW_Version_Info_t vcuMessages_deserialize_escl_sw_version_info = new CanConverter.ESCL_SW_Version_Info_t();
canconvert.Deserialize_ESCL_SW_Version_Info( vcuMessages_deserialize_escl_sw_version_info, data);

CanConverter.ESCL_SW_Version_Info_t vcuMessages_serialize_escl_sw_version_info = new CanConverter.ESCL_SW_Version_Info_t();
canconvert.Serialize_ESCL_SW_Version_Info( vcuMessages_serialize_escl_sw_version_info, data);

CanConverter.RSC_HW_Version_Info_t vcuMessages_deserialize_rsc_hw_version_info = new CanConverter.RSC_HW_Version_Info_t();
canconvert.Deserialize_RSC_HW_Version_Info( vcuMessages_deserialize_rsc_hw_version_info, data);

CanConverter.RSC_HW_Version_Info_t vcuMessages_serialize_rsc_hw_version_info = new CanConverter.RSC_HW_Version_Info_t();
canconvert.Serialize_RSC_HW_Version_Info( vcuMessages_serialize_rsc_hw_version_info, data);

CanConverter.RSC_SW_Version_t vcuMessages_deserialize_rsc_sw_version = new CanConverter.RSC_SW_Version_t();
canconvert.Deserialize_RSC_SW_Version( vcuMessages_deserialize_rsc_sw_version, data);

CanConverter.RSC_SW_Version_t vcuMessages_serialize_rsc_sw_version = new CanConverter.RSC_SW_Version_t();
canconvert.Serialize_RSC_SW_Version( vcuMessages_serialize_rsc_sw_version, data);

CanConverter.LSC_HW_Version_Info_t vcuMessages_deserialize_lsc_hw_version_info = new CanConverter.LSC_HW_Version_Info_t();
canconvert.Deserialize_LSC_HW_Version_Info( vcuMessages_deserialize_lsc_hw_version_info, data);

CanConverter.LSC_HW_Version_Info_t vcuMessages_serialize_lsc_hw_version_info = new CanConverter.LSC_HW_Version_Info_t();
canconvert.Serialize_LSC_HW_Version_Info( vcuMessages_serialize_lsc_hw_version_info, data);

CanConverter.LSC_SW_Version_t vcuMessages_deserialize_lsc_sw_version = new CanConverter.LSC_SW_Version_t();
canconvert.Deserialize_LSC_SW_Version( vcuMessages_deserialize_lsc_sw_version, data);

CanConverter.LSC_SW_Version_t vcuMessages_serialize_lsc_sw_version = new CanConverter.LSC_SW_Version_t();
canconvert.Serialize_LSC_SW_Version( vcuMessages_serialize_lsc_sw_version, data);

CanConverter.IMU_Data_Y_t vcuMessages_deserialize_imu_data_y = new CanConverter.IMU_Data_Y_t();
canconvert.Deserialize_IMU_Data_Y( vcuMessages_deserialize_imu_data_y, data);

CanConverter.IMU_Data_Y_t vcuMessages_serialize_imu_data_y = new CanConverter.IMU_Data_Y_t();
canconvert.Serialize_IMU_Data_Y( vcuMessages_serialize_imu_data_y, data);

CanConverter.IC_Paramter_1_t vcuMessages_deserialize_ic_paramter_1 = new CanConverter.IC_Paramter_1_t();
canconvert.Deserialize_IC_Paramter_1( vcuMessages_deserialize_ic_paramter_1, data);

CanConverter.IC_Paramter_1_t vcuMessages_serialize_ic_paramter_1 = new CanConverter.IC_Paramter_1_t();
canconvert.Serialize_IC_Paramter_1( vcuMessages_serialize_ic_paramter_1, data);

CanConverter.ICM_Digital_Input_t vcuMessages_deserialize_icm_digital_input = new CanConverter.ICM_Digital_Input_t();
canconvert.Deserialize_ICM_Digital_Input( vcuMessages_deserialize_icm_digital_input, data);

CanConverter.ICM_Digital_Input_t vcuMessages_serialize_icm_digital_input = new CanConverter.ICM_Digital_Input_t();
canconvert.Serialize_ICM_Digital_Input( vcuMessages_serialize_icm_digital_input, data);

CanConverter.IMU_Data_Z_t vcuMessages_deserialize_imu_data_z = new CanConverter.IMU_Data_Z_t();
canconvert.Deserialize_IMU_Data_Z( vcuMessages_deserialize_imu_data_z, data);

CanConverter.IMU_Data_Z_t vcuMessages_serialize_imu_data_z = new CanConverter.IMU_Data_Z_t();
canconvert.Serialize_IMU_Data_Z( vcuMessages_serialize_imu_data_z, data);

CanConverter.BMS_SOFTWARE_VERSIONS_t vcuMessages_deserialize_bms_software_versions = new CanConverter.BMS_SOFTWARE_VERSIONS_t();
canconvert.Deserialize_BMS_SOFTWARE_VERSIONS( vcuMessages_deserialize_bms_software_versions, data);

CanConverter.BMS_SOFTWARE_VERSIONS_t vcuMessages_serialize_bms_software_versions = new CanConverter.BMS_SOFTWARE_VERSIONS_t();
canconvert.Serialize_BMS_SOFTWARE_VERSIONS( vcuMessages_serialize_bms_software_versions, data);

CanConverter.ABS_Software_Version_t vcuMessages_deserialize_abs_software_version = new CanConverter.ABS_Software_Version_t();
canconvert.Deserialize_ABS_Software_Version( vcuMessages_deserialize_abs_software_version, data);

CanConverter.ABS_Software_Version_t vcuMessages_serialize_abs_software_version = new CanConverter.ABS_Software_Version_t();
canconvert.Serialize_ABS_Software_Version( vcuMessages_serialize_abs_software_version, data);

CanConverter.BMS_HARDWARE_VERSION_t vcuMessages_deserialize_bms_hardware_version = new CanConverter.BMS_HARDWARE_VERSION_t();
canconvert.Deserialize_BMS_HARDWARE_VERSION( vcuMessages_deserialize_bms_hardware_version, data);

CanConverter.BMS_HARDWARE_VERSION_t vcuMessages_serialize_bms_hardware_version = new CanConverter.BMS_HARDWARE_VERSION_t();
canconvert.Serialize_BMS_HARDWARE_VERSION( vcuMessages_serialize_bms_hardware_version, data);

CanConverter.ABS_Hardware_Version_t vcuMessages_deserialize_abs_hardware_version = new CanConverter.ABS_Hardware_Version_t();
canconvert.Deserialize_ABS_Hardware_Version( vcuMessages_deserialize_abs_hardware_version, data);

CanConverter.ABS_Hardware_Version_t vcuMessages_serialize_abs_hardware_version = new CanConverter.ABS_Hardware_Version_t();
canconvert.Serialize_ABS_Hardware_Version( vcuMessages_serialize_abs_hardware_version, data);

CanConverter.BMS_Diagnostic_Request_t vcuMessages_deserialize_bms_diagnostic_request = new CanConverter.BMS_Diagnostic_Request_t();
canconvert.Deserialize_BMS_Diagnostic_Request( vcuMessages_deserialize_bms_diagnostic_request, data);

CanConverter.BMS_Diagnostic_Request_t vcuMessages_serialize_bms_diagnostic_request = new CanConverter.BMS_Diagnostic_Request_t();
canconvert.Serialize_BMS_Diagnostic_Request( vcuMessages_serialize_bms_diagnostic_request, data);

CanConverter.BMS_Diagnostic_Response_t vcuMessages_deserialize_bms_diagnostic_response = new CanConverter.BMS_Diagnostic_Response_t();
canconvert.Deserialize_BMS_Diagnostic_Response( vcuMessages_deserialize_bms_diagnostic_response, data);

CanConverter.BMS_Diagnostic_Response_t vcuMessages_serialize_bms_diagnostic_response = new CanConverter.BMS_Diagnostic_Response_t();
canconvert.Serialize_BMS_Diagnostic_Response( vcuMessages_serialize_bms_diagnostic_response, data);

CanConverter.OTA_Status_t vcuMessages_deserialize_ota_status = new CanConverter.OTA_Status_t();
canconvert.Deserialize_OTA_Status( vcuMessages_deserialize_ota_status, data);

CanConverter.OTA_Status_t vcuMessages_serialize_ota_status = new CanConverter.OTA_Status_t();
canconvert.Serialize_OTA_Status( vcuMessages_serialize_ota_status, data);

CanConverter.Vehicle_left_SW_Cube_t vcuMessages_deserialize_vehicle_left_sw_cube = new CanConverter.Vehicle_left_SW_Cube_t();
canconvert.Deserialize_Vehicle_left_SW_Cube( vcuMessages_deserialize_vehicle_left_sw_cube, data);

CanConverter.Vehicle_left_SW_Cube_t vcuMessages_serialize_vehicle_left_sw_cube = new CanConverter.Vehicle_left_SW_Cube_t();
canconvert.Serialize_Vehicle_left_SW_Cube( vcuMessages_serialize_vehicle_left_sw_cube, data);

CanConverter.Vehicle_Right_SW_Cube_t vcuMessages_deserialize_vehicle_right_sw_cube = new CanConverter.Vehicle_Right_SW_Cube_t();
canconvert.Deserialize_Vehicle_Right_SW_Cube( vcuMessages_deserialize_vehicle_right_sw_cube, data);

CanConverter.Vehicle_Right_SW_Cube_t vcuMessages_serialize_vehicle_right_sw_cube = new CanConverter.Vehicle_Right_SW_Cube_t();
canconvert.Serialize_Vehicle_Right_SW_Cube( vcuMessages_serialize_vehicle_right_sw_cube, data);

CanConverter.ICM_Error_t vcuMessages_deserialize_icm_error = new CanConverter.ICM_Error_t();
canconvert.Deserialize_ICM_Error( vcuMessages_deserialize_icm_error, data);

CanConverter.ICM_Error_t vcuMessages_serialize_icm_error = new CanConverter.ICM_Error_t();
canconvert.Serialize_ICM_Error( vcuMessages_serialize_icm_error, data);

CanConverter.TimeStamp_Sync_Message_t vcuMessages_deserialize_timestamp_sync_message = new CanConverter.TimeStamp_Sync_Message_t();
canconvert.Deserialize_TimeStamp_Sync_Message( vcuMessages_deserialize_timestamp_sync_message, data);

CanConverter.TimeStamp_Sync_Message_t vcuMessages_serialize_timestamp_sync_message = new CanConverter.TimeStamp_Sync_Message_t();
canconvert.Serialize_TimeStamp_Sync_Message( vcuMessages_serialize_timestamp_sync_message, data);

CanConverter.RSC_Diagnostic_Request_t vcuMessages_deserialize_rsc_diagnostic_request = new CanConverter.RSC_Diagnostic_Request_t();
canconvert.Deserialize_RSC_Diagnostic_Request( vcuMessages_deserialize_rsc_diagnostic_request, data);

CanConverter.RSC_Diagnostic_Request_t vcuMessages_serialize_rsc_diagnostic_request = new CanConverter.RSC_Diagnostic_Request_t();
canconvert.Serialize_RSC_Diagnostic_Request( vcuMessages_serialize_rsc_diagnostic_request, data);

CanConverter.RSC_Diagnostic_Response_t vcuMessages_deserialize_rsc_diagnostic_response = new CanConverter.RSC_Diagnostic_Response_t();
canconvert.Deserialize_RSC_Diagnostic_Response( vcuMessages_deserialize_rsc_diagnostic_response, data);

CanConverter.RSC_Diagnostic_Response_t vcuMessages_serialize_rsc_diagnostic_response = new CanConverter.RSC_Diagnostic_Response_t();
canconvert.Serialize_RSC_Diagnostic_Response( vcuMessages_serialize_rsc_diagnostic_response, data);

CanConverter.LSC_Diagnostic_Request_t vcuMessages_deserialize_lsc_diagnostic_request = new CanConverter.LSC_Diagnostic_Request_t();
canconvert.Deserialize_LSC_Diagnostic_Request( vcuMessages_deserialize_lsc_diagnostic_request, data);

CanConverter.LSC_Diagnostic_Request_t vcuMessages_serialize_lsc_diagnostic_request = new CanConverter.LSC_Diagnostic_Request_t();
canconvert.Serialize_LSC_Diagnostic_Request( vcuMessages_serialize_lsc_diagnostic_request, data);

CanConverter.LSC_Diagnostic_Response_t vcuMessages_deserialize_lsc_diagnostic_response = new CanConverter.LSC_Diagnostic_Response_t();
canconvert.Deserialize_LSC_Diagnostic_Response( vcuMessages_deserialize_lsc_diagnostic_response, data);

CanConverter.LSC_Diagnostic_Response_t vcuMessages_serialize_lsc_diagnostic_response = new CanConverter.LSC_Diagnostic_Response_t();
canconvert.Serialize_LSC_Diagnostic_Response( vcuMessages_serialize_lsc_diagnostic_response, data);

CanConverter.MCU_Diagnostic_Request_t vcuMessages_deserialize_mcu_diagnostic_request = new CanConverter.MCU_Diagnostic_Request_t();
canconvert.Deserialize_MCU_Diagnostic_Request( vcuMessages_deserialize_mcu_diagnostic_request, data);

CanConverter.MCU_Diagnostic_Request_t vcuMessages_serialize_mcu_diagnostic_request = new CanConverter.MCU_Diagnostic_Request_t();
canconvert.Serialize_MCU_Diagnostic_Request( vcuMessages_serialize_mcu_diagnostic_request, data);

CanConverter.MCU_Diagnostic_Response_t vcuMessages_deserialize_mcu_diagnostic_response = new CanConverter.MCU_Diagnostic_Response_t();
canconvert.Deserialize_MCU_Diagnostic_Response( vcuMessages_deserialize_mcu_diagnostic_response, data);

CanConverter.MCU_Diagnostic_Response_t vcuMessages_serialize_mcu_diagnostic_response = new CanConverter.MCU_Diagnostic_Response_t();
canconvert.Serialize_MCU_Diagnostic_Response( vcuMessages_serialize_mcu_diagnostic_response, data);

CanConverter.OBC_Diagnostic_Response_t vcuMessages_deserialize_obc_diagnostic_response = new CanConverter.OBC_Diagnostic_Response_t();
canconvert.Deserialize_OBC_Diagnostic_Response( vcuMessages_deserialize_obc_diagnostic_response, data);

CanConverter.OBC_Diagnostic_Response_t vcuMessages_serialize_obc_diagnostic_response = new CanConverter.OBC_Diagnostic_Response_t();
canconvert.Serialize_OBC_Diagnostic_Response( vcuMessages_serialize_obc_diagnostic_response, data);

CanConverter.ABS_Diag_Request_t vcuMessages_deserialize_abs_diag_request = new CanConverter.ABS_Diag_Request_t();
canconvert.Deserialize_ABS_Diag_Request( vcuMessages_deserialize_abs_diag_request, data);

CanConverter.ABS_Diag_Request_t vcuMessages_serialize_abs_diag_request = new CanConverter.ABS_Diag_Request_t();
canconvert.Serialize_ABS_Diag_Request( vcuMessages_serialize_abs_diag_request, data);

CanConverter.ABS_Diag_Response_t vcuMessages_deserialize_abs_diag_response = new CanConverter.ABS_Diag_Response_t();
canconvert.Deserialize_ABS_Diag_Response( vcuMessages_deserialize_abs_diag_response, data);

CanConverter.ABS_Diag_Response_t vcuMessages_serialize_abs_diag_response = new CanConverter.ABS_Diag_Response_t();
canconvert.Serialize_ABS_Diag_Response( vcuMessages_serialize_abs_diag_response, data);

CanConverter.OBC_Diagnostic_Request_t vcuMessages_deserialize_obc_diagnostic_request = new CanConverter.OBC_Diagnostic_Request_t();
canconvert.Deserialize_OBC_Diagnostic_Request( vcuMessages_deserialize_obc_diagnostic_request, data);

CanConverter.OBC_Diagnostic_Request_t vcuMessages_serialize_obc_diagnostic_request = new CanConverter.OBC_Diagnostic_Request_t();
canconvert.Serialize_OBC_Diagnostic_Request( vcuMessages_serialize_obc_diagnostic_request, data);

CanConverter.HU_Diagnostic_Response_t vcuMessages_deserialize_hu_diagnostic_response = new CanConverter.HU_Diagnostic_Response_t();
canconvert.Deserialize_HU_Diagnostic_Response( vcuMessages_deserialize_hu_diagnostic_response, data);

CanConverter.HU_Diagnostic_Response_t vcuMessages_serialize_hu_diagnostic_response = new CanConverter.HU_Diagnostic_Response_t();
canconvert.Serialize_HU_Diagnostic_Response( vcuMessages_serialize_hu_diagnostic_response, data);

CanConverter.HU_Diagnostic_Request_t vcuMessages_deserialize_hu_diagnostic_request = new CanConverter.HU_Diagnostic_Request_t();
canconvert.Deserialize_HU_Diagnostic_Request( vcuMessages_deserialize_hu_diagnostic_request, data);

CanConverter.HU_Diagnostic_Request_t vcuMessages_serialize_hu_diagnostic_request = new CanConverter.HU_Diagnostic_Request_t();
canconvert.Serialize_HU_Diagnostic_Request( vcuMessages_serialize_hu_diagnostic_request, data);

CanConverter.ESCL_Diagnostic_Response_t vcuMessages_deserialize_escl_diagnostic_response = new CanConverter.ESCL_Diagnostic_Response_t();
canconvert.Deserialize_ESCL_Diagnostic_Response( vcuMessages_deserialize_escl_diagnostic_response, data);

CanConverter.ESCL_Diagnostic_Response_t vcuMessages_serialize_escl_diagnostic_response = new CanConverter.ESCL_Diagnostic_Response_t();
canconvert.Serialize_ESCL_Diagnostic_Response( vcuMessages_serialize_escl_diagnostic_response, data);

CanConverter.ESCL_Diagnostic_Request_t vcuMessages_deserialize_escl_diagnostic_request = new CanConverter.ESCL_Diagnostic_Request_t();
canconvert.Deserialize_ESCL_Diagnostic_Request( vcuMessages_deserialize_escl_diagnostic_request, data);

CanConverter.ESCL_Diagnostic_Request_t vcuMessages_serialize_escl_diagnostic_request = new CanConverter.ESCL_Diagnostic_Request_t();
canconvert.Serialize_ESCL_Diagnostic_Request( vcuMessages_serialize_escl_diagnostic_request, data);

CanConverter.BCM_Diagnostic_Response_t vcuMessages_deserialize_bcm_diagnostic_response = new CanConverter.BCM_Diagnostic_Response_t();
canconvert.Deserialize_BCM_Diagnostic_Response( vcuMessages_deserialize_bcm_diagnostic_response, data);

CanConverter.BCM_Diagnostic_Response_t vcuMessages_serialize_bcm_diagnostic_response = new CanConverter.BCM_Diagnostic_Response_t();
canconvert.Serialize_BCM_Diagnostic_Response( vcuMessages_serialize_bcm_diagnostic_response, data);

CanConverter.BCM_Diagnostic_Request_t vcuMessages_deserialize_bcm_diagnostic_request = new CanConverter.BCM_Diagnostic_Request_t();
canconvert.Deserialize_BCM_Diagnostic_Request( vcuMessages_deserialize_bcm_diagnostic_request, data);

CanConverter.BCM_Diagnostic_Request_t vcuMessages_serialize_bcm_diagnostic_request = new CanConverter.BCM_Diagnostic_Request_t();
canconvert.Serialize_BCM_Diagnostic_Request( vcuMessages_serialize_bcm_diagnostic_request, data);

CanConverter.Func_Diagnostic_Request_t vcuMessages_deserialize_func_diagnostic_request = new CanConverter.Func_Diagnostic_Request_t();
canconvert.Deserialize_Func_Diagnostic_Request( vcuMessages_deserialize_func_diagnostic_request, data);

CanConverter.Func_Diagnostic_Request_t vcuMessages_serialize_func_diagnostic_request = new CanConverter.Func_Diagnostic_Request_t();
canconvert.Serialize_Func_Diagnostic_Request( vcuMessages_serialize_func_diagnostic_request, data);

CanConverter.BATTERY_STATUS_INFO_t vcuMessages_deserialize_battery_status_info = new CanConverter.BATTERY_STATUS_INFO_t();
canconvert.Deserialize_BATTERY_STATUS_INFO( vcuMessages_deserialize_battery_status_info, data);

CanConverter.BATTERY_STATUS_INFO_t vcuMessages_serialize_battery_status_info = new CanConverter.BATTERY_STATUS_INFO_t();
canconvert.Serialize_BATTERY_STATUS_INFO( vcuMessages_serialize_battery_status_info, data);

}
}
